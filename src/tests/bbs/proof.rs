use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::Generators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::types::{Message, ProofMessage},
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof =
            Proof::new_with_rng::<_, _, Bls12381Shake256CipherSuiteParameter>(
                pk,
                signature,
                header,
                ph,
                &generators,
                proof_messages.as_slice(),
                &mut rng,
            )
            .expect(&format!(
                "proof generation failed - {failure_debug_message}"
            ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["84179bd8ec35bbaff08b98adbda9d8d59af4257c65fa3f7cb6695a0a4ee0cf516f0a0103c0d8c175c10395651ba6009dae552d4293484c5f2d5aa1e1bc083ed68b1a1bca82eceb96e54ae1d33819e84142cc51983a30f88c8b4f6bc97be41f79803d7cacbc32210e75c54fd315471de7323a9ec2de4ff22d50166b231d64ebcbacc322c6dfed754982332917ece1add755fe8cec6835dd1d4e7f4ced8a60afecaf768f2395673d32bd86cfdafa8f243b6288514413ed322f60533e3ef102a5b948343ab7f0e9dbcd2652c19d7e75a87608e2717a7a98ba968548602ec58eec38f6a367d9ea4ac64ba336c003a2d9f1b24d48a872d076d0cc5a54e9af104132881d5a3febde8af3826a6def74203d73284f4f5ed06589b2d04f483a9683fee18aa0e978a6c7f43b0469f8cc6d7631109168186c416668e4f58230e0bc399738d4205541215573673f0605cc933b1ef57c3e1ac3e7258548b78e4b68e1ce4aec44f8c9ade558b7fc71e2db206c7d477f5b53ceea78e7f3d3f3276ed6c922e9aeccc8a657c5ff0f97c0782f974edc4a1ae112d323f451e2d46dc464122f4ab1e8b1152eb9b06ea86541588cd19ca6cc28c2728c816b0331003fcff024c3a9649c9f3ae66130aa412f5cac3bb20998e0e3883c0446fc3143428f09cf4e6871a30cca82d183491c346510e8f1358bb64576b5", "8d0f2cc7efb50017ff4ca59bc52933ebaebf7e699de589fdd99c8276b1116f9f8b0cfda68420a0ce8261a55ac65a492687480c0201ee7f51f0b586ac20be7944ce9a0dc38c0342f5186722e34d65eec8df44c74ed496156e3d017f9b7593c4f791f206dfcd6a390ecc5ba1932849e6424e28dd44e3dde7652ccf0d98c31f245049f025ef65656a0d567c8820b2f58a73706b4f15fdb82ad5b2499061019d6c83c9fdb2de0466400c2b4b95611316dbdf0b659f8455bb215a08066100196c92bd0428921234e13fd8c90d979b9df863802cd175884410c18d5e71eab3d686ec36f4881bc6e95b67518832436a66f76020655f6034f2841a237f116988f912e5e7e76ad93eae6eb3afe236c46a49218f1e1b4ec98f4649e58131a5413bcff8c21dc7705d48babd74688338f7d2b730390432fe800afa994a52983d2d53ff7e16dce896fe51a14dbd7e8ed9e5fd02285daa501ebb7a7d429fd884cd10d9da5b2d8d7bda3adae2f30dd53a523ef134a064942c686a359f4a148578b40da94b15c21064bf8345e3979ae6ba6689328c4abe461336725943a7723029fbaa9fc4dbc8371c35e7ffbd77b0aee6824b20fc59165a4b267d0f763007ea17503b9c4afbb1d1bd91eb43b48de43495aaa5693136c785", "b0748f2a1f4c468b6334195bb2898d3efaf2de13ae544acb5e56c315526b01e2efb6c147816587bae77de5d28b6c2ed0a41677fe897b35507d49a06c11acdfe90ff943eb185e416d8336d50e3bdd7038bdce77cd9fd9055dca0aff3595c484e9a964374f1d5008c3a8a4c60a635bf64d1f97e3ddc13df28179192a85038bc463421c993f4282d0bde0a6d85644003a40367121ef7102ef254fadcc937d8ffe64efeea31d4e4e9bdd07507e8333137ca52e6ba962842c7ebf1caa8c5c47bde067eb439576360bcc071fc8f684c6a7ae1b26db18c0453d3e15bfa8e592c24fea8d6ce96cfafe0e50ded4488f50bf37ddb915b7adbd6661c2328d5752c48dadf81c2cb1c068f67fd98078b82ee266a8ae1b3cd359a28dd923a2e22d4e2d9441b357e3760626b91bbb6822c44beaf0f8c4ee3bc637862e954809d81e9460edab31fb4967d043acce78eb54adbad457cdfe895203b820a6371e210059f22e4618a34a1fc26dfc6c5af9745bbed46e646139085c95c0522400ce584292730797778c0a651d6e39e4587686c794614260705ea469d372b03af6c7358084b035ebb6e17b63e7b9ff195afbb2977a8b3422ebe0b5", "81e7074693082d6dc750ab859f86e6d7557b4b98931cdf2b572d8b0cf5a9bdb27f40ecfa9fd94ded9abd99e196c553778373051cbac743307d39179447d0bc1c6b928f7987e758340f5dcd810606841291ae94c2868ea46baaa7062afa3579f4ac981eeceb274a5f139e6ccd1cbf5c872d86ae8eeeef0eab622e7387f9a14a101188aa1c82170e2688d78834444ef58327e1f5a640af32e20125b533e52a1e6471598dc40e1dc735c11ea7796b64edf721c0c8104822640bc680c81a7f7eb73e91beb8b87e5824d96eb21e2ce08e67a063888fba899b616d3f58c88b4323a432651b35055ae8976bd9a128a24834f48d615a3bf284ba4e881e8de247635d6898897bf0c2b7c0ad6e2046192c6f34b2d628c08b6a8a5614d6fee093e817b297ee9d956667e26c934d5a1bd71768ceb4af6c3dbbe60a3eeaf2ea8a2da1d0db1f6ae986ba556a81537712ffee10114274bd315a5e4e0a39d9774b73905dee657e38442781d1c7bd12ce5d0e3cd38794625d00eed0d70fa00774bdc4a14e969ada7d61c0de36e8e2dc6dc4a8d22e14a8c8dc", "a2846658018a53b4fb6868442756768cad33b72cd01ebd239f96cedf35f7b80536a64a4d4e597347e7303790711cd450b5097a76af10455bfe5812c5857121fd8eb16670d6542a540015f9333dcad4aa105d482babf0d6a01708a233745bdc9395e63a1a3ab0ccf55c740683c3433a7d5305b54e7fa423156f36d04239a295717222dcf38556335c420d164933414c31473ed23cc07b7a735a0e8b648c76344b8bbe504a96ffab4bffbc9cc01c54a6d36dc1b8d44fa66f07ccffee145a17f4c1cc77c09018cc91e2c5c5d7c60b82dd561a530be2703e5b97033a4a190f6a08bf8d92802bdd4f567a4e6e466d9e685af440d75122b7f472a2588b90454d6109fb850d8cdadef3b4d72871ec58336881460e3f7bdb9303afc9f3147cbd809d6c6cdda515bbb3233260a861835a7e2f572d17082a386832c14efb20e69b800fb49869f5d94246aca5dd710fcd3ab18a8338711438a6efb9d7438120df0dd9db0b0497df45c5e19d6a5097219679fe032ee6", "b4081b12b84a3a4cf8d92bf3c0247f96005f44fdd3455b3090c6c48eef88ce1627f4b94b304576a2bc7df65defc06ec4aa9fd462dbfb2e070561f6e54cf803a6eaea3d4c8a350c7dc09845c0aa83a9f20fe7de78b1d5f68e046e2578f6d4d2bfa48305372f7d820f6fbfe398b1b885445ba99c05b58e8ddaa1edb1fefd8a326c7b95a6f1f78b124f0f48ea9a95409cfa0facb817df16856c04f3ca7d031cfb43ca90c9dea52e5983af7a7c8ae9d3f0480b09d0bb154cc31f014932d42b0130d3eebb3c46fdb53c0fc00fce184f51d7ba55e80d4def683feaa2a262c81d7914d37352bdb90c5c95d94ab732b033d4e0bb44f81a8555547b5de6dc50562c6e5b7bdb8da1ae19aee1097673d521981491c90d7988f824e021fc172329b1f43dc6d152c5520156817e28afef27cfa15adbe530143bbebbc88621232dbb7dc8aadc8bd7f595ff231e29fe4254142fa440f452"],
        ["b0cef7fb340ec79a9b3f2196e494672206c45ffe7508ce9e1b918995b32ba1ae0b2c66cd3cfc1b864bf1af1105065aa4ae33d9ea97f56c5d1ecf50365b798c2e9ce128c6a6dccaebd39c9e8f0139a6ea024647b383eb1325fff83eb8126e31f9a6852b5b9542fbe5b9a1c118ff4fe857e1492bbe711af7a35c336d369b969715ba6295be3b69f128001c8b1837bbe4227096cdbafaa0876c169652bffcbb24b56a6cd237bc3cc77ab235faf63e894d5647a83304267f508870236e04531e586e512dae49ff9fc5cd4de44b282ca2e1cb1ffe7073a299fc1ca894ddaca62fa2656d42a8f651520340513753917b9a17722343c4a91712fd0c9f562cfa9c1f4f844a0a8fd779be18334ca09f73cf94634260da94120c888fa98fab562e629f43a55b6f372751aba2b1cc22add2beb508e8551cb2884dd9105b7d685e0dec337f9a2b1b77eaf296b70ee75dc4d9edd53bbc4e30b71acc1ff72b1c3afd214de41e0e0895e7e3dfeeeedfa1a32b76db2f9c0d467823f03f1030323fa51d25038196044ceed259acc6aed350875f8e933dfeb1129b3348eb308af6ba8f364a37de1a190efdb188ad2215881799fdbaafb7574c021ae9e201c2eaf08651440da9834fde16cbc5b8bda2a8a1ee9b9b06df729bae67280171fcb2749b2ac43e36771bf2fdb2ed66c8c94ce22627d635d1a7bef033", "8163391eb2fb60cf0e2077ba8c2761dcfd102595f4ce7171f1af7e87b94bb91ddb3673b22f925567f67cac0f7f18ae0c9494d2839814dbb0ebc1ecc905c3892b032bc83890fcc6b3c2751114358654208ae487506aba28048c6e2fb404a5548fa21f32c295208cc636dedaa390f2fd1e34302b79b67a2d30f4564aed173e8ed13fc823c72d6a15f643a779f6ca45696f6d8d5fde687f42072637f8cdea6bb83657de1579ab520e980fb43978acac443b2900ff2900e21e94baf1d1b862b2b47d382f1a1377521b1333328c19db9a310544ebe6c087b4bc1db8209a765cc299a4f1a65e6d301796df90d498ffdbced84c64be1e6e97d9e9c148190930e64f85122915f7b0e99bd58de4aede48b9a5a005581c5d84d41a414d782f05778aadb15629376f3d8b04f35ded331a4f504e91f2011297226bf6bac643f17c90e9a708ac1bd8c63d9e74f38b949249abb0b2b0635b1db6055b9d7f3bd43361e295921fe09978b5bbdfcf1b16c26b1629f048876d49ca22ec9e19be9a3862383fd1a68b09dc6e86d0358c28b4f4a13553d088ea1d321de96454b93868ad4f0d264b930362d744508a507709e58a9c43b8a44aaca941d59cf383a0eac4c19657d6b7fd18c59bec48886fd9d7c416df49bb6ecb2f6b", "8df051bd63f3fa5b7e1a7abe6c437533ca1dcdaf9f0ba3e9a8e882c351573e15875c09217d3e5dfa3014eac891622aedb596d322048173a7285a235c3fc046a3d7f32fbef6890e9c2dd869476a964b974dce193743d8cd9fb9f3ab00904713ba8967d1174eaf8e00f2e72260fe000753c7b6b43401e5ded13ba5b7c1201a0ca74c0eb3d8f5e1eda6a537f779cb3cd040267f682dbc3a75c44de9e6cfd86cefe731dbd06ca680d9ff6ffb4b53bc658f6f450c4e7a9eac583f13ae8e86fcd1a8096dddc8dc37e68d8ae54e2f842e009a8613c20158eb4866dc68883ae94aa5f50b43de50db3a8e3404d4c1b11dcd19e49c434d868ddf70f8052b1600f868fb0a9b9ba6f0628a78c19134dac711b404dd554f42d5bd7edced822cf51a666f83af7fd4c4ea535ba6076baf56ed3263e6efc732b27f80d43351f325af347f2ad98b35425969171fd514518c988c1531e7a0dc071e90ea8833525d1dca522a133178c08f622fbc441982c379e749e8abd62bb63adf0eb9be942871b3b38f5e5100016f1fb331d7a7450d5264ea8ea116a97e825961ba949c19ffa0f37bf52f86c1d8660d3d035912bcb27cd6a67bea31bf3b2f", "a1711a13da566fa83474f53bc8781f68147316750a5e8fe29f27add1061b9184ebfbd722fb5a5fed0aa4ccce111c5f3790570cfd6c777e749b91fd4e9fd0cbb00174f8a9623b7c7008e7a9249c7ae30452545cb784a1a77ef1c56b547a8a67bdb445fd4ed90b8d192defaa31748d3a32ea73b67ed55356a5c9dafe5e6330fed1fd0b362a0ebca554764eeef0a2fc100a4ad63e589904290189ca0da59ba41efea4e39c96793439e0c54e5c821dece9af08e3c4cfcf43b9ff56317ba39a8d30afb68982825be2da054b8e566e32eed57b1a9747ceeab9124675aadefe7369c3394f208a32c773414cf5e2a4c11d841091008039bcf570a438b502d84041550441c2f4dcf8bb3956090bba69665edb45512c7841ca10b34a5b7ded261bafeb315488990b4cfb6bf431dfce9cf9c9bfae171697fe9a4bf40f0ff93b4831cd794b5698f693eba6ce30648d07fde3da6f9fbd64f59dd6c83fbecad90032c4f1e81636ec931312bc0e6e39b76498420078f7894dee62056f3df336244ed072be25cf9a7b922f838ca8911bd7c13e14ca9071ce", "8cc844c78e4ef6d8bf50c66039d42982e02f1ee15bc10c198bd41866d599fdfc96b372a975a6a675e3bc54bc0afe840eb88a75705c072f557d5cb6c172a61904b618fa7635b496ba44e51ec566cc3e042e8a0c47d6a38cd57ebafd3446f97eada733ecdd5a59eaedc2e4d47e5e388305a2cfba50eb678be300ef065d07b0688df27d7f127b96116dab2c4c7d32aaed030277c4f792eb13051e95ad172bd8f153f943ddfc117d447b2f9ffcd08c93c94029fbc25858c3723f967909c8a706da480803fa121f74a9b3db5c1ba381c8e24522b192ab1cde9cab50d072730ff729838ffe385a819d48461a4f3d818b2ac0f63982bf5cae771b65434f21d7ba7d377084b2f338214b06012a113da6f3a545cd7143c50978b6cbfc2f02788b8da3fc1f982b8645009add98a7a425ec3dc847500e2360897e3c8665a8e632bc50457061b325fb093e55c93c2e593fe08ea48d3203201ad01e57c7eebb898920ba7aa612c2e4cbdd38ed2519dfe9707acbcf8de6", "8cfbd750dfb45455301e83c3c40dfd64b0cf8a2d6d554332d2451b2bbd7c4099f0f3d78e2ebe4272e360f1c07128d8ac86544316a1b1e082495f8a2bc43c453742d6264b97d93190b2fe9418be10a3f185a183edc934a8b0dc7ea07967f3354e8f0452038d5df47f697697f37d8551bfa8b2080325f3338869d61e8cdbbe4f2306f1767d0ca968283530381ee5347cb019eece2f2f9bf98bed606d3b964bd46c8375b9ee304dadd4f10a5032b515acce6498c145a0084b1c5f3c9f14902216f6d6ec3c83c9cf4748fe0164f0354c551116400840a7ae05f5a185f24bd33697bc0c39f6f75cbcc73bda5c50a83f23085f4183cd5e169ea383b9b8cdb47e06f4e90dc6269ee0966d9c6b51dcee7b847e8c59910468fca085ea3f28debee03b9928cdefa8123cc4d1bebc82bcb1fb5f07285cd08adb94d78383360cb7456bab6398292cf96be275c5f1adbd6dae849f54fa"],
        ["a09d9c2f13bb2e920f248df8e5c36719cf051a70d1de73e82f66f1299c2ed1f4e692d001261a390eee68e2f2d372db40a936770f63cfdf859635e28fbe93deb1a1e0f23302daea0edb64f23f9c61cf58854a09dd4528296106ba5f2421f4a6439816ffe78129f0fde8dab73685fa570127491a4d59f4d15525bb2e94ac1dc876fa8ae9fc0ed4fe3d330a083b138d0185581ec3407aba88ca64b328b95f16343b829fa01cb2707dbc690e84288985d99709250ff1dc988d69ea304dc4c0fc201c621e32e95621080ec7ca683f7769f2b9136de20c87d7142465a0d7467457a0b759a8a7cd401391dd0bd5347f4a86f5f22c40430c0470735f033d9b0574bcf2e8add565620ec22c513022253a486dd2b641bea446f9d4be1b39eb01d4fb4287f1d26b467a7a7926a606437c69204ed00f3b5ec6ff1c82efc407b95c03e8946a971f6269098eff62f4cc8801046fce6c292a6729b17909c650a3f3a85712bf18a216125bf25c0aa1a1b616da6275a378de1a58dadbbc7a7af4b77128c0a0ef8388d4e76f63d08f4c6510d7f1b36da6881b1337daa694ea40b67d17bc1c7de549a8392ad4c734922dde50a8436bd95d22203c16b61ff8691bea82a7ce7c0f8a174c2f3e5dddc6e0a5c3f18265ca1143a7b33014d08a2de479f97d133341efe0be9abf2393d4153a1ac7f1829b7e988c264f", "b7a314cb6bd279d2ff54556194d3d67c00b55f332c532a3c5a794bfa2b11de390d0b262c80bd62b3210ea005c7395ccbb342e54a839e54992c9c85058e93d1484fa39b973546d16c60573620a1a0cade118de8f9b502ee61ef8aa665d96f8b2da44297171a59f6a400857ae7f4c0fc175170d133d5bdfceee87c6168b81edfd5097f622a27f86d7bc8a1c1e94efcae071bb4e6816331786961638802bbb7f3b443c61dfeeee3c5c8f442c7018662712a6c01b6f93ddafee67c548aaa1ab2a063ee36e80705b459f9004eae2398e0f8b4418da27cb1b271557dc5c020a99c87ac892ec4ef12057012f971d179273ecd38115554674318940969f880479fc6b82fb52432cdf9cd983eabbba21b25b0bd4c00e654d3739efd7b16f5251fdac84161d3c0e565858a9d80119d273277ed30c924c020b2c2d29ed92a86fa231256c56d305d5cd8133d87f9026b7c49daed6e3a13492255d2d87df83c203957b6b0502707859a15a26ea0a61871a92d1d76827330d57f5f1c7ffa7e76a410b98ae4b57bfa744dc616cb6bbb85816cbf32e8db1027f3713a990a9bbe007e18a0ece83ef0659a81ca2783726d553d47c57c5cb2b107d0ed72ecb43e14c48f6814b7faacd3d04e0603dd4569aa6da850476a315387", "900bb74b94abb49f01cd6e5db053775f7a975d448952d28e4d5c35c040ddb001705e0054dd0ee1a5065caa838e29dc8286a9064fd92e44ad1b9003adacc09b2ec93500fbd04a18f12b63c104cb562ba626c4e2b0afcc864dcb9145be9cc6203487ac9f41b7a88606b80905b1b03a5de093d241e6f2250c35ed1bd4471e0d1132e4ac0ccda1cdc75f811ac55e761627456524dc23cfc4099d6f9f664689748c389e2a2e2e86d5abdf3b42392e03a7f76f4960d0a19c94660a5e148f8353bf337957b36f37b1ff5c68637f16a88eb3fe016fcbaac8111673c96afb5b2e9785f25c8aef800d7b340911beb6b32d88e8f219366d977f77767b5e6978ddf0dad1e8efd5065addedcd767a69c89621b6e727a438e7efcd6ce0c797d7900ea6178b400e727c115938875229919c0284c2659ed464815996dcec15635898547f7eccb797bd415d60bf56e38e6cfc239206048aed6174d473b2b26c82908c02ec5e36707ab301be85cb386a1ce43761ed3c4e0c210beede6df8f5b6964a63699713095f934a28d7c99fa4cea90071430218fac859360d23452c953e612c53bfe66c7be5de6e4d0e74e606391d824dbf4226f35494", "86213119a659f2e29bc35382174d5df78c1554f242707c59e1695126c465a2a5aecc7c4f28af03880101b8817f4fd8b3a8f6cb04efc1edcb026855ac6f511186de781124eb4fe0b7c8b0cd959ad70548898dff70dc9faa046a109a9d9610794f81a07e2e2c5cff1f613a3486c672958d742eb2d6a2dc7905836c987296cf33ae4ab5559b4ffd6952369e5aa85928fef72c51863a60afec2e3934eadce33ec7721ab0394bba08e23a433800016d1508a9621883dea8928fa5de6087e361ad79d4f530be9cc75e46380a6edec276ac7ff40b579f8936d78928d64ce42f6bc9bdbed3380180ec63c3f6ede1312f273cadc46187d9c9d760e53c660c30483978db6eb0655decc79567da3f760ea77ddc0c605b5f9763c098d942927c7b6595bb4f7081db19905c7fb9138030dc30db975cdd271817d74ad999cde90197cbf4e70eaae0babedec627657c96cdc7d51ba4f77b611028f8e1719af6695e05c8a494e14ea52ead0a9542a11408c8fcdc01b557b5461a58a17abd21c4aece16df8766fbb5a0208071180f0692cc8f898d959f56d1", "b49235fe8ad91a2c93f764e3b2a9373c8194aa5449bb38b04ad1569d8fc8784ddd4907e7c727375a5c1c534add0a7827a39534eb0f7e8a5a3c01a56021f77317098606a84fdb4c9970253691f9696d18e344b7b6e32fae6f5f990d0cbeb678408405f74e5ccad845dd90565fbbe961cb0f0a61c28cf6188c5197b498a4fd6b7176a1d124a54d10110b59dd51dc1a41ad242f713b8fb3e27517cffa2b147cad936a34d8110429d58d16e38d216c51ee4b1eb8cab49819e109aa6355d913da7cf7dfb20d60418f83009d06c84520bd857e6d7abbc0b5c21b08cdcc0e2524c25a8a9666639234765bc20b9f725a8e40c7d007a3dda566660e540badc0dbafefaf5de5fa75a05dbaffc9f6b9c2baa0a364c45589465935c57633846f224671a74879d6469d747f2da809e9ce14108b375b8f1fe05d0394ed37e0bdedfd68922179e7fbdc8ecb18c63e084595e4142a5f5be1483ebafcca68de56d70dbba3d4d08604831a8818c93fbeee5b28e877515e642e", "8ffffc395186c3ee4182f291b479ec406e9021119ae8c409a0c6cb15c5a9f485b29ca148d72c5655cd0555db543841a7954af4f50a0f923503a2d1d82a02bfa67ff3aca017e6d13f01d8777296ade323d20076cbb27e3a808452e4c0842efa619603f8b986001ac0c412c8dd07eddb723e008539d701efcc5f22fcebc7820be090ce6c27502096a23c0d8d074bc6c62c18f8a2194c416d1e402914ef609ffda1d369346a6541cc62488351bb7ba2ed5d4e308a92086ffffb419942509eb5bc9ad62722a8c86ced6b8548d645d3644d1210c8c3121d6d85b11138536f349a014d4046484bc80d18f3d70e1fbe98f25fe4671626e0e5469c62f1498e2e549f42d27a45f8d76dd3661efac8137de013c3794cd867dc0d9d2bd6079fe85a06ba32d301fdbaff2dbccd81693de25a9cd11afe16da2cda8d0907daa017607ce5647d041eecb3224b3e528447d1dd17b7ae5acb"],
        ["94d61315cbb0df2ee627696eae274727be2aa205096146cdbb5eccc2e48a2058e44133dec6d99230b4f120d9a15c3144b759af083923cedba5893d91fa661e65261ad31d71ab196a6e7aff73df06e07d7fc907dcf6b35f582ac1dbbd57af2d1384e7e641515ae3a905e3ba2855d2fb4b9e579d18b12d42d14f90ff1a73e8b6ae26e80fd38ac1518a7e2f020f357b819232cbd99a3080aec55725eafb28155e029218cfef107edc98814a7ae7601dc3f6265a9f649ad8c850b2e1c7fcd041b316f06770ffd1576675aecb631bb05bd920288b84c7cdc3815049f39bc8f0ff66bd3897803a507f30760b6e68e279ad73d225e9bc4f317a0e5dff22889f1f17cf3fc825f4a60456ecf748b9f729a9eaeed4395f463b600662ff038d7b79b48273d88c3726d0efbaa91d3deb1cef822343de065dc820165c2a8c7c85cd3f28a616d7ef4cff4135c0b1ca03fbdf7bb26ae2fa73404aa603f455e1ba1119d58bb9687f697c6e082519f7d177885d2d9bcd17742f6c738eb0e40fb6005b49e927af8a8b9d822c8cabaa616e3f9dcbd8e9c6eb915b5642abd9e79946f244c38a88ce87e7413d082549b64919b698112e3dc2d6e429fa189d6a6f2a25aa48e53c9cf453484001f79138f11d8c1adc74a6e2062fbb58e50dc502a7d858600651aa6d2e3472fd237ff9bf0b19b901e8e5b3c5e7a4c4", "8d75e855ca7b6ec527c5b556c1d52be4d0bd410929bf53863234bc21f9fbc4af8ccde864f963d0c7f9af388a50e38a04a0fd48dd9637ca4f11f57a1157a471f288e48a05fe73b17428ea0df4dde6c3ded2865ad1821db2a5d32acc989b89fae797ca43949a90682d1acb29cec7777d383953a9409c275bd9c67a8fdec9d5d07d5354c2979ad1b0967bee59bb8f9ac9db1caa08e15fe1e30bec01f23e71dccdc2cda5c5dbe3cfb2b4b3ccaf319e080e192cee175df1da2137d37a1be10be5af4f7e8d87a2e0814e481807e2cca96164a94d0c8b77d45661a923c05845fce76195eea29ec229bbc5329eee189c44b6304e4fb4eac039b27b64129a2c41f35167b857884fca6bc92b185ce7d42622ef45953e620a2880b0e259fa8eed9bbabe7ebb807cdd7c45b1e44b830a711b084eb4967382d3b521b8971b1223ac0d53719146b146ece3b6d877543f04c38b85a6656235c8c16f6a42233125c00f33487ad26bc166d8ff904be9008f47c380c0420b1a29d288a4bb60bd405bc834510e7822fedd1744572f5969e03aa238bf54b366960193c0e4700b1af487e951b95356be139e572c3a28eefe99b3dcadd89a4ffe68198b1e379eda244a3564ae6326e41581b5acf6abd244ea55562d6516465ee5c6", "a386988546259b056acc311f30770ad0f42e575ad4e28852ecb7692af12b0018a387c5858b92a01ea2f647cb60c09f09aa7dcab8faa06d60c366ef6ec189458d058a870a223ec16fee686de83e7ee375a2e37ffacc442ea93b23f73f9f154114973bf8e7888325a16ff7e4ffec26249a69ee1850b0f4e07917724104301c436f0e99db281cc204744560ee42984bc28b6407b900e55c03dc84a89cbb811132ca31c1483ca28aa6c072ed55db14e27f7a208bb0a23d5c1d0c9e44c407986166c5789bdadff2a79de045fdaca916553bae0ac0fb25153954bd12919fb5971261e82c28c5793a5c4416c08f0f3264ec473a56c735fb548ed83a4c47b4de030427a9c2944e5b53ae280b7fcc2064df9ba5e33cf2d8af93f51fcb3275bdc8d88ca3b9c56f4363e88d7554d9f46b5c8207a3f30c7bf034ff1930daaf4ac615eeecbb5ecf76c1e6442f9c9d66c777f9cc6b549f3d384e54d518942513d38f278e0a971119aa83e9e84646b4bbe72e64564ae2d2627410e4fc0c2b066dceeb580e41b386629c951554d8cff5fbc73a91c8ae1a3e3ff4c7030edd8b36a68895c322d63a796afbc2eb00f32acf237cc3795ca33264", "8866ec25fb14f0438fb16b33347848873bca8600de7f643edc77d1489c8382507d44635c434aa31942f08f25fc90cb0cadf75cfb51fffdf59eda8274a879d593c4d1f5d9d177e483d4abbd165ffc8010d3d92a28aa5512a851cdae34731c1001b529e1bb984cefe6d14c974b059c4504605e07ee815f8e107ddcd4d93de3fbee19348642e2d43d9191b5f3c2c23d437214b667e7b6786e603eae17cda322f4946cf036637c84ed9b93f06810004225486dc809736d26fc238d19476828197b0d351adab446f601e8135db6e58f890e1062eb7ff80f1cf2fa798039823ca6aca360bee3c5aebe0b15a3f0acb16afd1bdc1a16ed5abb7c3fab81011b8b497f158e68dc9b2c707454dddfb973e95d54b54e69f23351cc33f716507a127994b809bf8368532a117dd80847e5d157039cb5903752636a1ed6142b204c2e4ba57023288669dcad55826f4291a87424102c7bdf230dd2cbac76aacd9bcb732ebb12d77fbee66ffd6d192611ac8e3d92f2f6a5c420ea0b3c81997d7655752243307ab27a3aad1ef5e7913500023004ae4213f8a6", "883bd63be8d82a936a929a0d80fde9c15fc67287b883460b4cf08bcf5ec8f696cfdb38e72bed8a9c475e9b4e008e4293b216029501ee75cae21bd1e4fa280bb87aafa54e42c73d9a5c4279631ba57e2fd683d7d2b959041afaa547c58b2b192d94efeb06c7d7cee68f6f94624e8e06aba6a2ee0c696a01008a3d1e4c546d66a09a40eb5982faa268d07840511ac810253112f75c136ddcdd55ba0cf664eba0e7f410b6a660897564563fdaa1d8cdb98301e6747c9ac90bb5420faeea20f4e408c4c6af10e32120865967233fb7c1ec1e65882da75871ee73581f70dda10a021fb8b4888ec789c8e4e46a13d13eae60bf65e633b89dcd1144426a75602178b2eb8c3226f9d336e545dd3aacd0128c082d603ccfa76a26b8c3aa3e981fb92c47ac2c5e06d274f2ceab069d5b49ad060faf1bbd7c41db40e337d9add8838e4d1e3bfefc5937e603b27bcefb9be64ef4eb2d54697a90334f184387846fef705e834f13cfea460751e0e6cb04b305bd61c617", "87246502ef14fd1ae7ec5e903c3d99f38cbde5f614f1714ea3b90da7f392b5166a8da2d02612dfc66d0c1b66872c307693cca9d78673f0c87d11d3008456b8af19c7da6542708cc7ea8a74375d268225a37c0e4d2d65574c1f7ddc7a2e25e462b0a65f83b8c033856252a040a42af8ab45f047a9bbc06510248b858d4894783a30470c2504cc23bd81e27dfbdcdfeeca01e6d6cf74e7c23fddeced268fcff36ad5b3d242d1795145d069ca9b78ef180a111910c0e8c79219e3b21de883a29c63860f3c25d2dba760f4c5f77729ef2b727112651abab0bd07740b81ff29fbf53735cf114e656a2d17b3a09c4946b6c0d3484c0652b7c19cc5b7b474eea336053285f98c01dcfe49803a9db89a08ec3deb2f9fe2d3e2268109c2b45cc02aa6c691822cad6f38aeb476e3081a9c560d47ee6ee619b4642aee71461de8377646abea1149394fdbea9047565a4438ab916ec2"],
        ["85094005635392c24f06ab3b740e3460a12e2889b5581ace093803f301d6ea31caecfb826c7fa31dad60b4c9a33c2809974dc172584cebd1a1447d638acb5da7b366da3a9da2d4f3fc823cc6eaa79a03311f0f19215fd1c3f1dbffcac09dc15d8b827368b4a5b595629017354777bec5bce43eb26a42aac4ac5c380e73a66e906157f04fa0ce87b7b8f9c216940c363e0800d662379f91e4fd335baa585943034a13d465aacc3388892b723eeec470ea1db7fb5ca3ea245ec6f3165b792ed728c2a441c88d2be0db2cddf1ae9e8c5a50032bf7cdca38110271f7fca0d75be38d11ea6b5c446ade1bcd1648f24c60acfc1d32a566784d231c6f77923ebbdfeeaf69c36932a38d322279296f6f46db8fdd39b3efe93022bda0a25bc9f9ed836a860a9cbe86c70fe807de188c1a2b578f7f16211714bcf79d9d8110960e6be4f22b91cce236c717cd0d7d8d76981e59ce6724192b66e5600df587a6a04b6704cc7cc22f5d193c2e2bfa954ffa67e7d6e2870f08f61086643552a084dadad48a0101ab94ee116388ba3c508d1ef5702d9d823bf6889fb0887402b68d9374593a9629ec6b9bf240022770ab786a50ccad3d2857f767c7b69909687e6d9d3bcb8bb2b430c34e0d398d57fa58dca2550a51096c2fed50473aebbf3e0554b917802b7821bedbf8c3edc491546d8161335c7b5428", "97680ec9fc13d186b4ee0abf1c0668ecdd23b0cf5bdef16afb89c4a38f8afa0cc9fdf0b7e4195826ac5e00df57459f918eec242533cacbb80914fa843618d787e95c003b21f01fbf99a4421770d01be336743e0832421eeccb5a4425e33a6969b128dd5246fdb1cba15823b95011841918eb5d014e932037a6bf404a0d848ef84def12761cf516f00bf91c17b1c814fa12dc43a0faacd20cfe49788f4f411d7ba888a02e4ae354ce524672b181dd32c2059684356643b15612ecedafcc1dbd4b53849c0d9cf14381fff32d3eb1e759f7648f1c9a8cc9fc1ac9ebcdb77b353b480cbf259a0b5b70cd9ef4590bb441c7641da1b67b2b3eb54304f9214698853296b3cfed2d0eb03ddfa42aedd8a8248b351db4132d3424a7747a8d20f6880c5e768e666e8c461d967486f56de1195cc7c2285b9b23cca8335cb23c8f44fa9d44acab4f0de3f841ada07552ea8861517d316b850f1b64b0beef8ded4c39d680775666bcd3baabe8e230c586d39ce14094061acda8e9dfe41dc373efa53bab198a48f673b827e06c3c39b0205bdb339e66055b97557ef4d248f92b136eb7ff3afa2faea70445bee82f71235f65055933cb815d61d88a6698e21bd74f6499e8f812b71bdd39d9fc7ae0d31893dd66412a9ada", "9309532a023fa9a6934f813e3fdfd6dfeccc80e8e257d4c5db74f63fed0c47c5fa10f18069d21d5e33833152f361bd26a9453b2700be2a980cffd9ba0f08b29e779d212b48f527ea2ae3a865e4d505f4bb049a629ccd2a344dca6c34250c2ba39843754089f841d4e5572891c3e449833f09229b230c54b8346b5055a65dfa6941e2a624f4e2c232e7b05d1b7bcfd3da6fc3a63820975f19c2d1bfb874ed72949fd1649a2dd778592d6fbd04b5900fae25bf842524f8031ef4cce12a746229fab35ff50d7e5d40acb43ccb4c79358b5c1ce709ed6df58bb160fca2d34091a89b88074fb0d5649aa9382e89fc3e0ea40868cda6e3a4201d943eec90a0f7ed585b3cdd824fe8726df360669261f3951b99043db94c816dfcadaebe1c3ea80d451817133f69a0605ce6159e46353ed5fe0e72680fde2824d31cadb2ee386cde45ad01407e2c7bcc408045a88e6855f3307d18d5a616069d0f164bf9b301e5073db2b588cebbb3a4ea608c7ccd743e30a85a50a2d5ce1cdfbf1a0171525c3ebca94dd889df154fbf245cd00ecb8d55fd6f5c2c58b28ce90b1193af09c2a5f99ac1f6190e0b7126ee77b197c1a098de7839d2", "938be74d606113cfbac239bb700eb664b28eb7e1e8bd33288f315de0d79c40c9868de148a98d48222e4c8785f1d8bd80b4d8086fbba42115bb6832982e0d312995bcbf4c2cd036a620169b66a38e2e0ef95938eae1e33407808fa79f5f8d66afb9d739b37f5d13e7f46e22c939469f1de237c1c51e5eb04249a8ada87532ca5452ed385cf67aa53373a66f2c9451907929b0e3ac7c1accf7b15b90b0f8597cf69c1fb5ed3cb78eebd9ca79d322ece796607278abf02a1fae72b5e8fd8e2c4b22c9c6de14074f6eda1be925f489cf3d014373dd2a4efa38c47f43ab88c5288b23f6d7d4b03a980282935b4d879741249203ae0e8d3b3c7c443ff081a6bbf546e378d36c07f6fa8225808ef99f0ede77e363a0fa8859c4c8e5b0cf060888721630fdc815682a25d2e79050469225d5a75038b09bafb0273b0713dc75c3611bfd46ae1f8260ebdca999e8ba1b70bd49350231826b280e1981fcfd53166fef4db05ab41284ed16587e949676cf4ae7b19e85405c38868781688c172ae0d670fa16dd04817417531e6e92a81c2e1310a82730", "b6405e316c771475eaa5ae92a2bb3560fd9ee052dce6d4f357aa0a6e30490670898b2a607aa777c8aecf4586719e08898348a790401f573af1ea3e8cafc378a2ad58e1d333e308db4ddc6ad5cea193beb6a51474b723fa471a457be6ac9dd87e823b494a39a6c33bf172fc4983648758c2d21aba618b62922c4cb5076367b7770e5b849d60789abc087e5555f90603d348f511c87c568a5a4c87b6462825e350eba8b85c26fab8f119bf3440935dcf3932d697cf6a1e598fcc932d7095df169f09f9de589738ac1e185314c405d760c523b0ffd11c356908f229627ab4b4e6c8f8d275654b414845774f1e945a4677c629cbb4b5aeda44d9133cd7e9f9b92dfa5182e22f3835a4a11e991bb9b11b715d294b8e25fde9c562c7e3e34ca4ab6d1d0e0704fda690f7231b379e429f0338554aae236dc01b81358888b73c2fa1f2a9df9c355d1fea0fb3f804b63ad3213f1642475c2b5d8aaded6bc450007ec81f776658c36dc68e7b9f018e2693a4b7d280", "860efbb69c231dd2f5ed7ab5a56fb3b29e8ef3c2ee6c8810b22ec5e9985015b0379f4a7d94b2482726e4623e8e60932c955508f6dea5a81510b407242a861e831a02bb1b6d061b015a1d77918116ca0bca70ce0ff6b3cd2a1d5dd952d523d6a2afd476b9791807f51e3052c8718e93f39b18129a3c0cff245e56eee7fb8217766e5683b42643c5e07f094daad59904c3082f590c1489765e547463613af9510f1f741400cb9e5b28f0cb5554e472243915dcd64dada5fb7e6a9e76f6191ec4adcd8058727ed3a5594ffd9f453c8061dc3dbbe29270a4f77e3d74e9c211a3d8f0673a7b571254dd3604c9ca10d755be0c6550ff95fd353b1b7602f5f5178d8703efb5db3d5ad4393da18085a70809649042836eff1950c35bffa6d66ca6f212180adcd4fa98017d4820e38ac9d077e41809818289bb66b35a069c6c923cf9de9c5729cbb01bef8bd42f915271cf82b355"],
        ["8311174a4c529057a6370fd21a566fe348637b2dd091c50227b3a0eb4f31cd2d6cef3571af6fd9af8296e0e88c2793c0806d76616a29b93a5b83a60ac09752e644a1bd98dfaab9ad142e33182fd6725e20968e5ee5bd199b805ff96bed3b74038efca24555e3d17aa5d910b338c5a02e4ce9e6e4c1b507411afb62206e673bb3b0b91b55344a11793d51b9e42b6512106780e7ad86fd19a022b9baa785011156f6d93b9d658fd9044acfcaa6c599e581678d970f40d52ba6c2aa030b4ed95b5e3e2ba942609617a19310f91f1382a0741f601acd9fe792c6a46331901b8381dc9a08775c2659a34cffff16e1856af923325140c7ef97c61e7a566b9922bc4b1a3d9700574ba78ad1c5cb7ccecf1abf914d88f3d48b3175648516a423b8de4d5ba6eb81a1640eae9db474a6a49295d7f60df0f1ebc6ecf3d24d306c67e1d313aa8625def403dd3e2bcc4494527ffce53d1f1db9a02e0c26a79185ecc24cec957be047f20aca7935aa7a52c672bd9602e730cb44f7ef0132911bb7217a27495fd6f16e6b15b3cdeef6889289a557c90ac0329c743e104b5a8b2bddf26e989dc2e8f4af16acb696ffb63371fedc793a335a000eb663d774cf14d4530aabbfa47a35c5093920f174e6ea42b44a13e8a160a0592c9ba599d7a91c8e67ec63abfc4ac059e2d6e39e0ebf4fdc6716f5058a1739", "a934f4a0a827a839dc6d5386843a3d70ba646692623a3dd5ac35c3953291528f40532de77df3f30acc7a2d143a4f6a6d894439ef95e37edbbfbe6075a222b0b19caa3e4c2560eb7db145f8b18f9f3b19a4f1d885e577a17e2826ba09a31634af8cada2ebad35c60b0512339bf66dd33669d376a2ea090ccca666ab9ff75fd0a54508aa00dbb7d662876d53dc547a762b079eac5436277161519294ba02cd21b7831ab44fc6e6476e11ba5fe1b15196dc16074e4b680c85fb3c4b8e864e227a935e9f45b8b089c305db9afd617041d4ba2cf368b22e5367e09203a47910f47589ca23729e9c42d3fa9c2815ea9ffb285f31d66298b0efca32a414dbda290212e3c5f98ebcb6ffffa7b8c9887455e110f237f30e876b93ed0122d23d8e7909e413295f216fa12c08dcca1f5f86adfcc4ca3b4b866fadc53136a1a916fc0119b052678f9e540baacfb29a96a2563aa0e6695c4780830a6946e0fcd925d3618ff68d575a160ce911fb4d4234ce4928a2908d65621b19749245368f17a10a1f6777bd854fb359ca4e2dc85a7aceb18a5393ae67e176261339784c1a1739a51e3ca6b3b8d918656a662bd1166036f97520a9d62a799bc5900edcd47c827563f7504ec9dd8ad23ed12becb2aed53376ba2f0fea", "8377dc905337e1c7183dd4aeb97e1bfe9f289b82a396f8e5ce6b08f014eb1f96ac0952dea33eb16f53dc6b161ef1ebe790d6d88e5210ae3e34c79e3a2d73459a959befdd972571ed6d70427c0f830478a04be725a0729767a69e48120ada6fe3ad4712c135504c8274cc74175b29507af92bae5b61b34e3e57dca6507f29b4502fbfbecb98d59025125a7b5947e02748638c6907260af97bbe65b17232fc9bc32550076b99860909a3b46a3caca8d93c0dc46a5df22f707d60e3ba9509974d0a6b0f716c804a9d62d736611578f6000237ce8e329915b3d5ce17b9a39b56a916d573c580be319bf47a3e55a53e18c37f1d3aaed9c5b7ea6d0e24044c19fc1ae7b97ef7f3c8cc59a03ee4c8ce22655d0d617c2e81ae895eb544015f6b2d57aabcd6a650a573c4ad72f168372f93aebaad70e9d6ad2c98f9d064c9cdd24995617f2b8ee6e3313ac562f3b701187cf3e5d307c2195b9a7e514988f579902a58ac196524ee184b559f81479300b7516561404ff0876d2e7dc6f5c42b42755f2505eb21dc44b2479d6611e5021de22449510508cbe790c9e138b349dd4c2a751eeba7ab4725aaa7d1d5309bdc9ae176957cef", "8153fbd2f3639a75077539cb00c3c7b7b8defde5b9c44afa5c01749c72c9c70275cded8a2be4e43c76717f2a243b8fe6844665187321e1335cbc9949a531a3522e69c5fe0fd480c573af2842e4ea1da9c75095e3a5953a79a84dbf334f3c4381a295a5d604eb9f96570c0745aa8161fd965fb85c6abe3ad16f7cc8e194867e59f174569928994e0977a7fc3410761b64113589ee013630519910104ec4b5063c2bce1ba7cf4bc7f33589369a30fc80676607100d4dcbf0bfca08896bce1c08058f03f79319fdf323b331c65673268be96ebb96e450fbcfdf731967d6bb3289046c4705a73d91dc4dee2376f29819401673d8eba244e37c6e63c5889709f3f32bc863c876f15890ddbf484ec62ce4f9043ca17a55dce9b524828ec3b253bdb1a8dfb47618230e4419794723c5b4c0a5e96c23e9e1902aefa4f819b27f1d187059701e651fa9e4e24609ed77069683fd4e231443af49e333d73bb14babc090c818b2b67b2d9ae55eac6273c510fdfbb2ee23e4987e18ea8c1c5bb44aa34e321ea5a0744323df4e8da7aa44c492966f57f1", "8ef68dc7d18418f29ef2c3a8f85ba760961c866d41b3596c5d05c3a503b7379761eacd24c0e0794e84b2be3e15ad3ee5aafff5b36186fa18108e47fcfada5942f8eea103226dc2c160acc9867b5e5e25bef6f2a229f410b6ec41a6749039b0f2a3e1bb5e97d73af1d287080245880c90a87a923bd425b5c7ef9da6aed87a601620b93f3765904d76c54c23ac3ad373360fe4e0e6d89ae17f5e92eb24f1abe951e4c721b3047632bdeebaaa543d7a519c2b361cdca05121fe84bc02a15092e09080f25a9db01054317608a4b49123d604651ae030f0a2c780e436dc43e21d68190741ce03dab0c36b2967fec452d6e8490906778fac2a5e2f863d60b0f9209c2c208f854cd702fc0c60a863b79ebbf0b3509212deadbb290e0e06f3875a4e951fda80febe47820680881db77f1be6fee91d2a18f37edf1707d4c58d865aea6cbf66959eb5d2c48a3af02d5e8ab93be55e68978059fd5feb4f305005d32e15759528911d3e82ed9eb903835fde5946f76e", "a10345f7a7106da20b79c0d1aef6d1ad2c77b469173f9c68def45c9df329150968a1e8e61ef36620caf8922b7722b626b76d0eae19bb2e634c14bfb5134a250b5804c5d7132d4d075bcdb036dc4f2747de1c6355b981cc967331be8e183b151ab889f58798b2ada3b083d66838909d8ad54ca851d10aa92d17ee7cb9cf47a720da361392721b2db243a08fbc95f61ac71f0253088a40ba4ddf88ee90ec249179e9de421f15eb94deda0a859795b0550e09be1b1ef14da918ff6fa236ebf6d50bfd516aec4926b6b0d2acc8610da9bb2513bfb0ba76be916ed16dc1757c5ec613b441a91665947efb24e3175e4752b04c6334c6c5a71ee3b88c25414820d14c21fa047195204cc947665f819a2a6af8674a41ea838b9d50b1a13f30fc55a13da41c45dda801a5367099cc1488e131a9d32a3fb107c4c141ec190249365dd4b11e9f6b5cefc9881b8978295d021e065130"],
        ["a3491c4885b650a0768c720d62c3f0a8abec83ba9e31f16a61df27656101a1e272f04680799286da1ea99fbe3db8c806a99cb20ba5876049f1cffe2fe83a8d10df9885a89bf46604ab024467f88648082762a1d1f270d39b438d17f77df0162b8084d26c27232db186d2c116960c452c8bca70c8545b6d58456186421a48f6289aa39e3c32b6b83094d422514103c02e181a31dc3765a10db3b3a12819d48a64321fc1ef7ea1a64df789d44cf90249aa6ebca5b7a5f309cc89152c6108ebde2fe354244b60d891404fabc621f6b8d03b4b8ca9f2f46fc7108a7ca3c88a7b530741f7fc1b606075a4598dd74a7c78ee031c80fd2bd51d38d944f678c8e6fd81e81a31f6eab4c2ec005616c84cb95072a041a9e6ddc4cf2df338f202c41327155c4691dbb9344b409696ff21378185c1bb405e867977157d87000635481cf9e15cae044f7ba872d0be18ec0da5384787aa048394bf2879a2d822e93862f9a821e88663b13629bd48f3e37de9427b1623964fc0f1776f7f42fc5a58b4969de745e7a4789a018660e8ca4988238f9da576566ba2f3ec100236d875d3cbaf5d3bcc1d929420d3c1cfd8295431e826eab7c7f841d34e2990c478d96cf4a8575d9840a71ac76835e07ded2c662ddcfc6a92f2cd3fd48345e983bde444978b0796cfa0887f25237e6f2b9093a4830bce3f1a4d3d", "ae56181eb1c10e034f3f31f198714560d9b516445b58ecb2c6829c82c16be1ba1f1154bb71485a6e46b872e15ce4d90485be9b38b89092e019dbc9d60e411534b93835cfbffe72ddb8428db0af565acb07c6f8a705363733615af332bfd00535a7db81c13828d939ce271669e3426fe9b8fb8fb36fafe4fc72d723d3d6fbdc471f7878ca8b14934d99c180331315ba696ca7f1d2c7e4e35ad0969214ccb43187e9532732b0092b4d7685be42ee14fe9a3944dfecf49146d370c8c5325e2f57ebea7a220b27deed67fd9ce0b3fde08b0949682b3f9d5c23d6e760627ce4798dd25ec8eb6651d21ffd50f8d10556181a23240de81cf759cb3508cc36456e983eeaad0c56bbedde7a09da133406bb7ff4c00895779c443c9ead29648e9a6ecb9600b1c137f40ecb5ebe91a2b07a1b5855295720b26715b55861aa9ab8a2491a3cc79ce447352ca1f5da9a312b0cf2e6a48c2164eafba42653a7738680c7c670096943e02b0ff8c4f1d364e321346ce5c62e089a2f8c73cdabe46972a5f2bb269ebf4226ad12cc81d63e98712d428829c91c4dd8c053c188bec31bf994cbeece9935781a7dd93ef31295074713d6c2c593464dc3ac6c486508de06c2b52ab31b187b013b316ae1830da9e377aba6ba65f978", "8772f4621636b0d56c080edcd53c2a46527bc67986292981fb97b26847eb14dd1a8cdcbc072bcaac73e7078a19311c17801d5886d07d299c190e8fd93bb942064f909735274b51320225120c8fd1e94cea83c487a4ea43a124c479b5fe9e7fcea177fe75e816fa59b9d2aa340ca832e88add01cfd3a58d09306f7bc6ad106bd93631523b7ae6dd819b39ed50a49e529f1cd50e675ea57dd341d755bb1c0ec33252bb185bd3459bb2a0aed19018e4dd914a9c2850cc3a738643c53f736aa0198f68456485d4dcedff2433e94cd428bf455318b30f0592602924d18de25e9e90d9fcb1d8950a1afe50b45f1d1d72780a800904c0bf03ac788fdbd0fe966b833162328f23dd870bcda1880ed91b88314b6807382468faff8494b088f096b72bcdf71fe2d0c90b0f723b3120387421254ae2723639a8fd342bcdedaaab4e2825892b5063b8307c479e6fe4e604bd121163111380b5946b81b01a9c59f68628eead04657bb42fe1c3834b54f0b179befa7bb05f165e2a7983e413edf232366b533c230b9aaa187b3fddc514280c389b76d8a73d5f3d8395091107f526ad8a1639ecc5b3c9505a3a1c8686d8e07e704ae08b1b", "aeb8c0c4fc0afe3cfcf9502d27491799a4a3c77c9bb8df4e2379e136039486109f2f73d09035d1bacfafb0c5f54abad9b754c8f12d4c91c8d815dfe988a612545ee6fefee27de952fd5650ef985b846ea8702b57e75a884dafeae7527fe4a91d975993f7fbf2d2cc9024c6f2912230a497781990f7cd8c0b836c1ef2c3ed37490f30bc641eb421b812de8468618dae0f55802c2bc4c9f3e756ae250cd5f132ea6308087ace2f26625f46300bbe6ee3d824ff187adf81fb7abcf5f6eb12ae9403f4372fd3cb332721af85cd19fd45fc1d4ca524a9a828d0a7e4b798908083c26c102e084f45f71e1ccafcbfd9dce330e83b787d42cd8bbb175a6c7c66c1152bbcd13991f69acd4bf015eb4ca11a3101531fc53d8ad41a3fab3dfdce53bec71fa1834ea61483ff0c4f1de8c6dd16f8c3086e7996695d9fe4437b207cdccd37741fdda1722565801eb09ce6f92a40b87f586295b4a7cb1f09e89b78c1d8206e0aa1b60a6fc73148d6346dba000afb87741c61fd84d4c3a66a4de7794a2f9e9487fbfd0dc2b969555798980e9a617db5ab36", "8fee0bcb301ac6f149f75dde78c12da2206dd82af19e54cf3c8dab870f8140b3e3bd971b929b7b6220535b451652086a82365601d71274f407108f0e3311f8400a4460b38fa97a9b889d8f7e245e01bc769354631ed177403b0d05df0127e2ac8e6f9abdf4e78138a989d533f148bce9a324cc608a79db8c1ac74160f481ab17c0f9061bc124453dc86dfe62991821c005c824b5c9f1b8ef4e71ff894ddabaa8394ddcd5abea9e5b0a5c7d191610c2a92ccff4a089082bc295682df31963af6a07b89a97e58eef4c7299915e21f7cd67119e26a10081f322f61d71692ed33591c6b72ebbb25890a52869c84429a0969f56268fd48fa3c4ddb85476f961c502dd2c940444e454828294784885e954370358e245404acca5f33fa4f59172623d948a977d1ae59ad4b56af28ae5ece753931dab4e9c51ebe4c63baeb855a2cabf58f82d65ed72d2210772f6d04d52f9ff2d421b8d53d6551deea76932f5e1694899196b45feeba7a39987adba2a8ddca143", "8e4ee1c3b444d66618a9ce85c49a63a61086726998a510e4c400c05922eca951dc4ff71bea055fa3fded40eb41d635209741174ee7197cbef9dc74295626fb84d8c0ab4777c2a6e65e27fc5a3cda0fc20147e3069b1a6eebf8fa759985ce19f9af271e24c533861de3848146920027c2ef8d8d7e3fe0f46688982cb60fe6db81ad9e5c51680f8700d3464ae8ecb639a907b7af579292cf0df458eb3845c866da339f37bf1a544561977c9f95660fc3f8174c97da28f4d7418c0a6fdfa77bf6754a7d044bd4b2d7d3ccaf27b7a912fd515f4db20004f708d37ba7fdec7dd329760d0a7d0e117282539162b5554b9f39fd42bc0562aa7bda8870a25c6894c2d9abf041529fef51a6bfc865107604ea20e30a8cc23abca3bcbb57cef73b458b544616f0b80ffb6b7c07ca6a6374ff1c0b7d6df36333eb33d0d8ffc5d45ba6b80a2e2e86ba12a172878240a50b47dbd8bed1"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
