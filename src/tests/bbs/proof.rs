use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::bls12_381::{
            Message,
            ProofMessage,
            PublicKey,
            SecretKey,
            Signature,
        },
        core::{
            generator::Generators,
            proof::Proof,
            types::{Challenge, FiatShamirProof},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            &mut rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        &messages,
    )
    .expect("signing failed");
    assert_eq!(
        signature
            .verify(&key_pair.public_key, header, &generators, &messages)
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["afcdfcce59bef91fb6b16b3175d8a7854700d03499a8a7dbeb3ef81a076697c61be26252cca76afb14205509c856acaab80bd4bbcf992fe4e1c4de146168c758bb6b1dfd297973cbddf8ddb8965f2df1e925b73186e278b0019d683285546491aa9af5c2c97794449910a77af5f59d90be25c7d3e3dca41929a2e98f4405639beea78f50c3a3f67c68ad526a192cfed22fbdd2e766ccaaf1ae172d152671931631c148a8d06aedc369c5b6b5ec58f8f61686a9bb22bb9becf4f05bf0753aee745a3bec84081c115083282d63cc20d46738cb7685e2d191f34f2461812306e83ecd022010d6fcf434ae614dc8ed723bcd5d5cf24fe5181615607791e2565e72ed24c3c1b5f259f62257a23d0da79b29f41dd6de058bd838d8685966d9edfe7102c36b31b76ef4119e8aff5480e267862f2636e5733f930e17c9f1f7e6d4b966d481bbe832a0d3d22072bd33f3162625c8638794f73a93d2e712784cded4f86b4dc277aaae9ad3737d66e20531f1a788323909c737019d23816944630b79670141eb0cb3095ddeed9ac5d2d052a82d0bd6423ef4f617f94feb644050530cea6be574859419a04586b717fd0e4800bd183027cc95def35e32be00a9212e0094212ae5946bd16c9dc2c87ec4bb32631e08374588b5cd4e28c831b57e448f241cb1b023aa2867258aeb7e8ecf79279a0391d4", "8d45cd4cb0a568361b0f22b241c8e3ca35808f2ae978986483bf5fcbbc2acf48b2bd53dc35bad8af352245e3004df56592fc92284dbe690326914005d6af48154652fd898fa65215ac4fc1ef5dea73ef34f60d5f2c8deae0c3320f8590453d25b1c2184472983caf20fe7e0653352fe5925dec9fd22f3316ebe2316ceaf6233848e0bd6f531a10312ded602633b24e696397d016adf0eaae3397bee62411604708e4163aee5c3b89a9a859664f81f9c769d5d42e235fcf6df055742a4225c94d3418e28653055739ae33b010b6438f4138bdb5c68b0d6f95b576ea0d80516f83eceb1df5ace35ac17774d7b8276990071285b8f83be43c75d43f116ee57f9dd4235a44ff3a2bd9ba177164017b64369e4884b9ad4631fb588bede86c41f94cf00ec934ccd8682571965604a6ea27c9a52f96d9b510b1a37a884d5919fd0a3e5cff973c6973566c44a6cc1dff3185bb8b4b50750a341738ed3af1d49e80663a494cd6355f3885d78bd15a4206d73ab9e60f4b7a5fe5be35594fe37fdce87bd9165e7738f1b8fc43b7d173cb0e4f47fc1513750bffb7d71eca16260195dea889d7cc39395672cea3cac73fe7da8e67ddb8500dd1779489e9cc6a6fda6b60bfca2d139075addf86c1790326d6d2bfc97569", "86cb99e5174e61be21dd377484608c84964a73a8ac37d00eb186c7084da019a4d95dff70e3e8c8c6c007657aa8d39eb7ac822bceb468ae75409ffaf0a407454652f4a794ec464453e0f0789cc0a69040268d292b14a7ba30dcbd5b05b67eadf58579be33e3fa70d19a167eaf52fe586b6ec85b1d90687da82b98a2ee69e6e82f774235513ac635526cdcaa63eb9a84310255f948548c6716a30756366fbc8b9d82ae3e2e526157edd359d768f1c64e7b66c9d92627df26b7b5b15976410e305639d3d6781e97213f77db176966d1efb66e59bdcb811f1926ea42e33baeaf29beb550dfefb9743c2afc56f7f1dd47fa184526460360f79919c35ba29145d0bfeec6c0a3b92b53f6c77b19e45b94b3886c03d8b270ea98366eab9517193b0ac583ec34a27bd1e26cb4d28fdfdf3037cdda38c53053b6e3e88bbac8adddf732f941d31f6cda82572be0ec339d33a93f7853513c89e9b98a791c792ac96e2321744b3866146c0d620a59bff3f4ee584342695da1e0134ef5960c14e24ba5cc076323e5c65190927de345446b1bd3d636f5431526eed03a9dc2b398fb85d0affac96ba7b650e2223c477f4a254afe5bcc5cb2", "b305a3543d6e576e81a2138033c7dd47aa26e0577cd1e897cd175b172aca26d4f2f9f28f2978971c5d8120ac67b346ffb1c2c12331f0c0744e63c965c0cfa21f2d63f6acf4c5feb274b5040943e5ef743a63a6e51c0ebf40268c757bb0e1d44696bd051aff4bfd5f9a0f3e19fbf96edd930f6fe5f7c00631d8bf16529a7e43e37e0efe7af8d8c1fee1d82751212f1386503bf7235cfe7a06cf8c6e439a9221314dd6a1c5511532d68b8dc7c0bb7d90023cf791d4a57c0c5e339c85f390d42112349ce02c36ceea33fc7c761c19b97eb831f03c5a2ac71d1c2ff16195c8741172c1340825c806b88af6e85959b2d829ff7035ee757509ebe4c67e16fa7e4529002b6b114cc67c2508a2abd69c658fd2cf4d1d0439670efa6eb9baec18db1951f6c1ca2db2b23cae3bcb3e3080b0b3c0d170caf65fe1b24fc622feca084727517476bd865d3757f89273c181064506480b2745fc05fc855ebdc8b4e77219113c1afa129e16a9816d536f239c562948084b3aef2242cd84db72046777adacb85141b0b076d1edf512edc4bf4299fb971813", "873fea54abde813a38c97c070b6735b6afe91c62058e2c9a37fd77c15324bb52cc40499cb7a4db780d1534c60c328f06b16568c33c0c93d452769b0f92675a5f315609f306ee5330b40c4aa16841935db4a87f6ebc1714d0d4956863517a1161ad3487a70330a5e9645b370f66ee30cf615fc0971aec6a22bff93f7e5194e2891d5edd2fad07fe35ee3df9dd8d0d8e3324b0e8e10744861c0c4cf530d0105876bb63525a16cf7e996bf9443eab4a6f3b5409caaab67c8b477abe57e3e8371473b3628b84f95f93a0c35d7c828431de3360347357d9323df68776ae803b19f200609764cdbc5c51b5a466b7e944f5d43919a576b5d91576dab958682ae4fff0f0d2dc1fd91a6c48a0029045805336b7056aa4f02da1cd9dd088fda678436634b3124d1d344c94e9850964a9cadc0d506846fd95e5d821c7b41ceb154fff51929557e9befbd2b7b51fccc06970e4e45d0224351a184f3dfab606d1efe38f4d5705a0d4a4cffd26f7d955b9d036fbd8d2ae", "87f9c6026a5e4e6929f20208b4df6cd3465c928433390f1a5cbd33e7bd52471291f4f4af9fdb78aa4c3dfa028184452997ae605c117a7f2a751e739792065b8fccccbf2e75fb412120aca94e5391ffb7a73eae9ec26107af5bc9e72ab8d24a278df918c0bbbde130b052575acb850233d8bfeee187fba26ef67d004d21db6ee2778e0922551eae8ac3c1e0e08c0078bd2285a7397532300e875b6c9f64cee9e7c42297444d7589d37b001653364128191335fbb24c5c7953ed18bcc7d1c19a761a4c54207afd60a8a2f5935d78472ce15dbc1e3e77e18aba8dfe85677432b6ad50cc9a51e21f22bb59c05853195f94c921aae6fa0a45da51d0909f09ab5671bb94de592a9ab9a96d70bf699403431f691ac3a036dbff2fad1b31eef28e0765296fd9c4f94d2d491c2b96d455c6263953455244175f37137725bb2d3c07144a254d7a76429df093bd196a8b50b5df036a"],
        ["b380236b5db43bd8c67d59adaef544fad55cb4500efeea59a580fd09bfead209bbcb2ecca8d613e143a716c060da45008d4517c1bbe9453ad7c319a2607859162f71804d0526bdaa6ec2ff041e12535152b01757f6a249d3074e8c947fb8e7a48fe115fed1ebdee56ebdcbce1860c4d273382d223879ac30e19d08ac4eab7080036593de7fec0a3b2d771d7527d81dd834667124aabe37deadcf1f1175c245c9673c7696361b8b980a3cc2b3542354ec70169008cc86e71f1ef396bc4e5c3f9045911e37019ae5b02d3f6350172b558140df82d21a7a38744194a406febf4a88fc9172709356b713439facbd7f7156885ba0c692d3c0b1152f3f9ebd04938e7bfedd5951038a5301ee98f592cf562ab77091e1f6bc587a33f91494a7153a0b00255bf4c7ea1d94ab19a98fbb9cbf2ac8318d136869df594280e5d258136369bd0c7f57bb8a74daf99bb3a901da82fd671096d20a483a52f692b4473cab81b6051e8ff9af94d504d5f00709212c1a606f370423e7d47c41d140cc227c2f83875bbc527fbe9b3de8b64558adee5b4fede3176d913a2e693e6f02fb134e69fbeb9a6cc8f6a8e3c289a081bd692fb1cb2d95661f11f92f600a41b8dc29942991f71b259cbe41229a492a347aedd70a65392f1324f988e359f5dbc6401d125a66e526eb9fd3c800193b2e87c5be93f69e4bf9", "b53f8a3d0a33a5349ca475cfb5df1e4fd2333219ca04fdc1e05a506d2aaa12deb4d788ef7a7dc9a3740401a127a079f9b878e1ba3aa7d2afebf1fdebb80c818ba28bc4938cf1d339afaefa09e9e74cb672aee0959416dd03fde8d859c2223509b8852d393a3744cf5b29731b1aa36b6924ad91217b6b32e95614dbb2911a2c6fc42444bf519791efb58d5d91aab73ced425064b1a134028252f0b8ee6bbc8289533bee15366aeebdd0be294f135f375404381230fb860455e5f12b54a49785010ac1f4eaac5048a29de5ab1c17ac7a0f73bac1e7796ed30aa9429955676bbeefde4574d7dd00028816b56384ec972eb4392151bc9f71a34df325dc51c97e787979106c7ee88c7538c1be01d51775773a08b194e65653d76779bfea0ae0da3ac3569cd1c5736dcf2882f627aa47fb1b054d85e1af4e645509f2f676a38667ca66c308bfe1a2c518a1d9cfcde28fe896b75e02ff4f441dda0c11a6fe72b6cfa77c1b45053516ff70dd2493c5a9486050e819a75ddd7bf39c612f2b960d57038748829b0ba3f30f4d2c750f9c5ae44f993f591047ba8dfa92e6c8e67f1ec499c91133640b6f19ccf22c1f130bc1fd01a6f81a282f5f24d0775983f092c386192dae93c743c698d9eeec30144e4f5d8338f7", "961d25508956749ce41973ea7cbb4295c9491c43a8794d7ed71fab32217daa61755329da247f396bb52b9cd17d5c12c68002f2544dce431ae9ac78f0da470af89bafb27c63abc3d61d194c2c62b3d0777936dce35f6a5a4467dbc78a5ac8c13ab23581d40513b3d35d7e6888456982e416d8dc1715dc50564f299f226369d4c4783cea81261c521e0b9fc59f3abd44cb512c2ea2c8d22ff230d125275db33a6deaaebb084f96d122b1b22482ac83cee00dc0a4246ee9ddde01b4c147052570dc45aac0be07928b6b9bce64e31d0aa3091cfb9b0cc4bad38771104fc4d8eb7ec4427bfcd089b4ea5b7fef76f201ce137a3fb7f658c641e345095e8aeec3339176d2009dd0cbacb744d5b135ae4c2f11d1427f745ca8f341d9885c6bd18f431bcb44dc6e4df9263c79de56114359274f532276d644834d1fdcd9b9fec4556f46c6b39175f25c3641d0755e009a8b66da193a303376901f5e918c4cc10882b4a854de381994312ecf37fcd8dc1e819500ef20877e685c0ce9174ed744f3bd4a69f6568e81ea43810461a7e9e8c893d592130d7c320f9632414a5033cf9d22f740758ad35cf3cf51e095fe948e1ceb8c3e25", "abddd7438df67b410c50d09a1deac45dce9803e7126a278e6b4a1e523c429832fa443bf5b0c14ebb63b9cdc97961ce8ca47f2e675e2f8d2b861c2e26b6873fe9b7e6bdfbc88e68fa28483c08ab813cdb1bc9aa0b6c1277d8cc46d95f68415e7980c581f2dde25c1a365163868c44fd7fecd78bab5e096eed051a070dd72d74df5450be3f41da3547a6dd170281f7cf7245a7cfbdd110310ee830c9349e92e5475daf7aa7554db735af13c3ff14d2cb1353bc0b44fc6d333922571ec515a670f6c831bab85c1a30fe42c02ecc5eb5cf18024a5973feb26cd425812dc676b8c932b305efedd33b219c67458ed35526a7f949808b7a509f38964307eef2c54320695f5856f8fb8d07d5b9493c6deda860191bf6a803dab8ffb37b6d42da2e2dbed6ed93123525ec27318711f43c9682c0ad4056514bc51f96a90057fdd7a306f4162b4adafcec905a4dafff0dbc91cc14f62531293fc6afef9d9c8476c6f3ebbede35157ef9c54865ecab62da7a33673ea84a199d088c4fe5c1f1c809ec6e0e9ecaed968f96f0cd173ac993c4096ac24c75", "94853156ca1e7e60295a211ffc833a4038cc8cf11a4f71e40fa736489e95c4387d76b75f8ad131eeef7ab2ed91014efd8f537708464dc2642ed126189184be44e652c7e5f262abf2402ac1e604b8fc9e6dc79f0da2cf747c3db6592ae07d9be49004c577bb382fd76bc8e2e2a377f4a183b941e99b919882faaba738e3acf749ad13683b1dea150f4145503d591e56aa31c35503364fd7a1f2f42f65180f3fb65cb4b3d22bb3e399580918d67499eb9d6aee849c2e3be3db8d910c3d32027b682c98a32c406de7e3b95457c0e25d00d441326fbb610c2cb394489be8f975eb88937990f53ef9ec6f181ad8dcfaf264864a11ac107102f20e2b41c832d1650845a958230349b2d592c0b414fbb08205854646a1a858e4a19da7ed90fcd88c87eb970bcfc40aebe7ee18430af4cdfef90b4c0729e35f6bc3491152ef2b0c759089023bf432416fe926bbef9339951fd90f34a4b821c3aa8a04cb8043174d111c01017b2f38afd7d02e6b81bf74277269ad", "81d9b3aa2967ed8f69226f2a9bd8b10afab91c66d7732d202a778f4f4f73fe05704ff2f3d9caa98e20f631bcc582ed218b88a51f3c68540f184d1b70c71e517f8e7922524e53cf9d270b60924a523f17b4ce04ef084017befcde736371fe224ab1d96e7916f8daf2ab9adfb8115b8b16eb8f63c6d9a1dee95d3131dc8bf5f27a343c7c5d1cb984a9e3d6063f7c719a515e91d9b0a292010f3c8c6d26fb5dc0e920b73fed41c1862f541550b76f63a6487374e5da85d270e934bf8fd736bd36f01d3873dfa3cf5d2cf092af8d083099224a66584d1d609e4ca6b32aea582643b211f5b6b126d4f5a822cc3ca8c4f7376a6b15689a3e0cc06cae40030b01f0405069486dac1af93231df7593a4894619d66490dccbaf27d50a38a5cf98959c0905540084b26967ae63ed9d34b30b57f59764c72fdd26f9809ea98f967351d2f9bafc946d68ec8d2162bc8e7b0150bc032a"],
        ["a0d57dcb01d53c258a5e708049b5eefbf8b9f3033c71fc356622d355b3c10d0959fa417bc76ee1e72e1e07dec95fdb61b6df7227d210376d9f1fa28ce9753255b6205456277c60566807e1bc90a0f64de6caea092fe7cb75c7a7740830ab345ab79bb3d27630a24069d67a8d809ca9c57f4e1c71c7895e91b591ffa93d63ef55a8aa33b8d801c632e047d5943bd471d768d36ae7d61aa00b9c3b2d6f3ef5785eb7f42d195bf2435be288ea53eb59a8c457f5e272fceec847ee728b6373383e46922ab8e8adef34ccf89cdbf79b0b441f32a5af866e3798865e237900d0b6e30df0dcb46b158472fa618a436abb7a3cf7396e5a578796946cc5f1424836b854554806515645318c3e7576da2e2ad10fba367c56efcee33762f57c05039dcc83439fe905e606a5effa8658bbd5fdae0d326d25a8a4d5226539a02a5a0fc76d93ca44967d36ede8a1ff32ab58f865f8f27d538c9dd25172c62cdd58e6e029591658e6085869ec14b0a0b05e0abe174985ec5f89bc4a58dc689dec5fe115b3b7a8a0be2bee1eaf6b32cdfedb188c4bf4f7b75231812fee628e3f9a8de7de451a287c444efd7d44bc180bef7d7ac69dba1ab251a54788d37977f412568468ffd366fd15cedd7e3e03ed37a5007b23700ba151184ee90bfe6ac7786b4988d4e412a476201cdf3712ea5685e83904a4d430088c", "827687ad8c4eb341db3b9132a0f9fbde3b50b0552bd75a769100bc0e975ce05ae134da1c57dcf75517fa3d8b8362b182b7bbd13ea85f4a90284caa26afc2c63ac8cb7f2c713148aef28c97bc5d56b95936b52f07846ceefc58d552f2502a458e90931d448aed173839d7e09f7a8fa681ab5b3e91dafb40ee9ec58ef25dc50b6bc3413cb3998e245dfdbb45bddbd2fd2023047cb92d8bdd6c56aed574c47f15244af8ba8b0bedb5e9f7317cf0b2a9091745464ee2e0076afcad8eba848d342a5c01c27a76ccff5a6109dd851523dde0ee2725608adf01271b0105629285a6191a7ba159d4af2351c32242193017bb37cc3a69a5929f4601739745bc65ed0b0a971921e98ade27fe8e150c52c59fff40f816ee059838929d82723990c812f442db1bba4b3b2be6d2aa48447150dc41217d5d8698c6ca54e23a339541e385034232f5dde077cd4565ea018bd2d3b6e7b5f3050b97bced952fea68a9f641b6c0e817acfb748917eaa64b5705a5a5a3ee38701c5b885de0ca30a236e13e8c5caff40fed95fd13c3b291a3e055a6eb02fe37562fc837254ae1f515a72cd18c8e59771599ea27a8a64b1435fb7604d4a656915d315556c2c17dea15ca2c552280b547a7382d9d59936aadd18db29259189cdb15", "a67626c5d6a6e414260f3869dec403d4c1dc9c84cf3a2fd4e9c1642d4a7d3ad4b7f22632196a9f70624153a088eea2618cd90a88730c889a2a3d9c0b1b0fe22090fd0ee64d42122dfe6250ab80e04a43b73ad0fd47d820dfe9c115a30082c1118b2c5f00bc31e207c7356788efaad926ad20645f67566b8305717341d3a7332c4f2ba12437343727447cb16f048d749a2e8729b42408334b54eb38ad514d301131a56b30141c87610523f5ed82c505655bd2eacf88d336f29e53735803ceced1c68135b8af1f7e29c88c1c8b2c6c9560446f090debffbbc2041e029cda72d8c5f084b993209c80d669cbe217862b9bbb685e16bfcab0dbd96288e1455b98068266916e6c17edc40eae5a46eac9e98e6c5403fd3a381389c6ed33f929418421c3a72b1b62ee057a86f2f55c68d2e4b73f07cd75757b39b12cd085bf4f85598a91480929bbce33fcc9d0382210722a75ff1fc7842ed82b4b65bca3f959bdf5a081ce6c287e92ea3833fbc530f2bbd293a464b616f3aab0c000b23a8794f1d4cb49900b0ad611e8e2f176a93f5fabcf6daf658e9bdc41ab20c75327bf7baf71d50bbee98e67dd0c0d18a406878c47c1611f", "a8d966e1b3187dc2c552fbd16dfb247a49eff35a4fceefee1796e2ad8192e3016043399e113ad0db001390d2201a017d8d8dc6cd1c4a7701c3ce19cd9e5dfcd8e7c491398ef29cc87a07048c744727c06342951a5c2094fea94982326908c9af9186a2c85cdc5f8bc87e75a4c17d73f034d42057887b2f0667d25308168e5a3535be0471a6bcc0315fdc6e47996f7e425088ab6794812669c2d7d3c74509e110c1003bf0ef66aa9ea4daaa51a27642d24f93960439a08eb923bd552f7f34cd23c2b36bab7a356cf3eb4271f3a435cd67680f17a9683653649a53b56f0204a1dcf39dbee8921514f22bb6b9a6d50c1529219bcaec83ef7038ea257a1c1b23fc4fc2c211496650ba675c125ab27dbe1a49702f3da30782bff96f5e60d660bfc50fd9bd8087b8875af34f20427d041daec555196b14e8e519078b8630792416a7d455dfed5c1f50697eeec84ec41980881d0f6a37c7aa27b2708d9f7db63d0bd0b17193ec1a59856e5777bd249bff9d680350b889a7d07b042c6b3926e7f8601195c32410922370d3a8f0ff51341a8a8926", "81681f8d2275d105bb4fa7c4f2463f436ff976135a555d154d514f751129d6076e73c0e401851530d419118465cfb0948893c4ea4d0bdd5b8b99cf811d88a578b487315765a0aba94f246e5c528790cd465ee6e35e5dd766e6cadbca389d1c9082ad770d7c75be63bbafe12e37d8543240d15c601e9f7f343cf2f9e4692abd5d6ced0ba24d65c2a247c57171c13b3738116efb0ef203d4ddb5d434fd33845d4d0a6849d06e62dbfb8d02f76db8494e6b35aa0fadb8f6b1e3177a1b952fcd6bce079d6a6fa0aa4e12de6fb1e3cf1133085a4188b82256ddb0f567c17f85030d35914c428b2af5d76d733e1dd4ca936a0f6a51189f6a4e319eb909a66702346f3c031c225bea3b930f319e3bdc088890fc17d323d78012bf9f1c42ce30d9a39073d2ffec63803a0e5b4b5298393eaa3dac28083bfc53f84b5612046b428c95db1b15267acb83ffdc830f400a283b0032082de6301f4e98bd51f5d86ae7a5e00b43b93398ca3e4cee9ab2afd8cc668f6f93", "961137cb999e3d61fddcd9b7c2c3d42f46d68376054ee8c0e705b2c267359c8cc55d187e34ab41af2069be3e154cda658aaafad60ac2dc931aaf4f8c9eb84a3608444fed28dc5805f81c4dcb7c96db56238ab4ad687ee1f487d49753dc4944bfa5872cb392d9adfbb7e354a308c9b511e6cb58fe3a4da504626dd93050ed0af384197616e6d496b0ff5db29b5058c94628c003d36fd5d19cbff27e03d033e330f9b83c616d4399bd40d8734a5807e133282a6154c49e809d881b1efaa87ac9e1c3a8c01f02a7e994d053ea8fabcc5e252146fc94f56f785c1e831a560411bdea0d99efbc2677ba7f874c0af96df6e565633aa1d58e52f5be6fdc21537f8e2ed16ccf9e4d36dde33e1edd496a95bd971b0678a1e50f47e4fe77e0740de14becebd4ecca597b8e88dcb76f0a221361088153728254f6fbb6e2b8ffa7f7f61a88481f4cf0cfd9eefb5353ba98261378bc81"],
        ["84c850cc4a5646ad49f52cebf574dd4b24a480e27231b9d84aaee784039385cafe563d6cd9a56d5c2f116a308d21d0b0ae14baef6f92b9634e75dadadf7f0433d2c967826af7351d05ab38bdf54c092957214141cb85a5ab9546c5b789158367845f66b4b5d12f43754dc3c336fef921cb680c08c230201be52c57b16c4a8894e7f3dcf61690e825d234f442fe68d69a38aabdb4e8260c2f8b5ca04575184d290eeb147dfb6884b234d1b1c09f9107772e8d6694ccb6746b750fcaf86bc344279b2097de5b50ee02ace8e5b4c79479f5561a6f666201d305d3404842ed332deee3614b6d091ed9506a3ed81f43b47eac2152ebd3a7738f7982dd40cf9ce7f6db95696762921eb3ffea5f3bfd513657ca2f120e2a213ea9cc2a42b407ce772d3e400e36199a363cf028aac20af6960958377f29b6812cc9177d097de2e12de68ba194542b743967d0953d9762bfe275a4365705d2b31642ba635b0934f0256e64fa5242674660559579b98b514cfef5df40e2fb1aeed01a8c36bc69d8bf784fd66cb3124be4a706a65381060832ca87b36697b0f40b39fbd278f2fb282f95b990e7c1e9337fdba678587145b376aaa4bc6742c25695380c7228251b4062ecbf3575133c43933419e3397081bfc2238da1652b99a24b0577d92dd45954d8fb77f48a67b09a221bf5514cf1d0089934fee2", "b8b38c6feae4b82d97325a1c5bee703376f185e60d960554d161dda2aa8007169d4e3cf23dae5010659822afcd3d7ef6afa33b02e7ca15470d4b16346fb50046dc48e8f597d778b6aeb3e33329661b887adcc74abae93cab9de87700542e4a628395dca05f5673380342a2799021c6a5da8240773ab54b95906cfd93898c1d00b159b1c6c64f1b7a978617c4498c6919727769b75f5c1fa530db93f39ace2986b05bbb6b25332beca1a7c8e5cbfecaba729245370c2c75907ec7788ac103ea785102bf512df52d18c5ce773064681c7364c3ff000dfaddee2f821ad8e3f6db29ac9de91008da1ff2da4d2b22821422172902b7ce4970731dd06b155c233a3937c56923ee15074f57a34320c436c7313366dc0de4c75dc1ef116a25f6ae105e6674d4fe4b0540ce23698e8a7bc08c3f7d4f9f6806ee048f044c7d02175f432e55ffb1ae91da5ebcf3cd1700e9536edd606621e7aa5c30a68fda060991124762d998d83ba176169328ee51eabead179490224b04552afede17fc5e242d9b4bd6cee08bd05d0cfde2e354e563b0632546a835a8e33847a1191a5861aaa03c1aecefd3bc37e52768b9de4c5a467a53ad3cea356581126e817158488548f85cc81063fdd33a5336366a649b40c965df2ed0c3", "8e15915e4dafad102c503e05477b040a14232ec307345f68cb7a7b5cde9110f9f2448f8c35214f33371bc1a434bb77dc88fb7cb21f9a03d5f7d92147dd62c994c2febd17acaa7ff7cf9691576a6fca49d0cf9096f366f11987d2bcc6408be7a5850fb4bf6324895dc3096e31bb6248fd3a65317099496978c8666c287283db5dd15597e572be865e92cd0a0c20467c7a4f037e70e95fe2b30b6eb00fe0860ba7c8fbaa62efdfbf7b74bb2ff123338187680ae5e8cb1293872ede046a4428e809a8d94193106a517271c048d1c2a227d111e901443df2f4670992e8f5d57914b5d5d03b05a8ce49444c3fb09984c440fb29dae84b1b6085d1d01bdc2788ecbaf0c2dfa6d76d9971c3454f113172dbf1540d8515323d4a02d6123b49eeb26c1cbcea1c26ff1c0c4dbdfabf504745d48b8030ed551ed10b2bb664cf7d4265dcb408866adb5af1934874159863ac4efa5555507f5bb11cc0f3202157f373af72005ab96ea17345136528896cf58049d2eaa10ee0814c969d6dffa50e0e3b770ed32fc257b6d4add064dd239899c28a66d5874d9b89ce5da4b9ef6556f0bda4fc2b6f1b66757ee0ee044e5632304902d6e32b", "a42eba8dfff601b9ddcbc2d8068c586e2b2b99838ef3ca6594626c3f2bd4eb5af08286ebd302d407cb6fdf1eb3db5f5aa9b803a43ec4b8741dd055cadd586f6ccaefc68063be885961f3812b1a3e645bcc5af114a144de7c179c977f968de95e94fe8bc8d9550370f170d3b48f9275e886bf0f0e82d1e46dbb6faf5bd0e36811642a20d0b325007c3cd7d8858078be1f1d9dde44178bc31ac8679cd7c0c0b148e340b55113ca46b13cb7dcb94001bd73091481230dd9637f100603fab11cf5ffecfc53f0ffd9bd34db1a882357e67aa13d8718e2e61df5e3a60e92092dc2f5b102504f61e532c2f23589f24110d42b546d67181db8094f319d63ee4c8e94cf5588084180d7b2f6d65ca843aca390a6417154d6cbcf183f202a6af7fe30fa126dde9e0593b5893fdfaf058b9b3d2c9f7f14274543701b6b62bbbffdbaad6e2acf25a3c77dfb7735cc18b7c5b448ffd2f773cf7c0f69becc5312ad6c63fd21eef31cfd6ff8ad3cdf1bc8d4a336b8ec86775ad132517dba0ac508cbc752fde76b2bb2ef16d826fa28f0d657a19c8a7e2d23", "83f6b7d002b1c9aa8697b03bee0ab2746c86c16a44af40fbdd5df3f896e967d33a543a12540db9596a88222888273c9b9948ea340c25d285ea74078f2bfe9b3168aae93f34beb38bbb7d519f855ee0041568aef6f905ab0e4a17ff9a88759d6ead68269eb15c841024d3007aa70b2a09a9e4f4867a16a1249e716aaaee6e6df9e31660df5f4b104146f695b18201d2f342ba52e89d3b1c4eae7736655d2b9e69ca5c3309f9dab9b1a12708a2fffd2da21a9eda93f553aa560b6cbf9b02776699aee83af25650fd80d350267bc3aaa3dc5b31032d85893cdc4883ce5bad7d2e98a7d05b9eca99cf06be8f6a2d1e3225e5473e5238d3ff3bcb772c645c7977f69dea0ad5cc8fa27cc29621c246896f3ccd516197b6f085b97c7914ab0efd8c2144d5719d02050304045b7bd815d19a288b2c4296e175c550e12d46eaaf582b4cced2ce734931a8840ba7fb8db64b46f5cd411e59f82ac89e132345bfe24d9cefa24108806522c7b41503678efa2baef9bf", "aae28de2a1412f8c9ceca4c95ea51fac4c996cb8418d69cf12ba522dd1c757955d5ce6ac1da04492d9cadfba08ec4b9e818fc765d832a7782b04dc50a92632bfec27727d3c66cf834605e5bc508eac2815cd67564df9352df9922aac6411ebba98c47c239ca9b01d07fc21475def1ef16b4bba73e4a0f76088dc0073185e888285f0e055710ca9b82d2e5ac7f4567c0701f3803088c28bdb9f3f87ec45cc72843c5cffb92a1f57ee523571a47ea23a3c70ad9cf2f8eedcf3d0acb357c5954b7cd995471947037dfc3ebae56f23cc922602f48a037400801f78fb9986b4f783ee27331ca05943bbc8458e05f95ba95ee12a728b7ac989b06ff251ad963bfc6ac6172be17dbaaae6fad8e5a6cb65d6fda036bc1156548f3c3afbba961ef0e606d4ffb98271852401165eb060da6ceee4b8059a559bc57cfba3b19da9b916849b25015db57613b1e1263805059e3c752a41"],
        ["982bd254df6b4d34c43ce39f3e4441fe4bacaf1a2e5de792a873c50e1d910e9d4e0013f05d3321882ac5d44ea5c2e699ae32dde7772d96c92b30be1de5e8f4e314410760e8ccc49b9c671bbf615779e604a7f2887302d23042da4317265312e988df303cafef687e02720966158a33e660c08e4dd2afd529bec8d5ba48c906ea9a4c594b99bb11c69f389a5b6e7770e16dd5361121a503b9b79a503cbd285c3348e8312aea2627c132538dab1191e8510486346eb8edbac290b7b83ea7cf4304b2d865ca81be75bd695562050317461553c244b55bd6a242b8d0308987b56b8ff12761fc0e86704cb6b177c978698f09118bcd9c895404022dcfb70517e514e0c41d1209b9f7e8770617790e68a34e66304f204fbeb2cc70a9955f6908ffd66dff788e22bf469637ad337c872203ffd031334bb0db82a04251020f59fe289ab094b3300b563f898de23a35759cdbced66c2912f3bd50c63502176e627dee481ba26145bfefa1d83bb14cfa8e3abe1328304ec01ba0b88f72ea9dec7ae126f0df6339a7a4874f566a604650769760eef0141dd2ee277713c1f396450d763883da77bef2afde8e0ab1f6f3aabe059289ee36634b9aaec4ed2f11f5e66beaf0bd60d5857ffd70f43e57537f4a5962fe407243ac5c94891d14eee9e76044a9d5d638f5f4ef672b4a95b98d5cf2e3c9015775", "aedc5c59f89c08402b3609374d74af3854401c6750dabacbb6933e9b4330e475e0c77e3782063617791e2a2a9db95b21b578ee85f76610a78a190869d7b904769b5237b6fab528336987da6bd875129d2751971e33f14906f6d20dba1d0accdaa6c63ab8f3606fa49ab503abb0a2ef3b717eddaf37366de28c4723c6e07361d7baaac2ee2f46f777e8e05b6cfb5c53815b0486620939749edec4cf01c93560195f440557869851acbbe8c09d631e68253fa1781774fb2eeb844b60b8152c3e50acccb5d5d0469c767ec9c3df3a82dcbb673f7aaceb6f8aed6bbcba71f5fac259c5846a8e67053019cdec21be48c3bf97723ac88d0c63ded57b5313cccf4c021dbabb8a846b94136c5730cea1b00f8e3f6576db39cb889ab5a8669ca588a0bb6cc1c752c68ebb94c333e98a4ab9988dc753c4e5c3e297a90ad1da262db3ea109be5c20a18a4485ad4c089a3e0a3f7008b0fa81964d46aa54cd3d015d9f060da2319abc8d4a5be46d06994863436e0aa0b53fa3e31005cb7a98567520580fc796ce2fd0eb21eff450bb96684162bbe386362979802044764a3ae7d062aebd54d5437a101a34ed4be988136a17c3547c855646cad82f8cb60df707a6755c25acd32a7dd539766da8e8abd594685a2a6ba53", "8b3bc5aa955f54e0ce04c3c9dbf3b581b883288440c4583c8a45110d1746ee763f6c1fb7654b46e116081eadd6cd5f7795629d9228063f1c7009e5912b702b91ed2904d5f915f3a77bff920ee5e780322cc1f4c705006dc5d3426309c4ec4d2894b45918c8c550c2184e9c59c9c90d81dde12e4d740a9d19ca6387329d6827be68b35e98bc4ae3b787aa952972a9f4f424c75b564d512a642cfb1408058c9e079b12cef5be681085adda3b294388de3d0e5f0a7cf462d32bddb271982e899332fff92e53ee1d121e0551ba736cc94fa11917fd331aec185647a173da6af78cc23dffa9b1d563c5ebe9cbcc07076394bc46be8333bf33fc771aad9c97f265a4fb3c9744153caf38ec9c1c1d7f9821ad1446d36b842cf7360b65a90fad70992021529c2b8322b991fc8c098558182dd5e3725b78cda92c10fe75d32ad0fb7d911a0eb32b68e141c49e7956237ce0e34aaa3edf561a5abc46010a01b3275cb055232d346ca3352ecb2a8564c8e8b13a7a172030684436e55a76f2480643fbdf750b6ba8d764156f1a1f6ccbdc37441ea811091fcb3c859e7e97751e62fd1ac09f028560074f887af2ad9c9fa6f979c04250", "96d94340bb3007dce658a2294e4b7458e602606775db5e29063abbb920fa090b7e1b41b0b97bd753172177ebd0a9679bb2e55d0b100140fd97d9f687762b685c3239e90919671f06937f7b92421ad4ed5df513293d7805a27d069f1ea17c2639866e8a4169a2121bbd86a815063d27619bae238dd911da6f39f7635e84480b4f7da2e2ac4cfda0a2e442dd20b3c98bc85978395188df48243da6280784581dc0b4434c506b22337108009158fb2e9a914463fa5e16ff3734d2b77b6ec8340733a09ed4511a7485fb670ef84a06b8acfb252705b6cbb17ed0bd8cd8cb5047e7fe18a851edb958e2015eaaa1e4bc0c05314b31c8e374b01cb76a8ebd8d3552f78348aa8e89545101f466383290b6bc22394ac148d9a0cfaa7d43f272941f1a9591dafd8d2dec553b768166e9f882c615202ff477e8cedf860eddd019b8678650f3338c4e34cd7c274fd0e3298815ee3ad52a69f81a64b2c74b8bd368f7ebf3645be07f5379ec05f27920d244f1bd4b8b9c1b7431ef87d59e011edf5c496f5cfeeb07183e248ef7ccb7e6013be4aff2f0af", "b0217fcdf0d1444d3f0b117913fea8f5c1ff5f1413e0d68ddb426d4f3c47db92bdfeee78261e627e032aca311865be7396dec6800c28945005c038a1b4664ce40457564efb3aa0affff70f1ef8cf76a16593dcb5fd20af3bd795d9ee36d71a01b4d5c265258ff48c5271e90a7e3a32112058853789de6e1f8ac61f2d0224241874a194f47fcead1c62f7d2d3245d178c11d672a9fa176266a14d285f28fe15dc5f593059b06f2493969333b5081602b11935154e496202c67ea84150a766bdaf19d45ed595848ae25e138387a43ed0570e44d78f1d3b31aa35297896ee9443afde858784347780b725ca0d4e72dcd7f655bdecb3c180fcaf5f332bacd64d305d409eeee6a7fe8ce0292e934dc0005d1b0cf21f5ee2de13804d8bce542fe573ae59600300f5eec84d1b7ff390b2114c1339dee1fa9172fc78d99145b6f4e3d54b7236a4db619bfa72998ab9a1cfc180311df4bbd67c2f48a375496c3d648ad276e82202256fa90da839165752c7fb46e0", "85162d7f4ad1014a3a0f70d36b0f03ae56e02b22581b1ceffb8b388f7ae6b1e87ca3dad8b3612fa7f88ccb471f417cfc83d7f084c582d0aa5897e13f23ebcb681c6d5750d130312558b74bf2a3cdb00e1d9811b89150ae4f9269307b49bb27178e2fbc632a49d901f80dcc7e336d76c1609f77d87b5c111a3a77905f186a01080857227e043bedcd75600317f8a814aa0beac3fae85a55edd5bfa2b0310321b334abced8ac94f7b54c4b12e08789a44e30c2911cd650ad71f43ddb5c4d5f9f084c6bbce95fde8e90a47871ab0b06821467150260a55dff993a613b0e7f5c8ada351999189bf6005d8439f9ce99414cd44850122d5c7cc5c02f53149ee0a16295d6ef54e10fc09bf6d8bd74429c24a41006029fc692da7f8809f79bb8524dc43d7084986218cb13862d4ae72e2901f7cf1b575ebe416c40c7586e6b0698ba6bf73e062686ea3b1a0d730a669daa338622"],
        ["ac52db737cb62307d046bcce920d3046884ae1b43810c510dc1ff59c8a4a735744aa75ebcbcac4fec36dd6bd5a2748d98f6e2dc520d00a1250b0770cc9a1bebe5730941c531c440b23f23e652c49d9c56c86dc78bc378aa2180c75d20948ce76916d0c1862ae6078a1469205a842b08bec617f92b321d2ea0ad7446c80995092c681584ddce8728a2f298a3730eceff23f85985be78cd11c2bb726f83f5e01320f9210345a82d2c3e8db7e2c80f31acf06687f5bce3809631d18e8ef189d8b0bbf4cf5bed9f262387d3a0c553aaf1b1e18e7fae4a77f6b706f308371834fc8ad26ea39a7e1e66676385c29528a6959716108658f3a8a5a000cc98cdb7246552bcf323ec6be7963dcf459d315938a2bde3445616b93a973c0f76e2ac4470c16925867cd963093368522492ff57ca325556d678d878f972f1c6d8f666feca50714394fffd4726405dc4b6d94fcb5e744ab09d79b55cd75e619c8a9febf5c7f3b6a87022cfbd826931eb3eb3a3fe318819e4533472a3a29d4dbcce360df2ae0317514e0e35df42970de5a5b04409afdb64953a650ed92f7d3778c461805d599e043db712d5288b5dcf423fea3704a964da54d114c1a77020bd494bb18e06f6e420be7ebe2044c744549c15efd9ae9add0b52cd18d7f997c5f0b0a0926fd4942ec5ffe6399c48c12e83070ec0f84f9473f9c", "867bf7b5141f0d4cb8149fd64388bcde4ec2e2904d6e8e99c8193725e8705714991d98960e016c783cdc19abe8eb5f71aafde7ea7d7911aebe375127d48b851e77baa722e86c5a995d8ac374976b8810bb8c547e57fbc1e1af3d8b4517e7e7e7a2e51a553ee133f198bb9b7b13269a6d2fca1674a677bc2fcb400871907cc5e2cfd330415a5e950a15aeb3c8915da8a33e4a3f5388dee728449f9e4f67be835fcf6e064f4ea0326b8553f6bed82fba981773d1aad2c0a08d9299fc73eff7f0abb8ef7c090b7519277eda461952e610030e8864800a849b89b47d780625ed11dec3517d999a69e084e6748d4974748d931a8b0e867d2b69c2ac0108d823ec2f13a698389ae7dede235b45136140decfca2376a6cf1b3978f17fa0a1a292dfff577ad14bc60d0df2407b88df97d47827a860a773016f89109985a49e7376b8dce65df8f5197d7657f99386b23175370ce73ce1030dc02c9a87310cbd43eaef233cba074cff6859e137ad9f158d4b8119d75a73b8baa334dad588f9a517dc36fec28fb5b92fde9be04f1dc53b09f011ff1d11a15ad01c768ab1b20d985fd9a6d17eed81f074ece5863d079c24727e17b715264e8e7aeb5706552a2ce37786399f40dabb9c5a4d432c7f4539683e1e5e48cd", "a6e0f0abed3096b8121d2cfe10746b1becb512bc8b47c0f1504d2eb849decb686f6110fb308ad2595a87a7751882fac78743b3e7da3bcbd5720c5b11cd8aeda8c9097b057ebbe29763775d2cdadbb5d347ff091b67d60da7f98b2ace0b344d4eb459a9c41624e574b96a8bb98ccdc8e175b34f1d32934a7e7d8a0436a0cf7bdc2f505d60bbea1105fd964af5086e805567774cb26aeffb28f8ee4c5fd98135ea5b655e53ec0c8bc8295223a3c3c4e5ac5e67110a90f120023b983694600a1ff32207624450bb025e6a0673234192ede3270e3b14f9efc43d4d4ecea6f6d637220716d2e723c22e5d27e30f0da7b2b3415529dfd1ef94f16d6541dcd25d51fe6d06d871b6f7580576efe58d01a4e703eb4405b4d6c042f978e759eab20ada01ef0d7f8549a3559cb62b832caaf5fcd0ea64f06f5d1cad2a12379470da81623bcaac53c07a5cd7d422c43811ce310fe2ee4506bde27386f8962ef1bdbd1a56d3ff73f7d61ba39bd2b5563948ee50bf85892b6b8d3b03117839fd2f1e9b139a071852a68c18bc09431126c63d80d6ee14d73439732310390b0c4f7b029cdca69b5cdac7b210105bd59398827547df6ea87c", "b7ca5c820ef6056fb5b64b850c614702cf181a25387e2644febab01fa3fc24328dd461ec1ded1632e3e6ad3433d55973a18fc1f9340532ccb56e02ad730a55f40d39823babb5e2687c183570f29ac4f824efd8b22920c6308d9a9009bef3aeab871ed893935ccad3976d11f3dd429ea32c2f85942281b236f40cbe79f9267d33842e913b40f26c57fe0ce464f478794b6143a3f607121e3d85aa7a9fac71b585c7bce7010860d9df680ac7dced52b23b2d963f97c2063688c3a43dd03f34ab3e14a6df36cfa878c676fbf94be478fd6e2c10a81a1aef46ccd5238063030677a14403404ba60e380dbaf5cb5c5c98ba131770a117c049a0de58b61661283800168c8a35facd14db96a5bfbdb3d58dc93913098d9e2ee859cbe5f1cc0f8277f199687d22cdac57a47a38b4e8339499a9a5324d6b2cbebc1daa43d43a15037689063cdf8abfed4ffaa881e697b6fdfd186c395bebda59672c16a957d6c9c9044083754929c12848541bb208ede5d703484645f9e6df328679fa70c3903a49d19f2859b54b55a9976649e228402a1c666015", "91074337736b93e437e5c4007b958c8b476d94355f3b97013edb6b5ce314b7c3a1d039ad1822cf1d3cb80ff291ee5441a98249f9bd27be5be201bd9b002bae86b8ac7e6e3e712c38c747d9cacd6ee517a73ce3414dab9a5bf0121cc98d00693faeb338e8a4c2c27e0d21b1ad57afd588163fd93d3b0ae024bfff6cee54a2dc8d929d56a26b33ca61cc28f1635fdc70cf280941746a6d52145e519a7d7e8876a85831db34e389885a240eafed44391acf34de6c788a35f7d82c87199b6cc2be9716323de6519dcf75a22d24a40b729fc559fcb5c6187a4a064f23caf3554f6e70bd745d963e7ebabe96e6d23b0ad058061d77736416d8d14492db85d8405e3fd0376fb7ca60b7d42c342263b8a1964df243c2c8559939e259146f2122913584dbeaf68775590042f53f3b99fb97f0356c1decf25ebc5c1a6be221065474b0e946d2887970446cdaac81cf116f9945d7ff5ab7760b61c4d4be5f7c409981db7079ec88b87c33cbc9cca47acd1b597979c3", "8c5f29d5f472ae7fd6ae51860fe91dfe468d303510fe34fb4addc53eea01eef9255a9ef88d57cf4af36fe9d78020fbe7ade20d8d2e2014335e8f740cc3a4cbb261b653788d53c81ce3146d91048f41c941c21ec2ed8d94dca331b6fc28349611b1c988248d289ddbfdd0430ae2f51b2bd2fcb383d204962c98353f4c5edf2771f020a4663c529b4d0d7f589e8497a8d85faf8030e4baac550665d1d31cd237540c6f002a1b70db5ad478b5bfab5e7f5a411eae3b1b242aa10fdd9180136ce8a0bdb5984bd466ac52c16d1638f0ff824d2432631c52523936138aaf17e62bff15426c5c89659305f159df6a56678b14e418b24518ed1d98115f99982a6f7f47a7ed51269106605f3080cb7d27a35956f662080a7833c24001b8c3203c19aafd41158e9639a5dd6ebf999e779dcb5162561d3c4caa6422ddb476d60824fc72e806a7b7e55e3b62d37cae38d96933a3dded"],
        ["93b6bc882842742b2a187905faf8d667271e8f18cb9b67ea33e22ee89eae5966873697710569bc0cd421544bbd084f40910cb5122c43eacc59ed463a55e8b3d3c94b8fbe389e857f4790931a5033b828136d7aec7545c31317043857ca714008b1a0c3e526fead87f986e0c03de7a316e30f85b6635aaf46a19ff1fbb580057d7c56e19fbdcc26784e6de01cbfd56d6f156a1b30ff17225ddf51bce8dc83ed73008aa4b7f54169f365c51d77c29ae5a1119e76376027cf32ca59052fbe06a1555813c629e06ac0b99045c0ce982a230514aafa5b03edcc82353f11ae8231dea0c57a5659f9efae043ad3e13fbea2da9a536943cba6d28130fbf3406fd753f543f0cb672bdac8911ea349ad26cbe46e947215c4d49eae3ef98e10a54bea7deb522ff350dc3b4b082237d04bc90659a0eb58782de8fb8df9ee428cb91fd6e69ae2d4317995593529d6d9768c1e635d01c004c66c24ac0146c9e23c9f1b3716701e83203429f6f0de0a77ccf3de0c75d7790bc87099ba81d601c500f6cc142f46464f55ec1c8a62b3047506dd2176a7b87508a3b19fbc990e506ae753a0111ada2e6905eaab8d12e386463188d2e9e66591219bb07733b327c3c34d59101a47102aa7f58b526b1f0c0da055da869a4498373419a314f14fd4d336bc430d084b96b1acb4bc4f49b3bdf0e58540c6dd6a3c04", "886213b38fcfd023512cc1e6b904730c6a6b5a3bc5cd0d571959536683b03ee6edbb65625015e1e349d46819957b7abf8568442eeaaba73f1baa9f5df1ffd6d28fb92da68c2ca6962b8d264ea0de8bda52221fedd54bb953de2c573b229c3fea91b49d1460f72b241ad40910a745ad27a6990eef3029611f3ab44a653ce15fd47907794a301c97667ff847b5d7f956406845b2090939ab330820b0f461ed89bf24ce7aa5af312ac9d08a1fb4982fc41860ef92246c6185e5aad126323294321eb39b34a8283bec6863beb01eabda312f17b2d282203a1af3a51b5847c5cd52a6520ba61bf73928af6c52e4926fda8e47233033c257a005de68fb985403664095e9af57eb4e74b9df7413430a3e0516924ce2207ec5de4b6f754839362f8bb786ad941b90b20c0475b70eea25635033b867efb8f09881fe4cc7e8570ee11a8dbb983f8f1cfd5dd5d782be4ffebcfbfa936f2aa2f6038e26c788f0f8a50df881703ae8a86e886c79213c147d19f929d9e76657698e6f8d05498eabb1b033b8c1cd73fed41c6f39054ead51d3da6a6e73ee323ebae9378a3f5a6de9f7e0d3a924a1196d783770f8aa817415a869cd89477a5e8c6018fa228255a086e0dd2dfa191e929859aabb8548ebacd2e56776f95ef9", "94d550f033d40e8431f1dee3806ddf765795b6a52fcd1e8df698f39e6e2a21cc8725cc1f70423b878ab2b6d8953f7a0e8236ce7d50ada1bbebeed843d11b5d6779c0f4f01b5d492416664349fe1f34dde8cfbb21f286c4a6059a3a4d7348e4a6a18e7044a3f94e5d1fb8b8399164f895a59d18d8573d356198367ae844c9aebe3606d6aaa48cd21e0bc90b90291e92a60a3d8f3091ed5044dde7ff9031699c27f65f6a1ee2d55cfcc919da5406b978b16cb810f95d37c0b04923f40242fb00cd4e74c93d6b8ecc067a24866ce8ba2465378b4bdf9b225273d5895372382e0cc8208034e1d0e48f545d749d659c23143442cd53682267d1a8955e9c91ec09a9034ca4267fc09aa75390c9247d5fa4ac58411d49b8eaf0e2e0f69a60f89395ed77feb3a1f019a2025d2da59bbd8bffd1e63f48af22f3ada8b4d23becbcccc3e189d1204dfded5a22ee49cf711c5a3db10015063dff0c608756b4722c8e16437e905e199dc6c7653b190e326de506bd1f6f021dd81b23f46cc8f6106ec8ec8a4b4e2a7a11e6e0f9229b8265e7398596d82347eff74a4fc60b7b5b4c1b8e3a06de49bdc15611cd481ff6cd74b8705f2349d7", "b289b285fd24fba29e82a48c05f542655cfeadc56f09b5c8cf50423709741835441705d4d93db545015423a4439bffad970baf764a11e17b806f786c70a0d91b545268a44b9344bd0d61dff1105250881cb820879c56a5cca6a1d9be2e183f9b8c8eaa9c2eecea62d5f2bc07710cbb6adc4ae0f5941b322f3914762fdbf9389f2f21f451e3d7c51e332ecd03e64ba6b45551a785de9a305fb09b3447e44ed72a15bf1f48c96d8c0a3cd6ade5b7838dfe24ad9c97bd314b1cd174957a66cf85a3d72860c37fdc093c591de99cdfe16f9b4487f14047f512b72f7a238b8f91e16a6ccd5dabd515f516a863d6942fd57c264514717151fc005a33febfe04c73ec43e90ef19c5a5fc5a2b42800f441b8d3f911dd450f9b10adb083f725d382f273c38a16b9436f3746e854d89950494319b005a0e6cc9c8ee4071f93ff9875d383338ef9cff452d3d8c121e69cb2a2ca23810578fea92583d0a14613ca80da967a81be3e894b636b9f281659fae1d7fdd0fd4547f7a8d9e21029061dcef84f64a51c8db9afe48c71f3966cf384f4cfb83e6c", "acff3cd0cfaaff09d49ddb4a4783df39817b7123d8c1c411c2cbf6275fe4a94484fe2662bf2fdb802255ff1aa5428522b11c80972ffefea4cf1c232ac3d2f97e653c5d83e894d9372e02645b3d17c32f6fd9dbf6799b8205d6cb0c4d60a54f80aa0c6cbad20d5d3789bed04cb177021924a935590d5901bc940c7095139a055fbd70634ff860ab53418bd8cc72044824197ac9c74a2df7565f8efc8a74f4ee6de43b99dc750024919779178631ac2d7b526cc3a27b5371112dc7b72c8fbf2eba1bc63d983a350c37e5bf49192f4f34ca5e337e0deb0247a744794fca76b84533e9137674e9b24e1d1b4ba8c5e095e8fa1e28d5870de98f0c4c606a32664cc532fbcf0ad164110a018731a8099fc803d80821735de626ea00a0789712d6a07ba5518771d58742a28d3e5be82261db56b30829604b42043f66a9acde8396f77e67aad2f88e96ee82d9b8e81c928f6d157563e919bcedbfb89465c8da8b4b682afcd3beea76312989065889af475005b548", "8bc88154849b748883d5a78c934bd83983e88cfb30622297843d65a039cd63b5c9c3968316087e224d581a24ee2ae17495a58ecbbffff2e3f466856747e4adcf21afeefd8dc255c4c8decc8357a79d6275b552183e571f6200483fe2232d12beb9eb6a6612290d3cc6c55d5ca3ef75150b6ad0dab54f8794c5a56df5969406286738aa62d255ff7dc7a0a7dafbc49d0065ef214d4ae4f77490859dbaf419f1fd49b28c548ce149fce2cee694fb2d15d6064872f67fde47952f8e5368bf4db943856e4aafe59f9aaafb559a132251f1ae5bd5dc82915801949c2453395d3be6d04505e57c8a09558de9ee4c6ef4e4d22e00c11807e070fd1f65df0b8f5998ca21110f993bbf273b247f1a7924a0b8c4ee47799ca43e6cdd3932ad7f7ecb6d11969c50c65bd645ce05374e3929ce3cedfc143c0c97920d0aeecf740eb15677d59e3d51bc0d4645aa0287cb37b7ebd34a8e"],
];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(
                TEST_KEY_GEN_IKM.as_ref(),
                TEST_KEY_INFOS[i].as_ref(),
            )
            .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify(&pk, header, &generators, &messages)
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify(&pk, header, ph, &generators, &revealed_msgs)
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature = Signature::new(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices =
                [0, i].iter().cloned().collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify(&pk, header, ph, &generators, &revealed_messages),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify(&pk, header, ph, &generators, &revealed_messages)
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
