use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, B_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))], c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)) }");
    assert_eq!(format!("{}", proof), "Proof(A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, B_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ], c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000))");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(192, get_proof_size(0));
    assert_eq!(224, get_proof_size(1));
    assert_eq!(256, get_proof_size(2));
    assert_eq!(288, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["9954ad83cb9cea6a67d0dfcfdbc13e355f9870fb84dbfefb406f962b252f0acddad2681093f76938529e6e54765b093f93641109086f58df704d62a160a21a09b9934ba4ffe7a38c148d211242a4670b0f642296bc04422e330519830412f070b4cb3fae568cb85d2103d31ee9c8d77845bf1179506ef99e3e7a80ed4e1d504b0a12d3b1276caf2ca4d9618ef42ef3fa0f27f2869070e7130e2325e2403f4d39d46016b4b7d77705ae63ed3dc5a8ca4711289907f3e520fef20078c6ff237c70b710c453b85bb69d9dc65dad7d3285f31e5a88167826bde3ad15be0407d1b61ff147c47f266f064a0323936a0c3805b73b0cdbd6652e33238b9ce2f5d4e4921c6d2c045ca11b160dd7f3f1a468aba04b04c7b01c0c3602667aa4f9d5ff39721bdf20f614a652c1a31804aa53c040888f65bcadebfaff9d6a9f6c7fd0a667753e864f78029fed7d2f16a65acb0d103571574380ea8c11226d7ca59a53e071207ecbd2adc6973be306fb7279251ad434af1a3d1184f93aa635138f88087c989233bf3f3665b2d872561d1406d012e5ac4c07c986f7bf790aa6240147d7a74bc0634e702b059a27eb74ad553b36defd8bff364488d738a72411997e3e27c7a8bf2d7ac36f29c50c8cae327bd59fcd1711c435d5af78f935e5d4b5e96b38488e393a1d60f542366c2d8c60b3f9ee9b3b4ba9", "a0ffbd2ed60f66b5aed081b04fc31f73462a8541dcbb90e0975d57b7f2535b7c7dc4bfc7b41904160fc193c85d4bdaa999775d7677696fabb9c7d1141e6420859a13bc29f3a362420c0ea6ba8b5a4e99f374c55402799ca71a68b8a1c5e2aa0e8eb0c2ace7e0894a67034acb4ed0490877e0dc4461defc466709420818034b040214244396e1b0c96f3a0d68b2dfc7ac5cbf6c9dc1736650dfc51e3f09116106891de309466c807c5e58ba8bd637abe308a0503ec847f5e81ed89c1bea0c13e320144d2210b88e50cdd43ab6743ae4db57ca645417ba404d1d626776fb2b1bee3704856ab7b33d001b3513474de4ee32103cc2f8e14185d71eaf6b2768ada50fc02289c8ebd5279b6f63eb167c155bf62058614070a11d25900c78ca9345724157574bd61c08bfa45a0a8a2aec00735c34e25c194679ba3af0d274c9069b1d58b82c87acb4edef678376c6f7d460e1c203687e90620f8874da8df9937641f0d30b151d2ace99f12fe21a5c4b49d63fa857c31c0cd492cdeaff01d38ceafed3d2cc6f153c59d1682a6a9565352185a34c6d1a6c0aead3948b020210a1108942abd5e7b5a95d928572415154e29774f4e214269649e9e2b6b997414af2d9519c524a9252a744c292291283a62a56749f85", "91f4895192a764308d047e1b8340bf5a537adc8f09391a7cb9681d5c01ef0c99ed536a6bf2b805c8ed2d96249ed0ca2eb402a47b0d2e065ca44ea0bc47fdc2a2ff0a2157d2192518d5a3d73cefa877bdd3afb801aa15d2b182b306535e9a48ddb19ee80c414c7769314577129d85abe9e673f6ac7ca7e0d7c232344bba523ddf1901bba556d75b0273618f5099f2ce3e10467f767cb9c3b82c9f88635f1b316a80bba42ef2cab1c55140bd183c485ddd254ce2046550a7a7cbef0a901a2712f7419209e7b172cfb6e0ec7eac62c8ed824a595a9a4be89d6e946ac03160ec010b99cfdb80d805b96ab0eaa02b7d28507951228458de35b4168bed1c8b48cddeebec617910292d2fa747a165cd79e33967713d69ade9d1e6793c68878b33618fcb8556e86b0c9d076d1c550c3eecffa4c76d33d535562b4c39e6b9d121796b473b192d591216c6655e96d865f0d0bc739d22cbebfd2df97c6ae1cbae82d6bdd7d039a77342a6e430cf1753bd142ae23c2562a59f7b409fd0473607e279ca111de9f40502ed7db1dc83d2bdf94845b1bb08605910443cab7c860a73b4ab9de74e5d3c531207920b601ae589a5928f4e139c", "a98c09a005057cfd84fe5e0448b6dad6d266b2ca800938b0955ee4f25036b2f5a66565493ae934cbb157e05267c6638f996bd95a633fa69a506674c129152e3be159addc9753c48b8c4234314d6858de80f338fca67ae93a5a136b944678a7608eb8248db5991ec69135331b6de4c0d51eaa048534f8a438cf61a98a02b2dad0401663a510eb4650d8dddbae461ae879095bc096fa726ff40e21f97a7237da4e494326762fb48322b1866fca6334f6a43852a3c1a18b091407acfc5935f5b74ccc832cf979a5e047864c6fc0bf43bbbd4f774ef80f4d988e7961d0a710f38d2b2d0e3624dcb3b5f249ad89c80e599086342c423b2df30656bfb000c9de56cc803553c18f9377b8e4bdfed2bf267d87a259425408e9fd67a84fd9c62e63a298b29718bf58f05e10ec2d610d6fdc4c37242620accaf517eb9eb160ab7823df080618447ff4f737265751a26b21844a3c9c66d6a70295641d743310215aa4a7a9a5aa3c65339a800c4c36c9ea6fdb91d2c04bc5fa1603a3393102162dad5453154eafece970547e4945c4d47498a8459129", "863c139f27ded34a1c1242a0fe33595e3c54b839490bead2e79d845a347ad1c1d87a7d8f2652a8702516c14fbae8b852ad09b033035523f1b184763046b38f03a8afeb4bcbbf70f856f4520acc006254c0c3cc66c3f84c29c5615141aede592c8cba0418260622a6511f28854fc53c781ce1d9917ad5a38d24b68b9e31dbc107887bec6d18d0a2c63913a29d4bf65c0b4b25c41171a34144746030df669a8abfc80eaad8d1e02b03cb94edf27ab805d86e70e9e90c19382dd3dd73beada17053a00b31ed48000cac56afc6549ca5dd92155f1db6a84da75f449601947041679c8f0b2a5150b6b8494e230683fb9a450d1132031e532e38884aaf8c2025642a5e6934775225b638f05e2d910b2207993249cf9fcdf2e63f56f5d20b90c1ebc6a903a2179de66b43f16d4931ab00edcd0b2da9bc062760a10e08ec4553fad297a830db000c95b04dea2fd0a1d2d44c40e16a49c553b0b15013cfeb98c41eec0a771202c83a175771923a743c6e711d1944", "86929e52957aa95aa2d323eba303053fad578687334f04278fae3820054908baa77b1ba2d5657737e67e8aa9bdd2a81d8663f5069445427d775eafa88a5b0a8b35d03f5fcc6275608da29722876051c5b5256f698ffeddd8415bf899068891efb8d982de44540a1595696d3ac08ba60be39c60db24e879053136c91c314c287fd00b0b73ff7682edf7dee11e10395a8964660b1f95f41dbc63b9d5cff0f19e3572af3271902cebc2cdaa402530d6709f2c5753daa654bcbec60f8ffdeb2140749318f15bd727ad5be49af9b912adeb47293cbbd9eb53fc7af255179a38992eeac7c30c8948d8182d6d0f40414b878c5908059c76813731cfaa5c8c52ca79acfe7dcd8fae471cf472d082aed67b34059d2c64a08a0228ec5984f8c3eaeb6a68cd6fd17fc4db4e96db8f9047a9008233cc3bb8a15aea76986bcd1a1ec51bc7360bbe335902b56c315136dec21f2fe41079"],
        ["8d219b4b8a5672676c6f82deb55098914c4d021d0a565a48dbb258f0542d60f32955db58bcbe43332a1a2485b108f3d8a332f7ac8a744454c2747bdf07fb0411af0af4c6bc28f4f4bf4a976ecb3a83959051697a27a2f03e7c0bf3b181defa1cae39576b50601ddc91410eadcb5576589b8c68d5b70bce1e66d962aa519e04848cc6af89e6cf04d91d9bb795289ca6fe39b0383d7e7e51b5984e273aa48249025258f24310c69955d5254a77a6bee7934eb4cd62128ed8537c2ae760a4ea305a6ed59374d593bf4eb29ce541341cd6670666d2476de9bd1ad00323a4dbe1e347c9e9b5623e9aaf5927e3495ba87364bf500bbd9d7f7c24369e76857b8c871acc10e82be6c1af01e9a137480f4e94f3ad0da5f8059da050a7793ab95521bab9bba0fa9cb0760d965d841a62b4341575df4b16c5ef780cc14197bd947a3823e34ea902ebcbdae9d1fb30367782e988da831baf1d4d0a3b977c5d049adbe50227a6dfe906a9bccace7b6373519e14aff97305c313cad3384b49a958c688405ddaadea890c1e162de7ce25bdc7142c72e0934180b445b8521734d59b3fbf40291e76934c7123a88381ea7c1bc1974682e88b0cecfa957257f0257943f48af4c7d7046d78f81b9a8cf0d20d355a8c409b03262504b309d76d6c460706ea43a3496d967e2fb0172dfd46ecf046b17918b8769f", "a6c0ac2da321ee74882a27ffd2d746569c8c542a62d76abe544c6b2378d5e07f53d0f22e5367cbaa00c35fbf3f74e98aaa7173d8e88b8aab311d0419cba82080e0778159742eab4877c2b83989575bd2d77205bfed68cb04849e3f7dcf576151814db5a9c3d407a2bd7fa498c722fa48aaca349b9dbffb47a15cf5dd0e1a3fcc1a021648b271f8d291847462a4bc0c580c1034313479a64c76ed9f317cf6be9c9f9611afb63cc0c8775e5599654b4f330d06e8fcefe95d8cb946c174ff4454a237bab3f7fe04aa79cb8ee393697447f20de8bbbb6d3430ad593392712acb30080f6b315206a7e6a6bd928b360a168c162ae5ba97a490b2021564c176ec3823cfccda364063b90069250176e2612247dd5872ada2a18b5f8f289631b3a8be37d6f870e7833ec351ab5cc1a565b004e1810eebada887f379817fc11aba091b55e0a1260a170c361630cbf7f9a2f6efc7005de185825c8939fd605f1ca4630f2309d1b3a83f84194b3945d3286090a09e2f34ed62fe9c63e5c19dcd1f19e7ec3c7f1b41610e1d2a0ced669aec045c12938f1cfca8e18612987c85cc0fe607c8f4da0c16f2afb95ab582d674e4471b4ff3503637b28959d2f8fc0a2b513e1987e31b51907475a61057f3d8906f029c9b0897", "b0959900a0bbe5ed75a0bfc70f0a09ccce52b6df9bf4ef7d28defa77d7a0a960a4e4a9fed3b7c2bf009d528f925a99c7a68524049a0e735202255c8f370e0204e3731d87ba8e73b9c038348cf6d5e11f8f376f65f2ff50d5bc592d8288a5e0ec950f4a81de6004e169a9a817d74ffed790c79905e13b7ce89172cabebb60f6d2d636e3b575cab091011d720dcdf2bc836cf80c439c3d37c3078561b38d1fe78ee04896af37e3bc74b2ff322dc19d48e206b3d79cfdbe525acd4026192fca594f49c1a88dd000fa1b91202f6713665a5520834b9c1f0792b7ceef8dd4d3e24825e99f51cadf246b5c501073119179516657131c6fcaa4c322c0e62f2ce8beb095a79a14e48dc2e34339d963fe4958baba5a7cd367dec268a6d8c6aa85d787af79180bf52734a8b15c61ce2de7b2bd7e8963bc7ff60b947be957c48447e546da6b7c68dc6851563ad8f43062806dfc3a5d4adf0790aacd7af9e370b60740817c96612febc489952b17dd1df08a3e0e48e9430bae005759df582366db5e33d577532fe912d7872511998c1b580efcafb15514e991c72156bb6f85f1ba45c4a87bef9c7961de67465fd1dde7cb59db747510", "8629457e11413c8aac0bc106857889bc00c1a011ee7ee22e3b3336d15955fbaed365fc385b6eb17fd66aeec9f9d046a18bff4dea7fe434de04989e8bf3bab76db1ec354c4ef5653db1e20cd4bca891b8379cf62403d81562a0bedb17e2eb0de985d92ff80859bac8159a270062b216a1b2c013af43b1ddb4af1f231a29caa28ca77c74761391287c19660739d0afa3e065e3a9ae10ccacf96fe7bb646f84f5e0381ce7838aa0ce2c1f28ac483c5b62846ee50df7ab200d28f6aef9e214bec88285e1a09f2cc20b2805c47f7a44279b7568d6bcb7382e63a925aed695aaf260ce2d053abf4db9227f3054708b8ea38e62612605e1a0e2909e49c869176a37af58c6925b1e1d47eeed79b1e6be93441a4541d088d915bcb44318b20732abb28a39075b5c5777a568f8f25e3ca4d988cffb6865eb4fe810fcea42eebb2d1dd9d68880d7735e54eec968f373568b1fe9e1183d1a01d8660761951599fccad6bb8d7ed25547d583d867cd25b83031c7f9c3881bcaaac8bc2cf7e2ab12c15fbe4c079fb98cc7b14e52d4c8544e8adfcc8615ad", "8ee08ddde69220f5269d1da844e84f79031d75b3a5c4785aaa9a2d04880d865bbcd25b8b639d48fbf600954142bf20ec856c0a82bb995a1cd8cc099c735cc294af44c1313ab8427e893b3b57d56fb3d4fee5ff214a551bba3a3fc6e7c5f3571181c9381ec6aba2daa3bf4e8bc94a8b434c03c1974eb5ab7870aad89a426efc735bc4997739d88bbd80de6577d3a2d3eb2bc67f0f68bc0ea5333b7b1070d7f115c2d9b9f2ec29451ee70dbaaccee34d62688c9659d08dd3c63787a07c1dad577eaa1d7cf43872a8ad5f513cec20faffca3574bfe7f10e2fd23398ce9a9ed89bda3c8dc602a04e4c0f5342a4ce5c0c6b1761859668b9fd2db132e75379c6e42c9f68d77abca28448302cbe935514c333ea1d5fa2225fce9936bf9778b30ee8d76caad9a708e1562a92f83330f412c637de43ccefc6926a60d998393540bbcf54d0de69748f5eb40bf26f7358381b6be69859691323c48dae1e870bbe661ad3362f3312297b0c79150e0df93e9f873c0d46", "b05614ea1ee5a1f70d9d0f6e40b498e8840c4ffdc1c67cf83dd95bb1061b15a3d06d266011c93d0477bc6d7d174456deb4e247138b735f1ddc224b43974245fbbad5cabbc072ff6ba5058ff7fe4a1f6331954fa099a89e40336a0ce5d748629886efd4b51754f093de57ffbd24f38de1665aedff8a3eac284b2228f475af6c052c5c37940b80550dfb5b652e927ac3f10a4bfe0a3b5cc99387ba7178d29a5bae5e1e63c0ccd61ff3e774b2590723cfbd2149f03b560c252f95e6dc3e195f5158b40d8c111f3fe2a4fd98f0e618b32fb171258e4917cf961b39383f8201dcfda3d38a7103b5b8feb4f103dec37c79cf562ffeb8444af5ecde63be1a14f2c7f9ac1e85bf3055c7a2161deb29a72369729e565e19e572aabed5436e6cdb934e697f2443a29d1bec43755e1d57b7ee1ecd35109fc7976142fc495e1fe35f86a54cdac2547c29adc78d2852ca2aee74593f9f"],
        ["9555c1256dc23e640600e67da08b2c6c5ff3b5554833a14a6fc050d5d6fa370f74bc4cd81ec2eaea0e98daf67920186099584d1a1b190977c44de17332e9a3dd14e36a8c1efa20ec17d0067eb647161b9ea8297cf719aa6d759ae5c55963205c95b64d45260f4f81a24485c53c7a8a755dac0c22f3ee4bd92469474cfd16d6f57d19d349ab0aadd1820cbd96a1c7a1495fd1dab4b6b82b052ada0a3f446faf5ca9aefa682098d9456d7c6bd6a47b6a5b0a6f985d8e29384a84c03f017a9e731dc90e3c9d1fb9bbb406e762927461c363691bffcc1d946cfe61030968bbab959ecec1f26b0624cbb61d13c27aa578566a597a56c01b1c68194f986691aed62c083ba7f644f649288c748b8b065defe5083e7686fb041f63f3c3cde6420ca6c58c1a9f90463c89a4840c6aeff35a6371356ca5cf48f12299d59287e10a63153ac3af47be6c914498b7a00dfc2b10722180638d347c2d115d1ab7239d3e4629c41615201f529c8834d040cd4d0aea9a51ec1ebb3a57a8cbad9713ba03766932a820823245c279eede9a66add4a7bc160c9e6d52842ab6a8ddd49ed0109b531533bc5060d6e3f8e93fc1776a6d490b1f5fbd0bc90952fe1598794fffa0928219f8b07e1fd2f11449412f5ece34183daefd7f389d8e2e8e9856f3522e87a526f467b27e56522a551cbaed8d9169d14dbb056c", "ae64870dce7ade9aff20da0dc5de2eb644feaadd65a38623fa53bb81222ab4ffa64b6daafd11a582beaf9d3146442ce78abc7ad0bc0bf3ea1fb5daa0c6589041a37269a8e843f26f7470fffa05c286163dab54b869056994f1333f25645fc244a47f1908754964fda4cdb376980ec54d90f63bce9133f244843850efc9e1879a67e875eac579a311f9096e598492104749ae569dd5cdef360ade7a9094bf7f93597811a9a4a6ab9985a4c87d362a5f185f9997f8abe7178fab2827a20ea09ced9b4d33f3aa452a1c08e7c6ebf2198e173763b6291bc35db6bc85b86aa957178dc4b33c8026654a1a9fb65911e20c70066d1d07388d348bf498ff1c0629bb362f306b68db8c5f9506f74a3085dd46b82308542bd8cc353bacfda979e60105d56ffb2b6259c96f779ce28b2cc87f0208fe45baae94c8bde3ae463164c8ab3eead38bc0351b9128b5973b5ad002ff5c3d7b2183751d07693d64b6ebb4563e9eaad4527c936f3b6bf0c3e39bcdbd1a9e74b04ea2a9389d57503b6b899e709863264b4bde60a4b95c9c9963b301fb5c7a2f0655d495664db7a0741a8269992e5ac2e751853b81b3868028d321c47a24f2c05464d9021c0b22c39f097a696cb4c0f41db142997a6ace4425723e4ea3b4b7ff00", "af40b14c6b184c2d5d4ce0b6ebc1ed0c47685784c5b86cc42174cde120ee4ba03ad36db7acf44599cc43a0167237c949811e009e6fd89bad4ea88777bb0e68609105d119310ddc5ce353137a9f49011755b6aa19b4a83b7e6c5b06fedc967c3da5a37df33cb11d1972ecffed19178ae368dae96489e3fc15339aadca0ada5d89447835f9400756f601fe93f501c56e501535deb6ae954624a3eb3c222caa6634e1c62eeec660925dcf89c26aedbf7da226a2dac62b696bd1f1b3264aba0484af1662b43be60bfe33ff4cc30fc057267918bc28064bdcee55cdfe25242d9554804889f7bb621dc305659198543740b7ef43aa0ed5db1098f6f2445fd0c7f227a49969608da2da7e9aa538a36ccae6287352f4c3b2fa1de2e7c6c8d8ca7c475b0aaebb60dfc15acce3960f47dfdcf4f03b5b2499b19eab8e47ce0a8f50a97bbf7ffbcf8baeb4be07c6bf14c742ee37068833358a0f2639dfa82ed8029e79ce8f75d17b93944c22e2e0104788f936a7d62a60bbe43f98342d6632efee7aa410395f4c6f05ec24957e49d1c8e7a4450609091d284693b1dc9695e0381dbbb655aa7c089e247ca44a00fe36c4e03500595290", "8fa1b27d90cd6e6b4aac65bb697d2c72e0f0b4890dd162c3ae416cc9c33a53fb06ff57a9e1c130b3db3a6fae853189ec8429a9f428cd259c9738ce2301587c0ead2c691d1a79e69a8ae7e7e0b582895dd755e269b5b6231a565ddb912a619c648fca449429d8701241e01fedaaa1b657eba505b232f7874cfa485ddead0edd74eab6efc4ff0c9bb07aaf937517f4f926221cadacbf977f555a3702534a49cc95743b667b1e60579dfae2491cbdc449ce531fa050ef830aca6722cb95c0f1e6a185f54967288793a5f816cec670b14d6b371cbb702cbc94871120bfa76ec88f822f7795605184dee056aae795d60b497240153c496266aa5247248f91039c5350f6ff7435f2c583f198c1cbba034a766d3ed8959b2fb06a1e5dd72ecc1cb38050d517c35a9581ab203c6542981443080272e5b603b2a27526eda2a3e0d354e38789a9c4e1bbf4cf173dece645a7b997836eab509961f1c7a13c55b25a5f105219141eb93f67509bb7b83ec5e5ec8b572f1f55d98b334fd902ffd83d04180669189b071a0e88cf80bf731992d9d0601f3e", "98649f503a8ff744ffb840c5638cfaba69a137a2038ccf39f139ae1ed112adff7bd96f68aeb6b0850a71c594ba0cd9ea8a5986868008821f5cd57c5e546b67f80315ced3fa679a87fcc84b69da40db4fbba8da0045b423c58ae59e1b8fa13127b19b963d93d14e511c46254903aec771f281f8d11f8dac9e726356361e4762977577fdc01523c4197e25bf1d36dc263c0ef098f57eccedf4e45e91f32abbe3a278278e5e97d3a421ecc7b2ba456f09103c44f4ea268a843b775e50d2ab394ec96a8cd6a6719de054e7c65bbb088b4ade332e154d7bdcaa14f0b1046d1b32769301b88079808a4d394311f64813eeda171ce72442a3c73a4c963d0c579bcf3913b1f1634581b46da3f60a1fadeb82b26138f24555ac646de94f384a84f8d35a7b612ec4bfb0fd89668d7119139026c63a48ff3efd6475cc562f005dd3d77a6d1f4abed302311f91f1e44a50c647999f4f3ac97adbfe044748d45e9b4a7f78ca23f0034406de62c907f808d3e90ea87b05", "a8155d94a4313bd029b7d274aa765c42746357ea81ffa14a4b8c7b7d079122fbd95b3451eec648ab317bc7afeeb948b182e7fbbfe507a177904920bd73b31612785b06091472dfd3b400eb6f5a58c64603106d1a72e5ce8e7c4b2b7a968da0b5a5f42139cfd9fb80628f3603239cf51e2dcf0773ca213d16dd28d40358cfb427b90e1d241e37ba38375d57b8b50a03fb69243fc08b47891c9ae6c3a70d8fe73c427ee906f7198549c14d7092ba58048d00e0bdbec5512d4b15f59de3f688b7021a55b875641a80976f1a89ff3136e0e96729a39271f6de30d6f795e4edbf1934c23309973f42a10165b4cb5498ca04815bbe64e5a066351227de5770b6bff815894226166b9f5e2e6167bbb64d1eb6cf0eaf6de87910a14ffda8c6d0df53df0f3978ea5203462cf229537c14eef28a7b618436e6509b68da6f75411c7bb2dfd8fe62de1d950a48e5a0e4badf5fe486f3"],
        ["8a0848a568107cbfa21caab7a3f3324c3b951b48721de80832b816d5fc7de727cbf664649a9518908a0bb47bd7c10b3a9353f916bb1d3646649e6270cfcd34efb518b9f6fadabed455938fa8b4052d784deebed683bfc8aa80b4bdf92e2217bf8f7cfcae5979b60605e9bc7238be28d947c6a2cfee055b7a3bd887223e9bb54274d1111bf759356e4b5c957e6660b81c22f75147a89a53edccb9d8752ea1b86f988530b973b67f43188a2c6a315029640c6b82575f3f7592579ebdf2905f236ee09c7a8a6af5d42ed4e63038af77b90224b50e6b770523bdd5ff3d7289b6eac2e486216ce448554cd7050af50f3b46c6676eaec606515031fe0add1afc47e76f46777be0ea2feb45cb17370827ca6f2a01f5798b58b04730f324a36b2ce2de921516859739230d0ef12a7a18891bfe272cf3d9c7d08c873d819fb6c1fefbe20a57de456e2332285b990e21a8d27d06dc5e9ef1f8bf72e2ef891fd1242be4d31bafbe4b7bfd94fa1132c2e838865175ea486fe267e1ce4fee88ae3ed0a08fa0f4dd4a1badda8802b4a77cea0bddb67a9a380feb11b32f1f83883bef865287c483adadce464ffd39002660246a9acba83f4970d0de611f442fe41d5c89190b4176645b81eb1c536886be023b5e4cb46d6c4dd56e4dd690040e71649c9d6b2f508ae07d0227fabc844365203d1eceec5e1d", "b6bdfa0a9366965f88017b8c3567f6ea890126689596c74b56c19fd55de319cbe10cfb017f7639da8713da86eed7670eab5692df2f6566c7352ce25e2fbe91f9bda8a97593e5bd1709aaf0b03bb368c829e187920be333c993d879ba63d9eba0b733aa950adefad837058d40d8ace971be60bcbd2a2563e8598faaad9f322bf3dc4bb2566d032a947ed2b76b4c5f84a42fa30201e3641c2c96edbbc07c1c862423ab682a3974683890694b2110b1273c0c0c3359d7cc09eeecfdb7d8adece2dd37dacc6e2896c95118ec1c3cb5ffbe540caa9f080d0062357a12ecf40a6562003d01b011d7949410e0d6f0a3c00c54331a3fbfca9521ca71f0b18894e8c345743d402c3e323a7515f85c6a3d675663745193e7617618a4135ebc4d2d38e25f84895f822d1782ee74715664679c5c67114681d79fef8c1a7d323c8768bb9f446bb652bd051370a6d5d5814998dcb324d20a99ecd3fbb3a4018bf1ae6c4ef691ee63afcdaf3618697831c6e8e97e0963cc5853dc8974481655d0f621f3748e03b5990480d0a1b0a686753b4059958137a930fa6bd7c1aec2500e9dde4c75a34c2ed8113323ec89264c4ec31c549c26c7a96a2b3d89167bca2cf80d4071306c1421ce87842c15f921d7392d9005fd3b2995", "87eccde9c4fc9631a0b3c682c3646878b57cd9a18f4149c6801a0950492dbc59957b9c3ee36ece14c27af465826752468b50f74436d4f55247f7f70783aa2a16314c602ad7ecc6fdd206a13cdddf4cf4163e06f7b7c31c791a6b78941be1ebb9862fa8021a85200d1866cd811968a0a5fa3f6767c01df99c5d9f2070e740f3fa0cc81bbbaf53b718616b320dd30e23cb2c48266bfbf76571d8af5da782f226c6bf278fb3b1f5a8fa8ae43aa7841a468b6a4e4a70f853a27bb9df4e44a251304ab651d70f8dca8acc3cc72eae3dedb2962f84b227420ad648baaf13aec5049a96b7741adab649deb0bd7ef4323ec44ddc69e69c69b1957a408bc88bbef70d68e8060930aa1dfe8098fdcba7127944ccfe494c75e12f0ce1aae06fdf72fe68b06c67aac941814cacd44e70631cd919afc604cfc4b76489a4cf355ed978ac7e757128832781cb0dfbc0c80904705103f19666fca2160651dd795ac108d05354e0568643a949ac263e969cf814b2fc845f8e1a00eabe0ab2ad4ce8a2e612e8c8d0d6629a5ddfa8e54f87519244047820fa33651d768a4730705e7dd3a53e89ea86c6b9508cf82935adedac2e24a6dbfdddbf", "948d256d4d1827582ec762c0fefb6ff9460a974271a22b5197c0c3299097b3d469101d690d2e693f31753e82371490758f97273e5789e6fb71ba22b47c2bb4dce66c435201780673da53b1cf2009df33814bd0cddaad70f945bb275248588ad885e42b6e2c18b4050a3069332ee971db795a750bb980cab193033ffe07fadb52594b3794736e84e41899736c939eaade60b9f52ebd727ef29560ab800f26d18c3ddc567e181d8858ad59a38d4eb6500370c149fa522b29996f7f0ea42d24c7af498957fbb6e98ed48e0b527f0f1ba66c627ae2b11010e9a41289daa99c57ca44123e0e1732a354d30ed961120d33cb6b6fb2e6a60f6ffb1ac785d3b78c78a790e2da7bc8eead0fa38711aeef7f546fc94fe6132b00a27d0e83b524ab2f059ac834dbcc1687da6255398e6322c7d127551a8eacb2dcd5f0c4110ad2d3f2d7ff7649743f440eebbb893b7d8293aed1712a5513a8b1a187623a9373b8fd8d7273b3e5447fdd4043b22abc9d59cb4d74bc87535c37aafd5abc67bc640007c5630c87e8f68668bc0d9b7056cf5b51cb0085eb", "a46fb76b0c17f99a6ef64b38fb06c2548b14119449b43634ba6b0817508d3d9353ec95403d45e0bdd15e6065e075763b8f4d4b89665fefb2782422b33de12eb3476a34cd7a31e363478a6ae62f574789b4f393d46708d5f30a6195a50ea99b36884e0c359ea9b1eaf568005342f313a59b181f43768071562c0771bda53732e365cd8ce953917abbc0e37aa5f936f36f2463a5af594d98b958f8e51d9b27bb2f9d7251aa1eb9835d2ee9b27bbf70622b604b2b754761cd31dbb4557ed75b12ab0f162c9497cdef82497c4b41a9105b96148ef10000be7eb04c13f28f5b5b8b17ff5e4aacd208f5cb0c0bbd7f5fc12fd614a48bdbe19ec63c1f775b1f89422060f0db62494144b32f9c5e4d74022c706273aba5ff351e4fa1f479379acccd0cf2d87cc8d16426db772d485a3ba9f85b02021bfc0e853eefdff37a95b3ecb5fda21d2650559fd44d68baa5f9b660dc15ab70c02c343d384fdd6f57b3d890ec7221a7a28332fef71519ac984b908b1ca9c0", "aa250ffa6c2add8eb6d52d0f3089a5836865a1a7bdb210a34922f63f5c63e40b0dfff9c7823b90e7b210d7c04d1b2d8baf682e272834c885d0d9b9529a9a2fb1b23bd101876724b098ad6f72211eb2816e1cb7f42342699f70ab7660b76106b9aefecfd6d434b8eafe46bbcda61af2f58f0f1fbafee171ccc092e91d4db35840c8549bdcee5d745315cf0c1338bb25622c587b82b02ae94c9527e03728ad3e17e6a89026a76626b26067e5d221541e7b0e2425bde15b96a0425e9b23595ab7a8b5fa315ce1d8ae15af54f7a4bae24f590563239a39abca847904ae7b273026fe25302aebe20dd6e5fe513f4bd2d78d023411e046250126dece7adefa74b1e26521988eeececbce8081726adfd2a37719358dc8f5f491cb56e6d40979a73cb40784eaab32e7ad712f62d871b528d9c65e4623c0295369b3ddc976440914d2b3a2af82bb0173947b2c04ea5cdb9189a8dc"],
        ["85512a354f838cccb7492286db8fe1e0ef102674f7aef768c9ff4cce1429298568de035ff97e69dab52f442808e832bfa8704719c589f6014b694d986d9489519f1b4d0914b99f60bc1e5b0fd6a64c1cd5076d7aaf6fb47a39104c0fca687d78aed6fa1af176a02437c76e9cbe8ddf94359b1666c4f1d44f4d2199e67d61cbdf04f9ecb462ed779991c5c47827df07756aa781344c81143869923b98e9e808fa6abce2236a4f99d8f517f6a1e83f737a5ebdf74e837225ad68208231f5d3f0388165ef5d353f9211b6e374ec7344b9e7422a5da9ccf84169e696930bc8e3bd2972cfee156a84025e801ccc12f80657c657605d77a709d85764b873bbbb2936597480d34e7b8461c87dd51b407079429b584c21881bcc4a90959e025487dfaa90a9cb62d13508f39229bce0f12c64b7f468c44fb6f09d54fa0eab78fb18409f13ee83ff448ac7002ac08665eef98a0108696fb4a59923eb29b078935629d9f60998c1e9eb78bc8a90cf1266f105d5baf249e8295ffa71087384858fda7fdf0f76a579ef2f5b6011798f775d37dc71c00339bf9a70aad0f4af60053331b919978c7331cc82a50f4793891a7d3a9b3199f91670c0427164ed35084c7c50a6a8b873c87c8208fc5c0f6e15b7b49ff8bc0e6457a2c6ea052cd02b9a500829f871f0a9e3bf8a292f031d51747cfce052d9d33c", "a1348614d782513f22e9d19942e42b14b332c716641e81989c09941c73cfbd273348423eed11da6718472df23b2856118525e03a3706e5c23e4d57a49865938d4b9e2b0d85daed0b33104eb0fe442a70f354b9e03645ff8e28eb8a81abe9ef1eac485ac303c2c72748d70e0664d8e6adc7b644a996466f3a01f71254929ba355e10d5e74676d777dabdaf8bc86d448d457ab4e590795d1d91f2be8d6f5a3480fdd5e0264cd98fa22dcadaaa001f383bb2bdf138b583fce41e22fb1250ae3a1fdbea2807b5e31117d7fa156c84e6219b90363ed848807f257027e4455edbbb69134f60be6dca17b72518b9052ed668a9c49dd5e23b18ce2f3dea3f0206b8d2adce00c0c0edc1f40227bc58c658fe8714b641d918945f9d6c676340fec45a124e3112b3768d69b0aa143800a75b15d249053e46c4fa01a53f1f7b9e30c8b717e37197a06aea43084ff557d17f387b6611a69058789cb8920c70b447bf5cc98efdb24739ea0c47babb3a88b82bce34509232888ecb044d59ec87d3c03c8f83fe35adac0a508ce8ea5a3819522080e2cf9f8657231a8d4a051b0de96b1e440b76d984570a791a120d77e92d0c61a45d118c82143117da3ad501b99aa3d9f69b4289511a6b0180cc9412431cb36cf70633dce", "a272554f2c8be58f7fa31154ca069cf9762adf6d35b285e8a7e8e6efdf41566bd96df64fc2f8bdd8da084afc0af874eba310ad2825f279743ea2e5a0e835c94471ddfdd29632400d0ec70c99a8de05f58db6581debb485dd7a91d5390bc1e16e910dee3f560ae4759ffe6ea55137b4b6673d57425ed6f547eda4b70994141eb1a8bca887caa820eb67e8008f3456ec5554ec764260848cf3c71015a4acf78ff7919bd6fc6b6d5b802b09d50f4810cb7702df7d2fa546c1fc72aa37608495dca0078fb214863c180bc2194964e14716fd32c2ee10348941805dfb9869b978f279409ccaeb82902e89795af191fcac96da52b81406b47191523b8acca95c93f454f86fa2f1d0921456edfe3f048c574ced37c7fab5cf5bcfd12acf913ebe282b5d192477517dbccfe7c18e8607c39d246141ca0ecf5a951a9447d56e74c5b47d12afcc049b1696ebac27d36dbbd8823d4c0abf7d283da53dbc6de1a9753ffb9bd8eb428ec1d8e283bf54a1d4ce8b4f5f3866fd3de323d7555a3ae2f29a74a3220bea1bb54b9dfaab4a3f914ba1c58509853b90de173b39a890e799635daf253dcee66db75e9414c19839f276d3561778a0", "8d78409776a7e9a61b85f7880b28be6dbbe9c1a78b4d726bc9f89a2c08a152e31797c6aa7b95d95c9e52d4d6fe20ecf2a9675c8103071b623a58e3d1814a86a75f72801925a25b8ada026d68b486feddf7a3bd0f0edb0b9352cc732db1204fac83e3777d6cc14457f974e5b8b088f6cd0862d08c80670987727e5143db0ce625d5d72a022fa5a1ef18048c18721c74e1509f603e4d676eb6fea57732b1d3caa8734a9cefc26841192996136ad428f0da5e5f5a4b5a86b1439fb4578c740016f0a94ba8c10d46275a45b03c79b0c68dbd67ae6c54e2ddecd282f45fc48bb94232e4885a3076f6024f139dbc7a2b5cabd03ce500a2859982b2a9c562acbc4844d857c13bade8880568592f4dc2ddf3613c22f14d171cf43a6c698b131cdf45979593c876d4917a85b1e6c2ad30f58dae8f39b9f782009f358b72f5e3c223061c5f2880885ad862f265556043a9d0bb79493a6c2975e68aa566f3efa172dbd0c682ca9b55dfcf01da964cfd5e48466f2b1d5f0352cfa4030f71939d57c7c7e307894206715ef7d3fbae6059e6cdfaa4d8d8", "8d6ff172b094d2bf41e6a159825e3e82dff44d922d4fff99249d3804fc93bbd295518ae513fd52c57cd36348704e728797784630aff41d19a901a3392fa2f9d02746b97b90f1ed39cc4ab53ef8f0834d5d34790a64312b4317ecc2245612c8cc979245bfc2e004e5a525f39197353df9eaea8932f0a02d5e1d681e745dc4221cfece919723632334dfc36e573262d9112279efa8a950ccdf87da70e124cd73a28185185e86c3f56169a347f988ca1384273dbeff37f4136b40b2747c7964a7d82d11d4703d181e9a543a0878347f2ee73794e75361d35fbd4d0e1406f0878c95ba14bd4c9203db364d6543baeb7f3fb109e0ec761e6da3429b5832e501e8e7f661f54eaadd75497bd9540cc5e0093899373e69a6b5dd80dd399534cc558879e8a304b0aed65497f0b6f90c5a3f1d77fb63f00e29533290a652d47aea5ffd6ff63a8d2834db0bda4538e90daefe8fdad157011fcffe2aa30b683db72fc175744bfa54da04ea51a22f53e79c5cfa94a86e", "932d23e8092d1a37137b5be675b5c261698b3884729517f7c94f5d9515f8fe5f7d7083432e70dbfd8a285ea08426422ca27bd8771720bf59eda5436700e893d395a9197ee8650c062189397118f4ff0f02e7956c4da202dd3e19ce517e3f1040a84ca5dd9baa3938144bdcc8199b37f5fb99778e23862d69611051333e43252f0339b3ee54b5b2dfdde92ea654188bec0b923b8b2191e495e42df3ec339479a4d4f10559d158cb686377124cf39b1813039deec1ee8610b86524b6197d9cdfc5dae4884ee1d1b26532a75dc950a9bf1d70621b99b5381790d829b49b81dbfe420ebd33aa30dd80bd0f0837448fb83b2467b18f045e04b7d61a32d693a6262df1f3adff38f094c126ffc85f56119a2c3f61d843c02a5b779f4d8871546b48b5ddcf9dd65b2445f0286826edd60ae723835b638378f2ba354e18f2c7635e5d18fcd7dee400d8582d6c2b36d244c3567545"],
        ["993154610a716e5e632d1fdd736547b8d91844f1be15e9812dfac144d40642b1734fa9ba8c451a308af0e16004ad76548db7166d0d5e90a340d053aa3dd3ed838d2100fe8e3c9c0c1482996704a699c7ea996d193000f8190857772c0d322966993db5f2f12143d22355f15920b2b11f51e7dddd9d31a5392819b85ea59958c2ffb6dec26e0093cf7f8885875a7685ad73a30cb7491207e6887b70c5890db77594cc9552bed15683a4506cfe5418408f0f299e781bad190e8996a0973a48728c0638fb43f8d69bf20f5ae99c9abc764e738804c9c0beb359dcbbf8183f11768435976220d7974fed1e3fa9dfbaa4356c1985e3baade8fee9b3d70789dd8792db9429ba7b04305b0ee84f37d2c3564ea52e9ac77b55557b3f85cda20e9d4a763ec94aa298ce6623a004e6b7590339f7643723ba0516edeaa5222a13f6886235f415c540c156d0b0336410a1605d6559f271a4d65b66ff11b4b8b0ed1e728724fbe21f4f4762921d4649d5b6de7cfd997b339debc7142408d4e005862bedb81ca43884fe3719b77e7a4cbc786d8c30b8936135330a5d65deb8c9bbf756076218de78cc6d01622a234084561c58039297fd2200b4730832bdb63595c6311ebdd8c3a87c26388dc2ca1afd9a5938619748b96580071d7a822052c32abe9b9c939ea2a5129030f40c78b380f4f946d24a32f0", "b9187ebc87c79ffc3a2782ccc293e9a902a2da6c96e2e5dd3cadfdcd44932c2f6bc299129324efb32f33881cf98b5522b59e12069f314d50aae4fabc92cfb32624f25dddd56124a85867bb81003e480ff5f7aaf0b353c5b046611ac73d1c6faaabdb98b8d7e838b3f5079aefa957a1a6c78ab0f28c91c3a0bf30c364f8e0ce4b2dca963d5c9cad9a9fc43e11769f4b6c3dd54ad25c06d6a136d7a00167476c8b763728353ce8edf3b109240dfcf6bb5046e5a5961588415ec5b670c9986bf9a1082e3f1ba58c65562ce54e47f821630f0ff8b5abb178b3f3526870a18ab08158b7f9c5fe81a64c382673f147507614ad1c2e2417972d313ad29cff39d7d05f90825523f360b4d682b9d2fbaf5ec7d694180d7aba2c9b0af046624ebe652da25c9d70930e7a39cf8a2e63f96ed5f59f026bd4e132dfa01d7c0f48a89e904fac69f70b526a17ad2fc5872db4469231d3262d6aa722206656a062653f00da87505145904fcc552f03c6cd7dbf730d3fb7632634ea38298c94747481e25cabc3028228c6a6d37bd8effd15bd7c88be1205f74d8a406803ec2c5b897a7e226f0fa01cca211df1061de0d07a5162ec23b44c0202131953b0f8994b656061c1095b85525727c98152ff1034d5f8e6414e1201c5", "abb157cefe05034ca144987958fa67d25981959393d258321b91fe9319dbc5e49a3a943a348ccab771dcd7d788679816a08a1fbbc4e9ff7905aa21259c06b7746b738f4360b157f01e27c0ef02ff4360637ccf5475b9b952259bdf7d3ac5cfa5a58da5222e78bf52e96a8d65cc72af72e3319b1569edccee837b2d94020aa29fc9a4a0351126eaaa136ed04dfc45277962b7a5921437451cb7a66b100ce94afe99b39f734e85ef11a5b3b6563d8ae13e38283628a27b6a83f63bdf2245fe3b7ba4cc52862fbffe3a5e9f41714f4f4cef0d9a8484949fbede71a805151a412edc8a2401d84d28187f9cd37f4d28f137da01d3d73ce35b152948d140a6cca9638c4dfc020ae596bb96cad45af2fb6f455d3d1c0c9eae5048f8e97f34cfc8a31763789fd37d403081764e9512109ad5d3110e9a77c7bd1532b21463444626e66962ae54247c176e0bed7c502ee094b9087936f2168d81e1efd1f2b2bd87297811f67dab6ca3756d62fcf4c79619e9bdfab84805b5f9a1f4c2212644de0b0da46e7dc33c4627e81250fc657ce1c06c1461e215be3f9c1d778b2f88ea45a886a5eab4d7388603f36c3d4d580a3dbf4f73d7b4", "97eda37b430601a8004d7e62777b3cd3d6ee9f8006bf62d530f72bd9f554e39fb7189a1898aa089644c5512fdd9fc8e1a79c7675308aa37f54c858e8b48ac30b82b5166a06057f9d3bb1afdaacd54de0a23f53bd5660cbd5281ca96ba5f2a9b3b4c65e2b17c535bbb133702f8bf466ff8c499ae49983b0bbad355a6206811b09b2077acdaf862b6c0b55d333addc260b13a155a868e1cfaf8732f2f0d09f81a0a558332008d46d527b2a7968b8dcb9e56b3bf8118f904b84e6cc6d79e382dcd32dfe00a243bd13a1f86a6e955b964ed31f9f322867dd56c3fc5c1f26d5cb140bbe037e3fd64b2d9b82e8aa27969daa8d057399949500c8526fdc159cd23ad3e23d3d4518c76959d376bc8d94aaa6b82c1b55446f24d41e7cc0f88f80278865d74ec76c62f52a71324a2e43188860be01668b65ffd68180ae6af1085f865e0acc8fa3f38b32a409ff1a303af21fbc41ad725857def3ab1331e30e0828b6ee94aed2674d22e15d3470d3293025e5b7f6d84a11d1b0133b3d8b7ddeff5825ce7d5f61e720022ce4e61ebac4a71a1974f585", "b0028c5650c2b8f0ce4afb66110c68e6b6ac895ba80ac5329edb3dc3b08fe16769b1cf080c5a755154a3a094df88b4dfb62db59e97726db1608b7cacbcedaf5ac06a48b22569cdde2c2c22ab41e9787921e3c7a0a673ec47c3d592dc53cd7612af294958fa9a86943c19cd5b24f7dc9a15db5c2c48ea8759204a57b1eb4e73faa245074fe0d0c3284416623c5c02d4ac445daf1b298f7dfc40e106c370004f5d661c02e7108306dfd9f8519190ca26b6417abec39595b0a4e84eae909fb18a2472a3e4be3e4bc070a348cdc497de5c2d653910006352f48879918f8b85599987a2630dcc0948721aa57283ff35e01f9a533283578946f62444fd2d8a5c7d340b2c95b217d2dfb0543b3e87257092a9af6f6eb7d63440842348b86c354269848a6dbdc9b0a86507673b0b7cdf1278f89d1a7a5091dfe4112ee980750703c89dcd62dbae70975de3bd75679b546888541a4bb54b5d3aa4f7467bf98b5e1b79fe3e0ade876a62075a6ca972e6a6f9cfb122", "a997982114b77db6fe5a1340998e81ddebb27909078b340f82086fb543426b30c1d3862433b65de949132c20ef171b5080fdde99196721d3a091dd309103f1392baf8ba293d7249dbbeb8e6731e2e1a0e35f070ab720dc7a6000ac7ac11252768bf214094f884230c635eda925ca21e758a5b5018650aa7114b2a4237856dde2ce919d8f67130dc95a0cf80a2b10b6275c38d592b9f62748a20b0c0ee687a911afe22b696724b8b7119045f15944165c485bd90e4c48edb4d71bc3488a58a6696e7da87612bce5df068b9e4561479a2e164d78af15925e7fbdf28e0f7d2f22ccbe993c4a5aff393b37a19ddc50c237d47160b63ec6774d44d243a782fe400857fee4cdd526988add3b0204d3c042331356e560320e957cc394c009496da64598427a0de25883128cee59eba0e87af8c24c54317dc0808a646f26df53c6329cc65496ccb14684160ada344455e5e48ae5"],
        ["821dfed3e4866e941cec225e8df79a03438db281eb5c0358d6a50ce5ab73852a39a71e2f3194dddf6c02b5f4574d12ab87ce234a6ee73a3a6cacb4504485b60d0c01a9d20050834a67f624d38ee1c15218e3351dec1208375d5949a4f564065f8b748f50ed6ed6c9af37f0e979758f67c88d792f27a8ab14d9752b3b0535c4b6d5013196a129d0c176649de44d5804316b4f208983e20a7b3cebf96339e0fcac0a2548d47222e34a21a0fb6e6f22bd4d0a99c090d6f6d427a191d032d5119c2c6dfa66da1322764cfa8687b9c63a9c005fa4fdcbb89f02a22a60d1ca0aacc97c83bb053d5176277851ae8d0703b7abb226920b92d8393d6ca1a92f09e28ce8963c7fb0b4ed45e9c27e82e53082e4e6ab61b3adfd716064b520317a08fa90124358c6a163f3976c46f96c8e6c723d9bc34598c14a673f7a55e6badacb04762e00010c4134bf8d73fcd1969ff3d40fc56337c1886bd22810aef8ca154e2fff616b9b81b85f2301f8487192536d6c29b22306ea684281a40c60606de319b23bbd7673d826d88b1ce8bf78b430e7c5f20472496240daaaec88dd4930a9e786c5b87576b980a222d94e21d71855f188f4aa737266052a95f7a338e6d704469a0da0fcc658e594681dec800c5cee663ec64c26734384fb5dbd334f3058e789c936940f74e14129bdcaefc04fe15d9d77ebdec0", "b45b335f7241413213bf1ee11e37d6c2c4cb9177ceb2e7a817fddb25bbca6bf400d38ff4e666c122658509e7f85ebb14854d63ea0f2af34594ea57a8aa206417f53bdd98961fd8bb6a1f4dd67ccefad9b29d890d1cd592f616b397d95a5b277c9934bcb4e82fd2c4c2489848ea9dd4c94fb91f483bb2f5655a6447b206bf1009d3b6aa27a678d5acdce4bb413813c4b81bff80764f45ad85f8961f2b967c04c0ccdd498df6d178639a246056880119333678b314c115cf9ea2c9d56b385f7b84a2bbc49623355f969f0ba845e5c9dce00a50ac8b5c88f49b77a9d930a08e20fb6884d7be077b38bef64eeb5782de459851f70e77a298945383c22bfa3c0d367c6226c688b0b4595e59ae7543b380a533637eeb63958001655debe8a837d5ffed5476c9c3253d23ebea7079c17b654d4a3f39076d88350bc1dae6eb67f9cd8d9141208858db0bbfe4ded888b6b2bca4985a7d010667729372a6e4b515da8fcfcb5d479b6247f255ef6f20ee905b309328701292f086bd28860fd727c09aa327f5bd1bb5d3c79e5e355f8efcbdadf7c1180d00c762e31193a4389cd4a582389dbf2cc9e8def7817d248d2d459dcc82059809a227e94fbcc9ae7644f0c08b666f256ba96264acf991393b7344bf7bf765b0", "ac5244cdd0055a9c59a6540a6425c325ec2af174aa314eca70a709acfd2ca33cde5ca6579b210b95b865705b402a4d33a5b094458f9412e4aa632011e57481b31a7d5e6990176923b32feb0c426a26474e3b78a8de50beba960555c7ebd364818c87a7f8fcaf09964fc8afd835c4bc8a3aa4ca72dccb707341487fab30f24d68af1b9c2e92925643deaa9128da04b07c3799b854ddc04e8dfda794a141950f55f68bd3f24f54dc8a674919781cf75a021c882568054347f29743dd7678ef680319ee691592af591c537586028a98a7a566ff88811eb66abe4a45a5a33255b41cfc0c5a8b96fef35f56133c1d40ca927757fba614936b0cec5f9ab7397bb7cccc684e119383791c72e423a85566f76cb76525a4feae2ae7e7b2c269cecedfd04e0b69a9fe503eaef76c46df14840862054e8b09bab9fc319edac544c1e2ab72a9069de9b9dcc8face6a79725f8c73325d17acaec73e94a6d3c26d73680ef2d19648ef35ef180131ed0d66102c0e58de8f42d5295c3f5d37b65daf274faa98138aeaf50f0c875b1b7ef5b3c1a7a37faf7f57433c3a20291cc9dfd5daf83f264d23f5235edd3ec1d63e9bfce11c83a07a93", "906ee3d4d44116ee3d5d405213acab02f28f176716f3e5afb4a5d0bd2c9258e936fa625fe70140c4f0fd831725b8fab7ab3264995f23e068221bc753be671d11b7c012ba78c373b3c4c7763ef766653f0fa1203bd0530bdd0aaa208c5d986406a7cebf42ad4e0518f0ffbd25101f7de5f9985b0b08163797366af70fd32d4e647d4cbf7e4b2bc75cc5387753df0b187549ecdbcc1b1fe766f53945f5e58a17bc5d469090ae74b23038a9ca63a71c2d9713acbf5ed7290dc28cfbd1ef0b8bf25d5576e0b79706989d8294707299a41d9f6a3afff1367c88b5981fb56c07ad9f54668ed5a25f4f0cc54e952a7785654b13511b886ac56fdb22bccabd16975a5bd57d10b2b94f28c87801f1499aba898e433833097496efab7cde34e86064f86992fbad79cce935c30461d39f998adf1b844a99c049a1ae6dd2140260f154a37974a181db909fc3bbd4a2c024ff993c053c114d39515db6a2f01a9d7c1a19219115e9e24d6af5936d5f11154ab16092ceef663e4cd2172355ef96d9607801d51191fdf0c25817ffdaefea4ca7bc28fdc658", "b3bb322cd4e7a2dbaee7e5fc266d54363f6941011d271ad7eebc9d87acaccda5731bc9580b2f1eabebaeff3aef367313a04a1c10227930d83d1a521b2fd50f7592d1cb3204a2175cadd218c65e80303382374341026f72260c35840df75d3a908ab0af555c8bd2776e49831c076978faf541afd16103e75294d73b631f4b975e08becbe44ef3ba6e18e836d782a70b186d83bcaa61eef0dc02db1bcac01165da8eb4f023005888f2257b7ceb059535175493db5c3ff3d7341aa678885234bf1b246b042bc3e8e5c1938c5f032555aafe62a4a05c6b34f6f10353419fa7734df45cdf623715f2e9189c0099c08e02c8126797b6e1bf9841bd9d2f0bb9ec528a3f57fe448e45a0a83a1794efc0f435ed5e07eea49c79181ad98a327099a10ffc3008a35ecf2ae6942f9044638d41a2ca5f2bfe5288a4c6e72cdce05cf117cdbc23c28db1229faf25214d2262c8c099ef4044c35ad1dc37ab0c8e246b8fd29ac9cf67b4e9c590ec79b3fc5a3ae0a8360db8", "853fd25cb51a95744960a73bc83d760eb0f758e6f323d526c8d86e8979b80adc270d458acad4d619c25e3cfe8909090bb0afa3fef85c24c8af0c72bbad976b3c8a0312141cf044617a549d7e749268d5e88cf5950b543148599917adaded37a7af0313618ff2ceb7066cea29c007c04feb3a30b721bcdcaca7fdfa8ee51901c16e294fd4de51f900d998dbce58747a9641fdcaca639c552546a8eceb2970c6be86eaba623cd61cc39eba64c98f2c9ce661b8babbbb8376dd61e0c3bdd5b1b4f1c309af2d45cf09c22fdd4187a0d0a91b2dff9b8aaff0a720c4fe2794978ab831d3ac587fc59836dc83ea88ae992a4caa4f26890c571e2d7493ea23457313bbb34cc0d2f5a1428c62b4220f5b36ee1dcb3d4ff3fc7b9f500aba991462227e4f072e96ac53c9efb28f1c6da01dd07b87aa285bc98814bbac5702419781b52b589be6586b5f75be80f3cc3a360405ae02c6"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header =  ["a3779ba1642e5f67170ceb5adea51fa8acfd027f3dcd2a7fc9e605b598decb88759d763b92d9c46a94d526f2225946f9aefdf4b998386ecfd4a8e28d05a505198d95b88e4826ba74d431ddfc78ea4dfae2abc54f2635e4839a948aef20119b4e8b8d376c25135a71318a05820ec0a5bfddfb927f3d53db02dea21f92454356dec08c185ec0f7ba914dc15582e3c7214f3a83e4318ce017d9489ff85cb7a3d90fca61fc8077701b39d7f666c099f579d73fa1e3e83f674fb248cd9e86889005f50f219b6bb4f95d781eee52bb4d618a6c312562899a1cc89a8a8ee8a25d95b1aa37ffb8423a43e05ef88efd9471081f821c1858f068faf430951833d95c0db1e964c4f9fac192d03c81cf791849b980a11b73364d1908f65d36949c243505d06e756c3ca6ed42e260e851f87d4a210a962af00ee7bc6108d3b8c6789828f918b9298338adc0be25ea866ed9ec6a831ddc1541cfec44be1b567f6ee1eb2a48dc284958560d8f457a8ccbd5ff26787e06d768e50982a52c04c513dcfa1c4b73f2fb8ba81cb09743ba6861857f5db5e07d36504bf504134d6aee8b504fc67436b4436be70f8a1c2a7441060ba39dcfc55b342864f832be27782e89bfcfde289696a257951fd70895585ceca045240c8b94e345726fa509d79af63d4bdba13e8df428ae5165fd01ec1efaa1998829f729835b", "99a145c75b0b9b7491e939a7d351236282125d62372c2ad91817c91a4a522a3561950980593978a26304f56878bf392ba2141a1c6914c2194372cac064be69a6073d79be82c32d9157e6a6314be44063fa776fb9ba905e27c705a0f3ce50df34abc5ee8f97e21302d04fc10d62c858059751c147029c211859000c936614e6e09bc1fe5cff059b6625a529b418e2ad253b6422bea91aeb16dd1418e396af7bf02ab91f6107a876db21e04931b83316663fba4ead1aee8ea29d4e237956c9539078ae15b1fcaacec968cc16c83fff039f10472c5ee1d32fbcb9414eab05f1bea76e1a6b21b4e2275326498fa1dfe6b3651c2301f6373c4dbcfa37cfef21bd1cfb781a70d939ea7598ee46e273b794104f0d2997d48eb6986becce5fc3a5002fa440c6f1a0b7fcba87ce1859b218e94fc94c563c5d081109df495fb013e46cfc999191e5d6282907671102d3f1c8797e5522338d250086e1795db59664ce5478981f47a7ff7834e7f7382f3bc6960aea392e54cabf9bebae9874bb89bb5342e5ebc64aad9ad63ebe8c41d6bc44759626800a9afd5c6e2cc0d2dcf3776e2e4250a03999f7e23126000247ef114747114bde5a1a6567b721d7c07e6f5e60bc05b6878ce397e08e0f7e12aa5bacfe11797bcf", "a16fd6666c6c9a31d91c344adf804b38ecd84b0b5a557e64f0253fafe8c25bb9d01d551da64727b0a8db04c9d616a7c28087a02b4ae77bc152333baa4ecb9aaef790f3dfab498b7af565708775b21fd771e5d73c60b54f435b278f895fc3f154b0e42c2f13ec526639474dd23ad95fa86a008a02b57b056d14de6f752170f75353240009c27addded2537797bd228882048ca58ae2b3234006f0b1d02974965b60a17c7cc3898134a6cafde7d40e31bb2756e72d368045475d9812273ace96fe5714a3064f338b34db6cb43111d5b8cc6c2a4e6772bb55ff5a165ce975e2e2a42027b05c702d8811de851dc1d6cf56ce5103ffa4979a6d4c1d271591815b6b0696bcf885f7309fa45bdcf1629178fa1e0ad902ea618ec273392098500f03aeec2f4c1b751488d8ca4e6f4f1db659d4b23914e06f8156dde31ea4336425f5a3795d491f808fa38d821123b41ea751f88f52a41bccfa57b67ec89f474329d323266f283fbc6aa043572ea885f04bc7fcd870973dd77d2746a687a5823f3ac64d51df4043a717debb3ac0aad07b89466e032c685ad8e7b761aaaf26ae762cfb388249b56d3441bd113e413265246a3411f4", "af5c85d7e17b7f348aec91f6ff1e6b02eba2e030b55743a134b37591e19a7ede408f757a1e930a043d77939a24ac5becb18bd66b64e9855d48f53d90203a8d8338b799443d100f2083ca1c8aa771ec16659277c19f1290c316cf74bacaddea06a6902de4b328edafcb6aded25f04449f75963373505bcfc2b20726ec46aaff3bf02c8cbdb3db87252cc267d0cce193195916511a4f1bbf510dcd43e0bc26a6bc98368f6b32ac10bea57909d7a2bebc013c1bd09c71aba3242914874432bed6b67a9ed97c52ccbe818a2634909565b53f164d242e9a2ec7309f8ca176417f8efc12dadf5b4f3302742e0aaf85aacc3ae844e93771f8c3797b8edc99c8a30893fc28bc7b7331a3695ea4b207dfcd312e205b9460aa5ea3ff72abd919b7adde1f058df6b82a14251171b56cabb57d9d937d53478cd83878d2e810a91fffbf3c8ef16424f95e3940c23cf4df54532b4868a03f835da5e6f5da7ba214c2389b9e0b281343d1ab21271bf7b0a1ee04687376d64a7615b9e0ea4e5f0b65cf777d042a4c0f14a4ce951794d77c35135fa95b75a3", "a8560e2f9c9aaa3a39f137cde824735b1374d989728e6dca42663f406bb9adfa365d9302313da12dc1fa58e36e96d819b4b3b921dff74fa850d4295d1d925826df06b235a1457000fb4f7c17bb533dd9c063e88e21421e60e3bb0e3595a438d9a6c2a4949b07a283508c7e8749e24868a4ae964a2ed33ee4907fb0effc86195a7f8aa194c59c3f191da094cdc69d937d72784dd493a6d54c4121b6b810c651aca3666f5f4b9b287e87dc7962ed34c56e20fc53a579fa1880261fad471e1dcd304963e18f74fbe160f9b3341e2c7cedcd3986aeefcc8f8a2a866aa8e2e0c68a1eed348ddc74d1ed0d712c9f0d8f25212523f31f744f70466bce02a230744c35d8f8dbf65392884628743ec3e15e03cbcd47953dd2cfc04dfe8fc4392af2413131e837775ce568e3ab4ff24ef4b209386e3460381c1251a4a024f1c977b6e82088fd681edc6910724a6549180e3e11f8760fdb12f455df3115ec578d059c8b36f621327b638f9bb5b3886c77daf9552e53", "a74c6d5a7eec606f49c74d48e0b325204d31be42d63b3ee73353285952565b71170048f3d773e34b7666c4a982f8fb9da87957d5e94b7d53e740ee7a20245fba805e41fd8561dc39100c81c1ab0b8feb109876eaa81397324136e6989ffd197882cc05b5b0e59c1a9754ed69fe2f258afd682761a88404025f9631c84cb5a1d9f9c2c7fbbb77ce67218d1d6b3258aea5026ddeb6326889a5fc0683adc612244ff79e7b219f1522432ee1b7b2826485660ab80185ef598096a169ef208c681d1d25549e9d8c38ad790568623f56ebb7d90f215bbb3f569e8a9084b9c89cea3c872616162292be46cfaa9db190544e9c1116118a604327178eb785504e4e12f60ba35057d9f360c8239c86d4c54aa9ce812da944b8dccb688684b22c8c2da3b2eeca798addc30a02c9971c9263338a3e0b410d06e9554c52fd5a85a318c7cee529a10a23e53487a215891210cf9f535f0b"];
    let expected_proof_no_header = ["a23d76bd85821fe22352bc2cd4e7aef08181872324384d97efd5d6c38365bf4c1395abe3aab7d456284085ad23ad28e68143504992b6c1017bc49b379dc47f8c2ad4c68ce8c59f52a51a9c27327cb9974e9efe2179e27db1d70be4d53a445fb7b6f7e79512af03abcb4ae9a9dcbadb109bfc49e4ec3bc0da9b619b8c692010380757764b64ce0265adadebd37fc40e1f271ba5bd2268dc4c727bded96ab9601316a80a12b65e9f447b4849f6014ce8c504c202fce091ba54bdfdcbec9cd5c0bf6ddaf116864e7a6363c393a502b8ed676c5af4ba9ba4ca73370b80573fc9c408b81e142b0df9be5c0721f06909b5ab4e1090977f2fa54c9153ad85b8d8b797c1e222b7558d7bed3683f579a01f4404bb3596657ff90fd0c4eb4a3411c98b470aba1ce7e200771cae64d1f9b43f3f7e453f2fe721aa5f765d9c55d74005e223a2becdb4168f20bfd6bafa0d9a61a74f872e96a32e9d5647ab77299a353a173a7dff5710ddc20b5e888bb546d310ce183b044465b9432d89d6e9a02ec0fabc3879548f9beba4afd6ce5174521b638205bd22332b759d8733a090b022f778938fdd95d438ec04f296e971504b2fa22c290b2cbbb3cbcd781a73a95c4785dbe240b079d02c31753d826abc17eb997bade5a5208d8c6f25c1d65c2c02fe1127e8f034d62283995ad78f8fcb050a96f8ecb0a3", "98794b539b58f890b106ebd36af3761f5ddbf05a3944a53931be3ab6593a879d03e2c5367983d3d943ae801e373644e9921a9249783944017b941aa9ca27375280fd23a78565fe45bf356e6bafa7fa4cff3dc5b7de7716c4e235d83c90d0f5e5aaa04e136f75b814148b67fcbc6fcc6656e0715bae3f11dc80200a75abbe9db22beb7a0a9570610b54716905fa407f8d4408ca65cc3b807ebd91ef2291e00669e5c22895957e65b430ec1ef35cd6682c4f5d7119665c88dedaffdbe073c6ed6396b50ef05c65d5d26bcfc4bbc530baa569367012ac3cb2e18a92c5a3483d71459c3d2a1c2b7aec56ec58f4e3d9a588924758ac1d36562b2ae17ec819e76515a3285375a7cee85f8fb018dca1fcdb68c05b6df417140dbff4a80d5d9da936779a383dcaedb4c88d7bfb21bd44aa8f32a20f7b750048c24887896d21ca77ba2f8bf90927421a201d134532e1e5d0e36239360b99603999d74100bd6160cdeb489fa784ae68a9687469e059b7abe74d3d5e07ef8571fa8c4d2d809a7bbd9caab20852623370d7114cbcba290fb2f986ab084b5408fc86c1922bbe6ffdc026fb2a36b79f7fd5d4dea5beef7d535daedc289f049a34507b826a0fefc769667d497378e318c4eda2e571d0bccccd85d9008067", "aad32efdc33a3e4975e5db40d62618226b7af9be4707a3596688e15137c944f0718522d035106effeb9f82644aad2082823d8b885ecc8b31b6ed0801420ef7faf25e85c0cdad375d582d76fd0ac9a2bacba6772fcfc969d561ec81ea14e8f149918b6814f58e83330977cb7f3db95b792f329a9f32a211a4cccf3f27c57c6171e12cd19edfaadb369ceaf63749c7dc241664519106334cd689d6ce61c4f91a318e76fc59666c02909a32e0ca15f1ebfb7041d5ca61c90dea79168248303b0487005d024f35bc09be7eb7a953ac5299f40bb6776e9b5697c13889d30e9f847d43166df115572d74a041a41b7f4a96ef8e3b9e1b881dac13e610ce5aceba98fef814d988b2c09748e67fa021ad5ee13752362c10cca6df5841772c360fc06a7ea51deaf0c61e423c45be1c94131eaa6a476951a363b5b1c904970cc2232ab9584910e69eb39b7222fe80f1e5b22dcca1652c8f786b0ef563cfe6d5a24f3f9504458a510130f50bd18c0423eabc739ee37a11b152d4c2aa5ecd2cf5b44bb4deba50149c39d5f078e92625cda813b2e3aef81c6c8a55fbbea43617b0c783d88201ca94d9e4834be28c0a12c90e9255b0ab22", "aa667e40d30254afba79fbd02daca83a85dfb17ba7885c195a51b78ab3e21fc1d9269f9f4846c3dc9768621001ee228b8b1720baeec0a88d6850ce9c92870e8a86e218574d6df155574dc3a5ee08711119449a7e250eac3390110376ae9a693c8faeeaf01d5fb4cc92e585bd2287a6928b329d61f0ca0e8b0a196ee8f40bd371d3464f3415f2b2a3a969862a3ebb79a0192e1cfd351a66228c83f4a93994da64a2ab93d71930da34cdce1616d5608d771bb54e0788858a952c1cb05e410eb65db400e54235cdff7b77759ec11ef396b070228bdf6277f7ac98c41fdb9c29674bacda1dbc7dd78be6e0140e18ad0e0f5367149ce5e35e8eaa83047ed3d7940e428b3086dbbb9b4470aa7087448be7413f4ae9aa82e94d0a60a40baca16c5f151fdfae03926228d9ccd2381607882cf6e4298329b29cfb813931ac35e890208bd24f65390f2020eca42c13cc0ae2737a336d8b1589f865765807ce26d9bc031d802c7d98331a12ace584e9c310f6eaddaa6cf75372f2c85a860e34f6145b663ead01264e374e7dbe4f3e0ade1b335abb1b", "a882e45931fdbcc0563b6d5d47dd3118c0254fe493b8c9c7bc555fcca526c1cfbfcb34f0ba1a7f98f1194a5b78b5dc7aaa61313712a47721f6e69315d94a3d99105bf0cdd9f1c7abcdac22bccceb4419e93390629fe9e0a32c313f7878be2b1b8dfd0cb225c26f82cd4aea02c225f617045ec09f914da20e921389320853913ef51ec9aea97b89a850764c67b45408960240ec8a489f592f026fd87e8c2511545a657812c694b0a5719a70a57c8b215d07d1de97e7a430c0c00621151e927cb4083d3c32942ee70896d421cbec795d062f5914093a84500b534ab1a867c8eba41a1f2bd6a7d0287e4847f32a8aeac87f62ec2717a18d00301dcccaa90dfd0dbbf1fbddd2466ee3158950c06394e50fb5589e10e55314dadd8eea733e963a7d7cab616a5df10bc29f71903469c0c86e76197373411421a189af7f1dc867bf2485d91bd524bf0217c132d44abc682009ef20036e61049d70042cac930958be147b69fab792f1994116a2f74da42ad6bd3a", "97f92ef6ffeba2a8b2958bd0eecab329227b6ad6fc2addac4c60234861376725fb92972bf25625fb726571fa80aa30a1a6f22ecf87e03bcd354ac78d78c75ec65b0b28139b7ad6439ade8ac6e59fe64e5bd4e74bb77a08467a7e0d586cb0bde9a1d74975a5530f954b2d2d2183f963827c61f00dbe1f7cf3214f048e400177dfefe9fbd25a789d00674ee1e47834de7131b6f686158466329e898345dbee77c82db74c3df14914ba1b4086eb7a62720a41895b5527b1535a1afd002072d7392ad16ec9d6fe906fb6b460ec63e4a8a00256681214aef49cd13fb288d4a32b3f9fa44cc354f248ea45245a2f0dba072eff13b4dd766a397d763d9b64f549ac29a7658860a1e6b5014dbbc46fbce4bbc14f6974cf79f68fcd45958e82800759378095d957f023b99465b3ec17ff19c7d89f54c8b83058d2cac9677717a25465dcc4bdb6df216840289857dad6c583e214a1"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof with header but no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        s_hat,
        r2_hat,
        r3_hat,
        m_hat_list: m_hat_list.clone(),
        c,
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_bar.to_affine().to_compressed().as_ref(),
        b_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
        c.0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        s_hat,
        r2_hat,
        r3_hat,
        m_hat_list,
        c,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
