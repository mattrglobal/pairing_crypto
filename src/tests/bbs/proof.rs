use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages,
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["857ca585091441205741985d07c37f6b1de000a7eb21b1c0df2826c6f8e487f57b14b3eaba4244410f11c6bd26c080c786d44b15ee1ba3c86bb02443d95a7d0b6d490ab995244c1c5b6038b94923d791f8bec53e398adb291ad48a91baa1217ba013af21a32499aefa01d8751ee0a4d14f28237872f346ea7f937b8890703691710c7dfc01b0f2bf31ca7fe07fba135c3fca7c4cf86484ab8a8ea7fee91604ed2b41d8e8430778c2f6b8eb27ef68b45057f0738923337e56495dbab9b89203742f69a3ead7e24e3840dc708cadcfdd5f2057f3d5431478ad373c55ab273255390991e7ff6c0d4b3b8e0be7642082e0de0e3a6526376c234729585d8e0304c9d53286b60e21fee405e78c6da2051727bc5b0aef361ec23d854ad42e7a651614a6b1a4ed881439bf6015f5dd9ba6ca19b3242e18dd4396075b7c292862aa930828d2a57ad83950c7874c0eef068d874ed9092ee0c1d72e8b2d710a463af00a2de12adb29213aa88c1d2106d7c24cacce184ab197ec4b8e953062e7c892e79aa333eaea1eade86ce7b901c553a7c286477b38f49cfc2a93bf6932f7d454cd51dea0f447be29616ee21201da6b78686a652f3d0617ec629a8e79d0b935de24bab5e75f1e08cdfda52ee60974e7690c3de7621db12269484f1217a778156407d6d8ecef85c7c0b0665caa07e0d10c506a66cf", "958776b9d5b5428f3e483f724964c1a340ca3bb312280d86797115d919c9e9466f960783b5d14083c98a92f8ace1ddbc989cd783c31a7022f0c3543cf970c3cb4a1bafa2f8a3e29f101f9800ee53a48080b45f2af3aaabae491e67059dd6bb148fb703db494777da76564de5c6eb86c53d786daa5015c817b7952caa99c7675c10b0b9a4aee12877d649cb452d238495443acb8b036f2a8ece5b24925e46b68eaeea2412ac3a8396e35a8071ab9d4a2b5b2e6cff392611c7a0641a3e446453483bd2472d004f2ae0ddd663af1764b49a648ded2a85b608a0f0329638db1ab3ad610b69b32fe3113048915c00bf1a39db6229615cb2186394e1ad37193b0a932666f6a526c766641047c4a0b3317b644e3ce5604e3080e4d776b89358bd10df13b999f700154ce12bf16e18bd842987a53a8b5e9a8d6dd4e01e4e64fed1a653e53495001dc0d00b5d2f1f1eac8263364d0f091793eb32bdd8c538be34597c1e7dc3f511426f5d2bd2f2d5ab5fcc941cc2191514427f832e2287c56a612a2d28c4b9b1f8f568b28213259caf7e0aadacf6012b4a98d67e16eb86aa0d15ef4c240c130fe6980c710cae34d08a80e9329a041234c86b0e51254b134d9f257c935334c5523322167fe3fb8f0d236a7e34aa66", "a1176e17ae74ac3714e2ac532107bb998a7dc4f9d73e3f80b732022bbbf72a7439b18cde21d1f210533392dec603cc7ab2e09397144d72de7faaaf528ca0b84f93cafef2ad35caa375b2bb67956bb7d8f02b2c78bf8e2a140fa50dfff0227db8982161e2a4b6af3744d9827512883d55e1e8083048e915bf084e71605969aafdbe2468914d990b49c3d2c8dd70b7fba63ed091fc3a2f4960f810721ea37e3f064623f996d6b6448e8d5fc1c45f3abe7134e9bf2610ddf9bc64ee6e3fffa5c03eed4f1cc4c98da59b0d65fd7d019c9c2b1313e13342fb87d633d26f88012b30d6901482c165cb38565a9c87d368d56fbf2d4523c32a828eac9d0574d2824ed64d7ea9d5430be7897fdf2b42cc56dbb3ee5e99a52fd188d7f4ad78081b211aa0ae998e9ba689a8c9f13818fe21d2f7d1da712dcad46bafbb0d0f6d77831c531f49fe5d0a760529c82f7b0ef4ccb7138d120b9a36ddaa37205032560e7b57b2ae7cacc65e160102e5349da6af9193762b9b198655370be36521bf3d710802a9743d745e2d1159bc9d9ca6e9398f20e68ae22ad47386840c2f48dadab93af8d67b7b2c40baef189033b93bc390e094aeb25b", "a3572e89b9c908f1a0e620bbf5f85e86a461d36a2c372ecba1454eb1bb46370cee8f05248217daa0ad44070383ef36a9b48ef769235526a6da1d0537337015cbfa33a580f71856d5d07cc2d912d7b0e6a9ad6adb0cb84f5d445141a185160b11a00fa19c222199257eb610983b2fd6fdc6a3bb5f2121c7a0e8cedf9b0c0363d21e13a14326b573a69620f716a7240e3f5b1bf843af53e3428acd0ce59d8a75ea49d6de5d798ecb205ba09f7eef23acb546c339e94c93013a7d54517f3f59a147f58104f23c6c68be99cffcda46b4dca542775480527d29a9652e9d60de7bac9da32461013cf3cb2436e1b1d23027a5d2449d385d8f55e6072b070085606f096ebc5b7fad844994747ef58bb786b29a8c1e343129f446953edbbfab87f6946e55ccae45771789d82bfefb170ad835dcfa54958a1a2079d305152e0875321459bbdbe0979479e973c5829590671363b1442ca6fdad9e2b615101f0f6ac2e78e31bf283d44c75dec5cbd474d8a777aa777a33ca6896340754de2cba7de76881f89431c1c59ca9ae1311cd0b6c7ae1863cd6", "ab12d1cd172ba5278f6d0dc3541e4d0d8521ae5c2fbf816456e4b6ca4f8b26a07b8329ce8dc832250482df925c54179b831c42ad936c8ff60877432d14ab7e5ca3bd746c1731ed7750ab81c2420f22ce1a0183ae14cbd213215b2ec91022f05b99d5df40bc8701dd458404638691a1b97bec66cd7bd607fbbffe7a3d7465a3da5e94c9bbe2d8542830f0904aa1584ed768c15bcbeff370e0819dd5200df4e85a96ae065fd5343cfcc77da7984c8c640b6b18143e6654aa76e0b9acaad465aad9db7d57ab5da944f5baa9059ecbb7825135409f70af814e04248f5d9a9bf18429cb2a8a5b5913ce68de388a6ddbb76cfb3eaf4cf50706287f94eb5885d3dbe6fed67732194a748248b6042af211fee39939f28d62b2d49424780df3291e4a9a8518514409e169aa3aa40487d53cb23dac0e4463ffaf092b66818dc489ea6743f3c87202a15017a8fd0aea99f4fc3ec78a4ed46b6d98a4df98050182cb5cba26f90808442773dd1816c90d596c0868650f", "a20efc0454b1be91a8dc341910baf2cd47ba5fa64c79470307684c472ab813116f883718ddaae08b1136b2d6aebcc396af4dac01f631f638f5bc2838054e56ba797d6a076934756a1d24d3ddba31e3b1319186d53612fdcbf8d8c44f7868c0f68bbf0af13a9dd3994010b0abd85205d7d5901afdf4f36e32659efcd787e46715ce8f6666db80cfadd256dcb0141a754962941bce39d9e97426a68c5db1f9b92fc29783125c1b0baa31a95bb13244075073228abcf996e9322b72aacc7a24f77d47171ce9c40f34a4dd7e7d03716f662a5ae08326e938779168099247a9b7bec3e0fad9b99a515ecfb092d366c412833260b7c08a1d02905a7a51c703159ac287c0f9666c5db75146c2ff277dff35d1572db95b050b750be5383c0c2b9b33677c138526828ae41f399338ab673ced93982f9931b13f313a382f7474f7533f0079e0091b16f7dcec47c3c06d47d9af14d7"],
        ["8b4182fe258ca29d78ef7f3c65585411f67951b7d44c38f720af87bd94d6d77826b2b0a7d53820942d50709178b944dba5a226973fc3585ec7564ac1e1a1e6843de883f05ab36c85f2380840841cd5d43d0a16535db194c047627bee126f072ab1a0b51f0b5286f2ebf430ed4f9d1af23b91531204d470f2fdb2ad1acee61a689274bc639b46a42de5a9c1e07679d9bd4a95ce0f07e66e06417416e2d275fbee37a82327b45672e5a2495aa7da64905b501bcc28c39868fd28df45ce1c3c78127b3bf12fe2cd42d3e8bd8284436c33477222057cb8fd667cee2287798b4b0f627e3a1a07205fce4855383ce51fe11da135265eccbabd9102f43409c1b7cef9b6eae44217c300ef49c1ca987ce2b328254384a0e3562511cb361750e3a84e5a0ee994305d99c703840d7862b15a94de995d5de9b98cc9edf01996c3d37820530e23ff902077ecf22ecb6a4e42e75a99d331ad5a565b8663e07f7d8e45d53a38d16014f539cab3915d53e350c29fab4a6d66bfa46d5bfd7577c1290d9865a1d306e284cc428b7b1edc79ece4c2f331c5e2660893eb8e05c33ed3d25e0cc54e7e6562e8dd17501178348e3d671ae7a92b8b07c1de707fc0b858d7a54bc928542190b8546d096fd9d1a0cfb1217fddcf4bda124c28ba82d0618395b06caff0649ca9daffa5a70f9506ce71d6636f43baa01c", "8cfae099b9e8123368f94f1eaabb42864a881f148f9de93ca292f74d6f45f0fa00ab80c725d5645874d5d4b70ae0cebe96df3739c7bc9e92ebd68a69af5eb5c5899ffd4074fbcdeaae9d09b026e1e91f35fe17eb381e4b3fe5c07cf94c94decdb576f96b55b5cfc7f69dfbb26b23dc37405384fd49dcd3c1f6afb67abc0f0dc7cad948b7f74ac1f416a28a00626e39da44f7dcdf9621fb51c0f2846fb4c4f9dc98ca79ff7a7cdfa2b9468ab3969bb954626f3db1ecb10e5a86de8a9c82256d5fa1a5a7200c6623e769bf6f0726f61c0e156f398838d9327f4a2a8c1dbfddb8177d287a5d16981f4f3b0451d48288dc733694323e9e2c45daff7f3c8666d99e22f44907b07ef19dcafe80d79ac73dfa9d48c09b674c30dd3ccf52975c0b671876cbbd4494554d4085be6e9f9ee1e4e23a3f7bdeed86ad2d27421ee7f1846f4b81758d6bb600f4b1ed5cf03ff45f6abf895def6e604eda74e6eb421c5ee67078e8f853620864ca32809832a3dba20b621a3e20d56b7d7460a5b24b044761251890d50b049fca47a41c99128d19baaa64c85e7c093b1bb65b2642ac8ba88d74b65ddc537c1de7974fc28caf88cf5de8f5201cf54f85d9a358bd024246551dd3322cfeb73b60897d23f3dd8adb9acc52c9a9", "ab8ff1ebc293f04a2d9012cc2fca6063ac00e333f6f92c8f65925eecdf4a3b732e7778dde061470f0f351fa833093699a3d40e4a4012eb327ba263342f2be691957fdf1089487d0d943853f8eee67cba6c3f0baee3999706784dbcd465c3b5bbb9832f7f09d18e9f6ae2b1a7ffda647dd88669b22d82efde9cb86945db377e3be6a66db265de5937f2563ee777f2ebff6b68c20bbb0de27b450e74478f71e39bb03b98132828f9da06042018eceb78252124a5d9f5ec67caaf73669cfbce92e156ef9f80caf52587b0d33f304a2513e5034e66f9ca72370475302dd525c98169cf21a2b9b963375ffd947cd0718370b2549d7668aead7d1ee7d5b2de47b96b1345e5457492115fdcffe155809d95d7345e45d24946c12c04c434f01c418df2782e5a9179724178ac2fde459103195ff420e536fbfdb75a1b1842baf9a616f90305c7927f3571dab4d42d3c0c03b6d91d6dcc97491054c1fe7e9bd13453a2ff0cb765c5be98faf968e7722e133b62cdb64158c21a9c7d1a828f25c3c9222e8a3ca80fbfb5702c87c772f9ad974ff6aa9e0fe5dde5b328a806902127e1250835390548f07f9742832c14ab86eed80397fa", "b2ce1766718c4c2a34fbcc1b524f12ed3e71ceefe7bd99a7786495224b3eb9725e88d8f438e5deaf37c20093a08c3f94abd899872c68f68826cb9cd563356d18d00557c8999cacfab83fafece58a10f4fdb72175c1a8b510b7d5b1c5980a1519b200d3684f185c6cfc8d8bb61c85f7c958e600566b6f499d92668ab16207c038449d4f88d19331dc21cc212d5df7426f02225288f2895de7aa11f61f8be1ab2c1837b37497a6a2611983af7dccb767ae1d1a64fe2c94ba8fc956be387ebc5336f62feb955c8e5c418ca842331ea1c9b83af51a572ae4e992eaa1982e65833ecded89fe94b4a1ac571f394dbccc3a297d222804b1daab79e0d5b7e6d63586da562c3758347637d5f3cbc15e6c1feef21137c28abda2a34a83bbe5427ccc39a0727d757a7e1203a2818ee14ff8973a768b6c47be6fdd94338103f6a221ab43ee58628d25afa44920655b90bcee75b225493399aa137762be10bd42ab4db819354c41007b81377fc13827af9d1cf6cb0b4911a4671b7665979b91795cf79f30149aa66b5e58828a2403e5118e5658881cb0", "910d534349d8810902b8f98ba706701140a908569feb06a892243e6f8c6dff026b451b7bffb86484fa82e5340c7fd3c88c3dded89d01d8537890c992433efbbdf199081bf98033d3f6c0d50a85a453ff93fe522977281f437844e6a17732a2bdb78a189e19f9fb9bd3222eab9a747068b38199852c11a32a1a99fa3343991f2c3019a38eccfb2d588fa19a805c48c9886e71963c131bf3344da407c5d3f1c855081dc43f30fd97c9fbbdaf9d697f403c2c9b9fb46ec554b03ee4619d0140041c1bc8b99833b43e3511ab055b552a517d143baa4881b19804b897294941ca61235f86f82a11bc8e421ded48ab3b6a55753d433a048cc5b0dfb7ba2caee2a06940865cbc3fc8c453d567233dc07481ef22497af0b4f0399b0e9b846666716a66e0f7dbdb1948875e62fd6a59f93bee19235b19a563afd56b53d63237c9b49ff242c88661e9a45dfe677503d773bfdcc656616d24398ab647f0a69c078c2d847d62ff0f0bb8f51ea482c949d817f9cf4289", "85df33b8b75f306498d2ac602f5d67cf43074df78e3272f888f3c2a5b457cfe02ab28f5c71e506cb0601b830db61f15aadee9437cfeb8e57c98160247941b4de8901f155dcbf451b9583373abf25a7c1b00eca198ba4333c19570593fdd7437fb9084d3478ee63e3154b2f42787e854a25f968995814e94cccf03c28a7cf4ab26ef25724a842694bd89ff8d42ffc90d5647dee31120c997d4fae9ac6fbc96e01079de914328c7a891ca6b3675a542ff90f44a4b1b9adbb6127742ca1430552b41192fb140c017434f070a0e810375cd370646ae591eb1f633ae016a9f04332a0240f2bc8bd2c97860d3fd2a08faf01b02d25d6920b3314d70d8b00145d71bf9b559db2359fd69cfd2cd66bbcc7fa8f3d04a7d0b34e9765917773e9ab70834eb6f31e96fafb38d9a83201f1c0918f312f5ceacbab2a68cf4bdb7fe5d2fbf27f974b5cf448ac2117e33cd6ddf4338b862f"],
        ["835225e7d826f3355e550af5bca558a7bb5c20c23e6692bdc679bd71cd7e77ed019beec9a3094d6ec37a91c531e970b68ee0790a5717d6bfd07efb13be5e6270b55c2447d003c640ed47445e90316915bf1a94b09bc4f12b21a49c3d29df480eb51b493ee14e14b428526edfb0bc69c452ec76b1c95fa111d154527cacd57a5f749d1879896a6bf0de8bdb13398fcaeb3d0524adb404d5658126916d5970b8704522a9fbee7ffaad56b138d7092af5d74202b311198f37643ee596f1e78e83203a77d06f2947b86fcfc5623d3f0a64c92ff118b63e005527b1dcd059a3167ddde739145a7657ce2e766f4d0bbd871bd66f3f44a033c94947a0d2b5b77e189af6b738a45e0a2224ccf69d12483e182a116ac5b902f42df7d4f9b0a647889098f37f0d62efcff5ec68b866393b7424e5e74b44ea78eb9d10163002516fc5278a7c1b399096fc4144792653cf1a862a303d3404a67c12a5b64b13af598abcd6ff3feb8e02c2257d4f9c0cc1b4d7985678656fe1d2119643827b9107188cb64c4b6dbe859fc6954aaf027385d894404c27b4291a7ec3a9ab6bff1fc78c2f1337213db457638c937b2e305aa39629b8c7e474205831c2bd7288ca20645e44959b9f1a0a6979170360c006a1f348f93236ed5468e3631c2144874115c0f38cd30bee66924cb23915936f36e4b34481bc0bf16f", "81aa032c4789cbac103ebdc419a88c2402faf7bfbcfac5cd89dc1085e3451a5364abb1b3329e70f5da3b52b8f3b1a2e8ae7fa7fb50a5f337867fe703520d2a2e6ed23ed8d71832d70ddaec7c64e30dc5ed44f9621137b8d4a3a43767aa4541bc859ad342114cc05ad7b5676c155060aa99d6e4d2ad63b7f6a39b764e14a2c9855a197fcc9b459f7c3917572aa81afaea41a6866e829a1e0a2d6e76f276c8065bc05a79e3cffec17221cccd7d1db9905433cc3e771639a3a4408c7533b1ba1a662febe49f592433d41665f8778949f8c35b8a95023b0a67f4d89565cc7af3f6e88f7a86f0cb1088c72567a6fa5d7b26e4012e0e6f25a5914db90e9d05dd0d5185384f5244df062cde7f52dd4c310117b1431014d039b6ed17c32286c8ecb8112bd31674d3512f738713a6ba1d7194e012278409dfdc8183783bd4b0331e33284957fe3a7dbd9caa4f8d5a23c7ed9e1ce35c25933d5072d408ad644a1c7f112179ea60197d9a42bf079ffb00c2faf599b73e96489d324182e2f2844e0aa61cee522181c24b710ed7738e49114a7b740a711a608aeaa52b5591597180851c3fc9151681bf8147f31029ece44fa404b5f021377b0657edc01aa2f6cd0f18f3bd135fd0648a7eaaa7c567df47de0ba81db38b", "b80c8704f8a4dccc910b97452476d6cae80d8119634b1b739184917968a14e7e60b1cbe4d33e58781ad2cf681fe71492b440865af499dff9b1acb538189a6154df902a6aacd060c0d669bdcd4094b88740d0af3dfdccd3eca927234137964b43ad955997e439cff78c3199ac8a98869b3f1469fa8cef0c20873b7c79ebfd51150c033e328da1e4c310cddf6ed17b8a7713ceed0515fc2e8225cfbd33be602e983b486d4f813a8269a0c7c10b33c37386576dc908ba10f54e115a150e78ef7ffd7c2fe997b78d4a410b1adb0446dd43402ca30c71ec79cf1eb004ee7ba16733aee06a0f1877e4e951eb764c4ad62456695739928a5e440408d756d149bdab341c7885dd5f93e6a79456ea48e9b19734f6043586c02bb1b377266ae948c71af964a86a395254a1346926962d084c08582d59f909762b9ac046cade5c1d4ec9992ce32e0e36feb8548631eae8c681f2bde7362e0b0108321e57c80837d35789eb0b0d2b7fe72c1844cc7ac9e1a6c3b553882fb28cdb55bd5565c454061a002a871abeccbff230d0a530a3516de87594778f54218e948419f3398899d78373d1d89b27b5c063ef3ea2a489095b9f95569935", "870e4876a2d7c59008222048b5667d4859f992adb03e6db74368a4aa22de84f63e3643fda2e9b84bbb34ade9c738a994a59c6b67795c04c508096c598724d566ce6b288d6327105b15a1862a0b79d221dc0ed1e5debe813d70677fe270b268b9945728107bd728d9484720a164913396b14d8aab1a93bd269871679b9d75eed68053f02ef4b8cf8d2c58e0ff7766319f2a26d7a73089073010f03590b3477ae583c072abd16ae9e4ae2957ddff06cdf96e17970bc035640225b18f166544a1932ed8da3de8059294252378f22bcc0bec5a3996cd49703f5045d2d0793f76bdc2dd79ea7d110681924de9882d9921961158236fae12b7e4c7332507667790ef50cea7bc4c7f35397323d7e1173a589b220c856003b52dfb7a15bf98a90e8941e84c258eacf7809c4df893740808e4e38c29b57145f06770a09ee2ee3543d8a631740fc77f7d045d0428b9d79cc06330da4ec584b1d29eb77972fdd79ae256dcdc2e1b53b606497d3c4f47dd18b33094dc45e70971ae9780917e576ac101824233fcbb152d0fb45e488ff0a5567c55fdab", "b246e171a349dda006e9f4ddce40fa6e21c1f6e541373ba9fb4becdfbd6c60d8110c2b9dd146bc00fb40772aaff562b89408275873bd3e00278b47554b277570e0fdd2f27a737165df30130784b5f252016d3f59b1bc14dca41e1d919c56198e8d428a479ef425a3ac58a21a65df324fbdb4ce9332a3510b495091fb852392c56c6de6038c14d2ec5cb06f1c94cf4058029fb516f0c338a3589759e3f24faafd03c077fe5b279bdca342c782dd22a1bc47fa4a8034a1521f475ae48dbc06ceac070df1da8c3574a92a7f6d14c30573520ef4f2228d7d777c50cc535cc52e0b103ffcb8d05621d6973e63c79f798315c331e033f2b378cf45626c6d301e716a6dec60053b766e5b6af4baabc4cbd5d42f15e91a10a7c8cb6a86b1f2d48e637d2e2638c89ab0bbf7b8ba8968bd4033cd6f222d9ee4ecf80ff6dd049bb788cc4666c83e7d24626eab2ecc80049fad3335e30c21d2d9cd150ff3860baa6be798fa5cc148269abb6c5dce78c1615d05f171c2", "8fea3102b093342be80496bef572eabc073b8d83e175de0be3b226bb27ef7fb7f7e9eb4601e93ad993741fa77857979890963a3e097e55a1c081f0f7c685be31957ce388ee3152a8b47eaa0ddba86248511a9295069cccb56c5699e27f36d1bdb34dbc45995d7ca377a877b6dca86872fad755020694c6df36d1ca3e725dbd15ea9b944b8b336dee68607e09420cd5b12316b99128262c5923578fca89182ba6dda48cee072c9543b959d0fbde560d6837afda84c1d62ccbaf157344dced6cfac190591a51d9d728724e3bee1486a32842ab60741d1f43eb21ab9d9a1b829fa25d4f3842ca350b29d7127e12ff90e07c6fd8ab8ee5fbb2f9876a662f0d7558cbb734893cf0ec19501ecab166674362a35f2ba99c3fdfefff2e61ebba056c0f564067a2fc3cd4e18bbcca3bcfdc79984f021bf8fbe437ab53d6a5f79ba244a1f776f4a2aff3e5378a89eaf19f8f4bfa44"],
        ["984e3497244ef1a809604176f1211bc6c84e4d103c53ae7bb46ab7b2a2db10c6d05dffd98bd0be3b3f54a44dd4a1db2ea681dab54fb88f693171e16e16cfed08616f800f9812cf6955d9ac6055035aaf27d8f7f2b240f79b1da32977bcad587a8d68554141a4d8acda446e62cb9873aab1138e26f22605c3678c369bc66815ad80d206c562b087144733516794eb38e52889726cff3c6dfa9bf7ea62bdc43048a9c1d490947a42f2100948057b4675660aa94fc243d03390a1292a9acd92a4884901ab39cc040b1c2ca1a4d9390ec3f04adb9a90fbb3f3a0c1d8c8f844b2eef4e827a14299702ad8244cdac98712d6934d8587af244364b133ecc80ad763c3c1b3cdf03b643bd6c4634ea5377184630556898f73b00acd5aa67d7293eaf3b66b20ed29af22ae2f79c6fb4b4e948eb6001d6c48e3595b74ef0f73f3a47bdd4fe4f209103a3fc69ce4e62d139fec54046e1201eeb324675ccfc9ffd29d7b6b76fcb01640458b7cc83f740a6a5e474cd92c4375fe3cfa54482b48af310670c48d8f06b20895f99ea56047cbd374b09d0f523603c548f9c6b6ba1bb1a6553a5b885d1f49ba941631e758eba65fdc844dc6e90b07b3460cf805e9bfe971f981356b8873cc4350a6bc5e4960411db68eb0fc8f125d9b2686ad16f47a8841804cbf708f0f202ea95ebd0f2900e5e2b20a9ad3d7", "b9ec0f64861c59eaed0bb74c053d9d0694ce2ede97d4e24761faa6900a5efba94898249fee8edda934fee756d001dfa6908b8edc1b9b54a2bc6405d759df596f3d351098bd88b316b49bf1654061847b618024ecaf9bfda385bfbb52ff0c3a7cb2dcbdafc76ee3388098af95234c42af194232f7f3d20400c21a34374a83d1ee2f659af9a9025e41659798d3d4578afb373dfad9db40955c996b2ee4c9be0c6280be82b3473fd6fc9d40ae8f4a2843c6620abfde11e7914eab101a4b085cc52bd8fa8dba97509ddf63f26b285d6d250d6c33ea8dd951218254fa18f6f6d604f50f1be40a58014033ac665d0232aab39e4c501b15d9512235429f22fa5838e220d1bdd82e543cda7587bb1c9f19e267c11d352dfc94133a508709e00369fcf116196500fde9c3ef0b8ee940e107e8d8be51431fdcd965e406fa137e18a5afec39024a70f42d0618023bef6821e9eec2316ec89e98c6ce57e9555306c6583d6314f82f063be6d920d09521b3ade06f121f6b365cb92926c4924c19308557739d265b617e6bc5c13c87fac0e502859ba2451e053bcf6f87fba438d76295936bf981b11b623f3095e027b3017828aa6ab44f131f2a4d39e2130d38b7479feb9e2b0716805988f2134318bc26e94ad61bc3f3", "b061d2edfb1258625d71e1077478159dc17d5edf6e63976f5e8591367cf8208b48eb2bf7ce1f851e8293a035ef7aa4d8b0603b9f7f04a69d352dc93d926e3df50f421fcb0c2bd3ed5eeeb0c12ce34bff2e20c73752ead30115226370a1299e84998d66f1d3a5fd1eaf278d1bb0150764c9899f82a7cb793f6d1e334f3648728e9236a19dc037b0ee7dc6de1fd467fc7e1ce6fa2cb1fcb5662fbaf990118d3e7df7e3f29b4e05f1297de5efe9ce237fba6e9cce5ee42fac6e9e67939a48ebdce17b78115a51baa9a1002722f63c1a5c00211f9ef6883b89cc519f62b962ae97fb62b8181254ae55f391111c9980f02ad932585fcc792b2436ec4035ab655610c0fe36c4d1ba25ebf75d3b61c87dc01de203d71893963103aa3b1b977ad8443f380d3d014078621dca285fc6fe0e995d992119d82cc5a97251fa291cb927f81a384f6e5f9d0d2e0c5266d31df3b60c9aa539e70782c18d6b58af24f53099d52e7e8756e7fd1c5db3a0d1595556b6fd438d13cfff393085b79361948689ac0f712f47bdd273324d535c0dea21e5fb268b6427bceac326a9852668bac4e3afddffdcc4893edbf01e145287ff2ff2c92d5a8f", "b26e75f240730a582eb8dc48c8fb3735f463d2ee68d9cd7b98e4caaaaf60d9be7f6a3516179ec2ae93797fae401a78dbaa62bea055eb02c5917ac7c2d4e7444d416a66e09812bb98cdb6c5f5043bda01064cae7205a3dc82aaa9d26b38e2ed43b062acfb63c344feaf930bcf1d83844ffd7449b1ebf0ec56aabb37f595359add10c9d571aedfe1993bd3f1b8d3ef69cb1402e115bd2d3a825b87a4dcc11d5f597d34887b6dd713fd5da68d83cf39afad12a0d7cf2db6bb8e4e37be2563934a0461e7a9df7d33e3c78f1cf7a63fdfcfc34b6e190b9b03e1d7b1fe6e01a84bec7b1415abe9b5e8bf407a56f1382286111c2f00653abe0fc4ab34679ed11a6dcb1a1a36cefffb80b75b1bc8a4d8312e24d316b0697c3dbf60e111670bd867d04b34d7690eaab483a1379541933db40fbf774a5d1597d3895880060455ae7cd889da46d4dbb1d2b45aadfab96a660dc8adc660c40f7a15a7ffa8c2e4de1d7129aaa252b8a4e6aafeba0d0522a9f2b4cea1cb1d58e27ee74631b535f280371759cd7f60a97aa649382c0e03268995908e2d9b", "8135c22135553c47c3ddfb015d61c56c49d040ae27127f0e64f8a22f02e249942df9a4ca5376f0550c300cfcc46add50a88e12195058ffa4ea5246db3d1d9bf8ac4f63e20bd97d85975640a46fc7cf7b8f43f0d2933c6ae0e51fc8ef2cf1054597720f0babc407229e105794fbcd1ccdf14343a2567c53011795d003dec3b6185eb7b5a43afe5080fffe5255b433be6a6c8f48df1d162411ec30cfaf4184eef7b7ae18144bee16c0be4f3f0266e29f2c036679676e480ec134dc728309f105073ab135c4c124daa7a646892b64bae3a60e592d39c9fc4f427bd4a2ea15d3d2de202a2b8f14561a1340771a968aa8bcd94f9f14472f13b2bf170ead94007980c8fd2a1b0327377433577bd1c9400470603ac0032a86f36b1ca5637144f4953b35425359a03975defd3167a3dd436b5efc4d08818c982b1e72c9f91cd8582d971e1f39dd3b6937238ee57aee779b50ec836491ba786ecdf4ca553785dcb41d16628843efb35a3a8b04dc20ad54d8ede7fd", "94679d9243530980527d003db7eb90090513ef240125cc2a73ff9f3388dba14e6a7048150f54f9fe2392c09408651a4ba8444fc2a453452030d53873328b2581051d4e9af227833c878b3c18433fef8dc98f4b9635932a8d88b93b668e08ce9681dd9d7491e81c586c2f4012dca787e2721afdc6b8c97bf2e549b21970df5a7ba814f25ce8832152bdbff747232d74ee357a75e6caaa8178210b1cd3d57592bda46110ed7086a21eb8e7c5dd4f1f423e2da2cfa66e3636085596c4cbc89c9e378ac16b8896d9ca72350d6d2277592c1e58d5b2629d2eb9bab226ed2867f7bc0572275b047846d8c28472b7c09e4a2b49395896d5c86b8fd2cdedbd9a2a1349efdced94481738069267d89ccd6b5711385677f0bb4169a2ad76ba9e7c049fb8cda88b496a397b6546c3bc6c08f5a781c403343fe8eafaf35f844f5e1bb07bb0a0f95967fae515701a407ba39b5c567264"],
        ["b46cd41d6d5a0efd64ffb6cde12b22409311c48e1894bf4282f67a48a5057978a67b3ab1fbcaa1dea28f5faa6d9c74389654d0e3fe1b524dc94c443c252e0cc8c028eff4637540daaa687e251e44d5c35b5de5f26c3d50872d4607e861295209a7ad31c23bcaa9f3616b494e2fed91a50bbe2e71ba3d7d0c7dceb8ab389cc601ee8dbbc769b00d98bbca98a1416b02d066dc9ba36be991384cbf5ee9ee194f0dc531f2a2e03acfac39b76655e74b086b07415777285bed801b96fecc0a91a9635875aa3f0eb10f2934c086b56ed1b52842a1c1fe8d3fa1408d790a072c07bc14c08127cada7b094c6187f534a6f6bfae43be2ca8d0611ade785a774c19087c684db433fb12fbcc3e38bd0ebd058357a355396f3747d47d0c2594ef3f38ef4374f63a501ffb9ac83c446e91369923f58f153204aa3debfa11ad0fb735f0e2f9c5e1a6566117f9f8083055a673462876cf407867c879b5db40d8cf761e73b6769e635557582953055f6e68430d6814cadc33c224b841058d5de692239b048bb4cf2f3e597532efe9585666bbd930d061c416a0e173c0deb76bd3157932319069a910c9c06bf2e230077034e520dd56f55d1ab41fda162ce579789041272cb209eb931424a582e24e77600b5445655f289b6a58ce2e7dbd27520ecf80797532bcd200375b2bf69105b41c65d4d8dc89f3af", "a61034d300e47f1259d194759f899ea3c28d8d4a40314a99cf9e1a952843291591bfa90807b8ac591fc69708babfd5418ee04ca9faf3b8d064514ab558a97c888cf0943be20e45fa7cb539a649e9ced501b0e7706ea797d5cc299ac39707696fa4da1864ed1abebce8a49a28a925030390bb31e0e82552f87e106d2512287bc2822d0485603080139a53ade76792730718659619518d743c4a388e667e853acd29ec1e1d044d5aed06499b20bd12bd6a2c939245d45ca099189f1c3a98382ca6884090358446b68a817651709fa63e481a7454d8a1c2cc59b7b87446dd02fb20ebac66bb5e2dee6cdea71355ea4810d8387e3f7e830303b5ddf482bf8a49dfa0a1f1014d87ab7e0e1bc5f695a82088681f1944e8fcf76c2cdc9384d2b57bfa977d2c9de53a56faa80653df8b310b33d213f7866f45012f7672fbcc81068c62bf90f1bd1d2a4f0b03bd2548191db65a9b0546acb10aab9310132cd9361675817d597f0a28a3471b3a0ec4835d03d15a7c619b0f4b41fd320eb915af0aeb963de235dc816b45f940554a96afab1de6bf8117b0af8800e9dfa9441e5af3d9035c2c30e54d4c4b99b22034827af383de47cf068ebabaeb55ba8bebd204e8a8ce4206b7e9662538059cd5a55d87408f18d4ec", "ae7ce41e5c702241f9d8752478925bfb0e31f2dc350d0f4aa4f31f89b1f55ca3c2b97907d363cb97b6eedeb88bf9ad058832f80d2723d15543582e3a53df6e8923e711f685653be3e50dbf1564428388847b96fddb202bb6d1a7293d00a360cea4bb5c4a14b93864c77a6f6ac70792c62dd80c14d0a4f1cd76e136ffccd9653fd1ca005ec9398de41907cbcab2ca10563194fc9a168ec515f46362ecb082a5c150830faf5c20fb875092f0844ccccc154f4d69107e2e335a4ab3d7488edac55a671bb7cb7c8568149045401f8eb08b9a4837e10478aa87cbcee8bd69deadfb84b527fa87bbc5e191942ecb563f90ffa61daad7b22b03f879c5f15ae708b649ae87706fd8f59a94166ffc962681eea6af678b5abf6d81ebcc5defc5a02410fa8d1757d22d87440c2fce396b39364ac75b4d61fbff00cbb982f609ae606b3248aa167afd4dfc7e4224dea1d00c1b97b3081b520f79959671ff73715ecaba7f88e6834655ecafb3fbb697194ebc148d95cf6c888075ebfc8d9642e80ef2eb6b3fad929e651ab903bcf7b9533bb727f3bdaf310ba7770e54e1b691592ce26546ad1c610d24f64e6261ebdab3c606448c8362", "80838c35fbacf4114bc1b6bd2fcef7be0a32a7eb9f4b1cbc918b6a796c4b22ceb6cc7c0a926bfb9ee57c4adb9fac97d48ded23cefd2111b6e1f31d0d3f04173efba5424ffa25d8681bf1fb9e679c7abafa522db1e8dbb5ac4d26f764f82bb0eb8dd8e8a858b059af087a50466065419d3c91d8a8a46bfde839083b3c168f2e9a7d8cb030e8c63417906b9641c41ac238444ad40388a677ca7c85fbef44f9f703cdbf5728463cbfad6193c9cedbff41ac28a4190735e48489e47642a49c65d6d18330cff5219abefebdd36ee39e6f7f7e559d1086b7997e71ded019f8c3db5b2df6f06b6de3c2b6df96e0eafdb4fb6f822f15a283f96c71ec1d23e80283afe3b80e9f49bfcac6cba894b8b7c738253f38027d470db49540f0952463a3b445ad9ae1fcda95c8323fa96dc19871f8bcce852f49f8f11d28440105742296d0043f211963dfd89071b386e0a185eace6fb5ea1ea202e00eaa19946e1f98c3021d8384d4441fc5c27e81abea00e2b380e5beca3f3f9aa141800b1c1db44b3c34d18f7a2ee1f48cf969c41880272b365f324cc5", "9339d7b8d4cc90618dbb6209e6e12a4586ea8555ad1ee3dd7dcea34136069bfec9dc7b5bd56c27c9e4c40857a92ac8de8dc99276d02cf44a6ab32d517ca183b4588e1f5653a24b464658dbe46353a28405e8d17e4eb82e3734a22ddcabf5a358b58d7a762a8d9b540e55f9d9823ae435ec9a1a065dc824f97fb91885e761ca2ed4c0864314256dd040f18e865786c8493ebbd8539909b8edaa30a4f9bf8aa4e9f8018a0e579de2ceee1f08d3ea7aa5f11c2dacd569b448fd8c9983ba864532079dbd0fe745b0d7865bdf1336642f552403777a64c50fd22faa19b94b14e28add939ca2073e7757ec8dce8d89dd0fcf552d40a6c7f4ebc80b0eaadad615d31aaf541514d8d06f832bc89ee911168664e75fe50362c323f2e2c0cfa40d7ce053ae158f6ed37f4d9e3493402f4937b5d39b63b35af996a1427f49b8992539e9639d461869b1fbbd65cafdb521a139e1cd3d2f284e408767491e83a714e83597e4c3ce1b3b8e995e13766948f1ac012cc138", "9363217f544421c43abbdf80bcda3ced21f7e3795ed18f694f175c4352c106d0cffb0da746d7157d514fc8fd2042464dab6051033e734f2b6218c610ab1889bff28b034001867f1425a00502f3657d26fef4a3325b2b878cf65d1eb027da549ab96cebe08508eb46de983ffc0b3cf57a7afd33e49c3b77b34a2d7eebc92b543d846b16926c1125c00004e78a977f6eb00c2f8a3dfb3fc626ed5daa4347b5145a3ed395999614e02580832987d1c4c19a2be6dd997960096b4f7835778878ad4d79cf4730e6ab75f2bd2250ed901049f556e93ee4841ffb3a2827dd14040dabecc34fdafdfd887a0e16d5ebd5251641095727ea28da8d7a91e15a7ed33c12f52667a004c167f1c2e7bf0657165527a7a63048e1391943f50d4f6d4c468ba2ba71fbeb5b1c6d4d214ae760c0c16c0303261858c7f50174470b83ad7f51d0d11cf38b7d42adc528a0ae15d585d8fb20a401"],
        ["b19d257e8c2d70fbc7690ae82dd1ed05667652684932eeffc981661ea54c0f9e954fbae51f1175b6fdc61d6bd0551579a5bb0953346b59db92e0b3d5a33c40e8b25689b41a7191e75f8b669495ebb0fa4f63c209773b212a5bc275cb5aadbb30982b4cc6e125450577a3f81fb9108f9f088dbdd08bb588efccb04dc202f0808e721c7881ae1d52ff88125bdeaf8b6a0f1e6a4f578998e567e2960f30cd246ef1ec0a8906594884d12887fa6849cb7e912c3be384374d01ad8ca9c2fb9d60c5b6b7d669a08fe904c39adf7d0253e4f90d1fb1147fed1b23445705f7c054db7889d69deb4980ae233b83d361cffeff3ceb45442950bb575d5f33fb0ef23e15e2cb3e1ad98dbe200b4516ff9b9b212bee54365bab45b9371878f65bf3fc3cddf16cbbedbbe3a7d8c7aefbf4486c42744cff3418d8c9d84330543430affc767a7eeb150f9759880b0f019619e2a21e2d9c170e5e5b31d29d571028d2ddb098ffacce6c5fb360c2026b009485320f68c60a975a75fa23feb98dafd9de0869893556dca52dbcb4a3d91f91774bfaea047552926f8c4972b612f2f5f9db4e1cffa6f0dc24d714ca880a958c1e8ad7cc4fc67f6439bab9613c774f3a1e0b4a9b899c7240ccbf15c3b311fd598d3d488acad94be747d8b0ab7fb7d8e6cde492f1b940dbd7de42fa19de3226abf47c95cd515ecaab", "98a3c14510d54cda7d65dc92b32e15715e46bd83da9e7a06773a7342fd1cc9d4fdeb8af2f218a763444ebd048f4d9ad1b57d776ebf8de40ca478c70f00d3cf18954d58fb081a808c16ad9100bf9c65a428e3d40f3c2006b9e20220cb7737bfb194f544f27de7c87b32b4bac8bb7c5266d84f545286cf9da9b74c3514d6dd80f67bc52e62bb97d4f2311639e7945c525a3080bd8311ed73aded34cfc101328d47d99434bb6655182a1937a0c8b6174d440276d600ffe07a213ae20b6de44db6af501d8400a9d66c7e1c1e7e3c4a150c6e64ec259bda1ef1ac446fb4abbc3087f7bf9103ee3b6b528d656718d5b6ac2964227606ce7929866a64b851940f3153d59f70332daf1ebe56f76b69ac399b5646674da4726614fcf970bd9cca92acb485aea50c8953f1dd9dce55712cfe38061706d4591e433d273baa6c1c89f155b415f05b02c06e8e76c43671992083c382823745699cf328e055dc8a19c56eff6835a339d9919f78713bc433b122968891252d7a11e7a12ba511f8f1a397c99a2c5533bc2f83c03dd137a16630fa9d67458439a61610bfc7f5f00c62381bd6cb6dfb9fce12d94c958d0464ff6f204ef9311522311434f588bccf6db96158490617fc7908e209a4e872ac6db13863245d1b3d", "98225d133b413ff1bc76ca777f90e4fe0d0b8657accd4c6b715492d073bfa9bebb7dbe16c68fa93181d5b54e1a79521bb08413b6b829b92204080c346f4390984b30e6f72be6b0a049c98124f8d1a0e931f8b1a9f246641bfba80d9e7a40bbaa8a3d0692e17d75f0fb08082a8a82dd0ff13b8cf0326ecba625e0f5555641b4d9240a762451636c7ade5038784d39b76c08c7efac44bddc85782819f48801d4181e4520708715eece6bafb531b53c3bff3ac910f8b5837e9129a69d7f975c47aed3c30db28f4f716bfd0bde2c32da7aea1bae2fb7a5dac32d4d8a3153a7598518808971bd14e80c527b89b79d229759031d53c99583a493acfd01ad049b80d2dd8457f59097d218819a5842a6e15c879e40670ab4c2d0833ddf652ed2c1e99eb17f1a7e4251748e3fba6f4c8bdbdb32892977825ac8f647be06c38a676ff48bb7c112ce4d9e65c1bd212107c415fa7e786cc84b09a3def699f581aa6b5069afca93d7dc3cf3fa164912fd7e3fab02bb500e2640224a1a2f79f2f5d583de1d42810cfb57eea8aac641cf90d831c72d5acc68d2da0498eeef11e37b43949cf6dc558c77015fc290ef7bd9e0a27a146e1eda", "966bf199f54a7b73b47284678393403bc647e04a1b6230dcb55282671ec9919c658c5171a2a8bfca7eacd97867fef3c8888b7972729f156a9d76a8cc6cb72278d29859bb2bb811d64a1804e090b6c2a6b4041baf0db5c2134e0b65e5af1f330eae5637be91e326f43b76e880ccb1f210e710449dd6a5f8f851078e8faed6942930a879f6da88c94a35efb722bbdf187a1b3cd3ee45f78ce9c001508a06c5800c0a69c8fe955082b546b0b71128510934120b1f9577d9ce8dc797cb5f9cf6163c2d1518881c78cdb7a8b93ce1b3e94fd27132cbc09570c8f11db8a711514c8f7feb9d287d9ba6e40c5540cc3a4bfb134d26e93ffd6c0655c44707f28d6c7bda7a6f183ec0675ad6c2db10afc54adaed3d2df8934cedd5a1e9deef0a11e8bc8f5fce48732c836220852cb000537cc9ed6d1fc4475d2ba3378dbbdadadbfd246540def30d12cca54a164612eacb491da7265e3926c4def47eeea8d117cef0f37ee1702332af4bcdd9f2f591fd6dc68fcd9c273b72b88fc3fd48811dca51b4c83c57765d9a9e816fb06452c5875b46f00b75", "a9cd302e95d42f85bf94b6010258af3f29d561dc56ba45d8836f51888b7619fe48d1e4ff69c5b207fc2fda86431d694aa3695f0ff051cecf1c21e029d0b3ad8e20fb87c64dabe285136ee55a60bb469d12fc23b9bb6bdfe6d597ff8e574684d6a6692142e0ca1b5d79a41844c8cb2bd1cedc49b21fd136dbe65d4ac5abb05fda3e3e1268d7b0bd733d44d1c0521fbf6049f18c43665a1a9e20a90b6a47ca01d7dd3f10b10a88130283d91044731c19e9429935a11caa97d147b8d0f989ba29a80913f6589d9eefd00fb2d7f0923afa5311ebf1c34482d9375c1c2293443c8f344de5bbb6af6abad9124fed9f9df28df55feb21ab6010d82a8b7588f9b6871320f2b21b1b5f32e22bf8560a35d60bef0f3a1292e65b302b218c48f8317a79a05fc64651e54103ac1550c0f59f7b0c43af38a3461c3d4a1ac289c968406483f7c88acb28f32e54b1dd56518c300fe792205a30ecdee69fc97604e41bfddbb7232f621795982b2a2802acd01bfe0918e043", "972511e56659865e4f8f532a298e70c9c581d0ccc2af2578e651b094ab83e1d0c0a259db46b43caae225a80a2c2bf366b8f926949e18f092610d3a21d5478ac787fd56cfd1b9b77dc1255ae731416b0875fb25fbc9b354d3fcb71fb18fcae9d297807f1e342af424971d5ec9cda3d0be4da2830250d0b93f5ba232871f1e40af1217163429c0881725dc5fccaa2d2c676933307152116818ed911ef671f1e7df962e34d6a96d0d19cf5746f07a625f92661114d8d2abe2813b684574b8eb7e518b2dbef42e3e9466a9ff96bca6dea4e83603391959e0ef3dc42ea3b0d64b93d6cf1cf5833ae9cd9c0b025a2cc032b2fd613bdde335b846b6338f8d09aecb0580661015bbb23b8e884550085f0cda42280f2a38f00c199eee2f3183c70e953b0bc3b16e9271146b40e0d353e4dd8299394f4529d509389f1cc04a7862d5c9542aa6ee0dd72cd78d08f32704de305098a3"],
        ["9277393298686d9a3b113c94296a5a56c7b46274e76b8b22d5f28f56d226324ee95be8d04f68430b4c015c008972fafb8e250fc8570c4471343d7384c2344b8b87dfe4265d2d652e2379ec6367f8491e89a54ef8033e247280d4049221897bb5936836af11c97d38ff6b0c8c35b5013251fc6ab4e29d5c0e624edd9f19d725a22be3e161336afbaf52c41e25fe3979444a8ed52a02ab3fde895028cfe2cee51185aa2ab3d40701fe41cda012fe3f99ed1c5015a11888a486c90aa62bfeaf1d2a4f02abdf726aef0c251ac828792e46020d64e3b75ae2e8b3098e5152ae9906c870fbe5249a908a859f29609835cf08dd5be53a090a5953061ed63fe8f2891c82409978fb4f7d6005e78fc2f501ca730b03046e81845f5d8fcc177d5351a4efb6f29f85821a1aa205828ff3be719d14d2003e1533fa8724c672113b3fbce9477c291a545156c6120a7e8313249341c0d7527dd4147d30efb7dbf5abb970598f78d484107f457929c33c168d18ef769d021375286295f8d02627bc59a1201e2ed1fef263bdfe85605b0a3ef73d9ddb4b212d36f6370a3051ef10ffcbfbcdfcaf00cc0d2dadf71629075a7c0cd9f2e0d25e0e64918b379f3a024733ecfd2b582419e5ead98f14a085f45143f754d2e5a3cd2a19e889ae418b8f72810c079189f24efa304726bea06199aeb80fba0d32d18d", "b9b68674a84f0d8a2fc4b1e4a5ba39f2f83dcb7185867a339308e46ba315a8dade5222856421cee2ecd85c68d3a402448bf623078e95e8d350abe82722fbe35893ec53fbdc92f54c4489722e3abf2883948ee45b6468a859a1029e755cf1bbd2a3cc1e563cf91c39675815f8e89c12938cf0b19316a9ea80a07d93c83c0a312211b826c70266391c00f1e6e42b8d3754616d818a3f49151061ec21dcd7eec62fe510c12ff7338322756a677df0c15f430f487df44ba8004dda7e7e32bc3109c6dcd9728d44662d30f8628a43b0ec5661085002415d5139be0730742f894a978b63104dd0808c8f66cb49f84be6fd57f453c2b83ba5339e537c4383e6ee38d6be8cc33805fc166ef392bdcfe3d27a30802d339785ab34d0a31e2360572aa0e8ae02b2988a7d635614c8d41069a80b59b6299d15ce5d14dbfdc991dacdef1be36588f125bda40869c55aa16ffb97535b55645bf298045b91c4fd9217ff1f136070d2e3976f96e54bbfcdf52170793694471232311c95390809d14db7c134b6c0ed7e2e9c5e07f1d2ec2922330575602bd233f6ae10a3d9e6dfb9702a8a072b9533088f6e8f12c1831282fdee04ca5344ca048ab97d22a89a880b681514f5a57d0ef22c8b57ee0c92e7be3f795a7ae14459", "92d42e00dc93a7d8e1648b722455561e83e31cf7b932ff102ec85c47365f1463a541ae37fbc07f86f279b29c7e285f7e8365cadcc0270205e13fd19dea50b5e4905c78c4f772ebe2eb95ba030fadbb6948162cafd5a5022d9b0b3f3f5c8e168cb22cdd3296d989a86b43d3a5eb8c598eca07ec5ef11d6ee56b1195c2665fd29f8e8ceabfb32dc3568f65efd63d624b20282e1351b8e514a53160b2b663a88177ad4d4d015571bc7d19aa4142ee4fb3df69429957434440d87ea8e16f3a65df19f7ad99811c9a25cf36bae09a472ba05625f4d0af562206554bbe52226348138c92c06be81e284450b250546c44cc522a29703a8f50bcb3313290984377223e0f666e022ceb157ac21e9293dcc6d853c03e69e22df3b7f4ec0fb459e2964fdb7dfa8c43631c67806d3556d4460bd7499a2a26a032fd8eac7fa87e5e131f912d32a1cb3288f3cdb9e7f739858d2aee10284c6b9bc6ee475cef63b104b4960e4868aa1de0911a7a64ee9ec70410abd67b391602d67ba5ad02a6eb5dc55a3b474b922ff5d5dca57cc4ac48612281d19b167505a86bd11c5df874ea28cfb27845f53ebe4ff1707c562494d1666738e6495e13", "a047fec625aa3b3dcbf8049704192362afebe93d27bd1f4c96994f248ec1643738a2cfc667254987f32a57ab440707c08c4f780c3ba14892a0bad82b7c7d3c854530c17bb898682636439b098387f15b57265bbb89d8145012bea1a65e1a985ea2cbb84145533acba1e9fcaaacf786c19450cc4b3a0c07ddf87c650be8ea3418811a1a85012b1461f48e6e507728e3e32d751a4de5a5be1c09816d4d407cbe8ffa1daa7095315f3359c50e010da2104961ec55147b6faa08bff3f992eb015ca4e3fb48f179ba0ee05f81e7b28fac62ef056fd89079a30453382737eaa06342578e4a26be91f1d6d357ed724c406d5e7c5d2ada3a5fdb4646e1bb4f054a6164f8a4060af32547c0164b086ffbee9f0eab6439697a731b43ea67abefc0fa01c0f1929711d2d7609c8b739ea65f087fe1fe4b8cd89ea44c7122c421b3ca61a8e554d762b4d4f1a600ba9575a8fc814070f06f9baf472b22e58201be0cc57f4dbc4d5168bbfaed3bc71d29ba88bf974974172f8aa35195e736df83330a39228698bced997401ed26e63eed6b3b8a2057328f", "a7f459f9928b90f9f007379d706af4fbe8224a467ee6b515f8019496e4b9b10a4608cb8ae55147955c511864fc750764a16d6fd6c8bf78c8de87097273f50710c59c983c5fd450dfa1f800e367af98f2907543ddbbb82aa79d6784f851010a45a03337302f02abb073733bc5764457c1962c71fc612a45ddd013f26ccdeff5e7f5ce1fab3200c7c6d208daf8dbba80ea63c2f1318564df4c2763bca162eb1309eee7873991a2334c54ea635c54c24a274caf711be8c5808e86942a9a28f2174d3661f55bbab797d55ebada8976da94094125275ea87b7ccede9111209f78bf9f26ba4a1cc54d21470de680be3b4e13d041ab897421c721802f42ac176b273a15210f17591bff4826b5842b9290dded4624e6611553a111fe948aad86299d728144a6088b66c2d6dd7eac3ea7dedd18d10ee61383f837b32f04479de891ffd5202cc8a719167a8ad4e1974790af640a751df9de4711ba2dbf3e1015eda630f6c3d5bb92a0d1f9a042f40ec865ea92d0bc", "9229f6a55368b7d4dad483820c5574cb9cc9fd41782dd76a330add54bd60be3727e8e7b183cca9ae7ff8a70c91916c30a46f4e11aa68b77f1ba122e79d4658e006ec85bcfc9455fcfec920bcb5296748c689e530af2e0e1f23043e54991d9ee09036bc578a64cb1d6585b7d566541f7ef95879ca0631132afe330aa06bb0049eb78b4d2b8a1125d101eb775a9e97e2ea03d866d354aefb828aeae9852a214e87270317086b0addc6cd7a951799dd51ec1534d144404947547911266f22b0a3a8810b1d89fc5885bcadd6329d4cd0da593e626b02a25d4bff5bd8b633a2c1229fa0909bf68743e5557667c7baee7b2c7708c0f958ad1f3f61cedf5cdc87a2f007fbbfa5c366b4686043bf7922e7bbf36867d500ee652b67fe68d389e79f90e9848e417ce8d60ec2ff5c78e3fea66c34f17046c4d76b884d940b6f7d9bcf3d1a1ae63c9860680daca9b2c1f41acbe9ec7b"]
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs,
                        None
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFO))
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["a10539c2649d60edbd219a13d226ad80a7a523e94763c9937903ffa73417f256417aeb33f5c47833345c75a8bff21afba7f3ca23824dfe489d3a48255c425474f4c39a2c84a7b7714c670cc001df2edd56e70f683f2b12e9d1ad8d955c44d19184254c020cc60e2ee687f9700a53a54138d7f049b6ecb6b30026ff14d4e0a0c15fad808f227b4c0c09a023a2a4f4851a43288c14f593dcd71ff24e0cac922e0fe9e8ce148fcf1e55c1572e31fced4d990448057d771a8291151f4a7c11a026c94a49e25e69f33aed4538a1ecd315649a5e2bfa5e0f059247c592a41ba06cb910f72beb75572e741285b81d31a24ec0d7072eb43f25415c2b52a4de7de71051329a916484f9a4dcc327ce891ad200ac663b03d9e4ae91621fcd608c3f9042dad84288519bc2c849032daaa0237df75b1669f44463e0cee4dd0761210c6ca5f6222a5c988ab04612bc2b0c91d4402c3a0f066297cac6111436b3b1f47d8a44209fe82acda1495115f34963128c4dc0f2765d0138f9890db5fe8d7d2dbef2aa273cb6196e88d5959ee744a0e8cca09333c5485c51ea071a8c402760e8b137536e66b93f01a86540fa305f924789bab9d2a33081e7bf544cc00e775ba9f9e1021126a35cb568d53a6a7b9949f8de9f0cf750005ed19c14f3a8c91625febbf761abec588909358ac990e4a73404d7c9196c5f", "ae5f47c4d04ac0c3f6f5be9ade6f4d96fd451c6e450c4cf1aee284b5715588e6f3fe1ed5bf176ffcb83e45d58ed94dc7a1dd66fd9c49a8e5dc9d0a67b6d0ee46c991e1203350311702c7fc75223142295527663f387293dbb9dc466ebd82e0c780ef24a501aabe96d4c8bf7300b580719abeee8c8d05d6dec1508be4607cdee2935a17d94fc81014345469bf61e5a7ec1147ddac68d84c50023e3f1578e16d7a0e41b1d4193f0f77688dc6e74cec14942c95e54154032935edd34da726e8308d19fda4ea4d37f77c6bb90e575b28379a015b9791895c22f16c2f81f499a07c305b0b5f27442b81953f79bbca1b9dfe1e06445b09fa5e8b6333e5aa7cd70b3cf77b817f6a4605d2979fa0688e1b63b5e003c5559cd57cbf34c74999490183b42eb1fa3cb51a019c40eb58e5689b8d37e1738bfda6c17b66639f2cde5c4a400cfa506868c2a3291fdbae47749cf626c03851a6a3a5f41eaba2b68d9fcc91200a64fddaf3839b9d38441adf4d195998f01956d88b080037898f389d773cee87620f2494edc870a8be17277e44d56e05d1e41d9ebb85a8bd6d30beaaa3df248cc60f55a5950b5df0e8c7f97e4c4cf62cd825369f5d045b5cdc8c77449ea774b123430c2a56a328d5104b612ac1c9ea8aba3d", "8b9d5cab6f73041d221a03f26455f1d65b5d84b21dc69845f32daf78d5504503c830d719a063a5c5839dfb7e2597d05eac49e5f2be283ee39eed9a00a043e6e60454bfc3b1e9c35369cc16172d7f499d88d69defa77d77da6d6de78e5a4d64e9a189b1a8c3762002fbecbe9c48e4521bd8acc3267c5aa8bb20de8626d58f98cdb40dcbf95701d85577f469106eed247633c96fe635107cdaa8a51907d16958981b9604eb0915b67e0595df0d37e210b747a8b7e1376c569366d9e30d225c24c593b1d35633dbcdc41fcee99a7391bc512289becd57d18001dbd03c9c24c3a7b1686cbc3493cdefd75aac4e1df98ebc023da39d2ead43f1f388f1407e92ef8767b8ce7bafe4398c064f13c42f78f5a1b243d4e63f304a85bbe16ce810480514be6df3d500232b9c49cf72e87424c221fd180c768f2b81414063137961aed4087585fc4b41a12b4fdc3066069b62a0c37e4f6d1f22eaea399b6a9edf7df8df0a8f5fc54d327024fa6d8abfad453fbc493e34fae1bb619cd2a6a8b0d60632ff388c14358bdd202830eb43ac2594da89b6fd3fc46a87f17cbaff9ea35d0ce3138c44fbd479195051f38890a44aefe4a95577", "a3ebd867429908d74351f46726de86feb0bc99235becbc46f9c3d9bdada366fac261e9993a5b4e0f1f18d5af61d28aaf9992ba204f8fc4d0945c89b31732fff1c986bc0afb40bee49863bba6ae30f4444ad8a4a6a7c8f16f49e6c9c328ccc55e86df7db47cacbaf3b664243aaff3c56a1dc1c0927a5c2424d903b3e2c52df78f73833a77493a45aea20243d5c78cacbd10f79544d6cf5a546361ba007b311b902820c873e21182c1c11c8ea0ac86f63e36fcf0789c1e45586d1f4bee63508564be983ea97c8d9cb9217b53bb967f9ab34c660309bee51865f355b407a274744c3aaff7286604654b004b0d160070e28e5433a43121bfca28b981a447cdb85871111c612de7c7f789717174b1a7cf90d76265202e4e027af4f2404aee48bdae45e5997a03b3eaf8d2c5352055150c431149e7928a0a6cdc5dbaa202b8a76d6071f2677406c305a86030291088d9e84be73c3338dcf25a69e90b4c4d4814b04b823b58080cedd8c01af07f4295b6fba5b86df43448d0b55790ad65db5f1f0350e9374a086c63f37857616ed6f41d2a30c6", "a5558fb55d1d08252e4a562753bd58e618f58bfa417e6247259c0955c601b0b9beea3867ce6d1a2851afcf767e28296b90cb562b8023a3039b049f272dacadc08b428ff29eb00c2737f4669c57a00ff091fd55005ec15690305dc9dd07594acdab946169d6e937bcaeb018c705d5aadd8d8bb486f40cc7146fc8d986903d7f18481e3c496bb09f545dfe3e1247874a12382cc9b4d7862cab04d309dedce099f2cf8341b572b2d3b8c10ff4dc5ebcc3872fc2984421608883c6172d337d8c79247b663d77f276de07272b9b0059ee63450d3d95245d5e959108836d991564b62339358adee662257340ef5744ce76ac9c06ddb8c23e6d546464b9d11137d3d6745d721c305d8ecd65f5cc1424cc870dab5e770418676efa313528f3ced35b5056898047923a52224164d98557c5979c531d94c55ff35ab204d8a757f69ea3250fc0bb50df3b0a006e2e9fb1aa4f0a849f2140ee93fb119b796f5f81cffa4bf0fc5773e3c1b8f6bcecdd4407067b16d24f", "8cdf0751d669d3ffbd154744ef4abf0865dd094c14a2d44f9c270b0ccbaf81cc621e2c91bd41c5fce22c968ec3a76f9398a36071aba8f9a42ca1deba1ab1c0e3b080e4c2c2bf00af1dce3f3711ece2f71b30b79bbbdacaa1a58fe544bcc78babaa85ebed7ee168b7caf3e6ea5fa8d92d586a9e313986750df5be8786a2f1eacb54ebded7213fb03a6f06edb02f5137c556cc54b4512765ccc7ce4d6c160d6e81a5d53401dfa9826044e0bebf88ea08c07330a76fb0c95ca7c196a99a6866703d4f0d17541c51efdef801bbb51682b6f372fe164d5d1a6966b39b14257d00844b432831f3c87a630517ba3546df0df51e03571e172f5c7b1101a6e9ef53527f04a3c34c61cefb218977ef81316deb98f92a62a4fe60a3aab98f600ad84862a7f7081d09c1f49e7be4a246e61ad6ff5be9203cfa845d09a105bb27339a1a9c1f9ed7b277522dd83cc550c7ced2b0aab640"];
    let expected_proof_no_header = ["accb87043ce207f76e5d79655a37efd3b5784d89130915ed0a68ca5cfe799b47a88f1b2b2d5e64737af3e56861e9082ea916b450ed6a2fbbd71d86ff33c99df9e86d313619dc2eaba002061250e3cd8efb905c582e3ec4600d3b4155a432e60793de019546043d9db0b60160990d12bbd8004da0ab745f8cdbf4adbf41570bcd7b45692e2167f97d5e7a230b960492cc163a816db0a4c7e0eb0fc01d7f145ce75724cf6f736fd7afba97ba02687664ea1f59da8a93ccfe412ff8a091f1bb242286029f298316b3b59674e220431567935369dbf4ad4fe788a890be59052edea58575186b8b7dd12e641058a137312385668de034bdfadd1ee88c14aae1e2bf77199e174227ad54d67b910cbfd7e79e11489b4dff679b3fadc43857e5fd5b0cc8a96ba0487a34fe78c5423eb40f5638824951d1a14a9da4b682713ec8d9b0e8a1fdf0aca34662c8e4ec81f5f18af2ff3f4bd04bdbec92902c924fa8010351f317e2dd6cca2ac7a428c4de4249dc1c46b35288b34a9907d955c494c6229f38213ae8e17a301a83d92fb51570f8a0e558143a7184538606b0ce0af1cf6acd38cdd11efa9f9414f638aa08f0373752e72990031b954bac1743e09fd4585ae39fbf24c88aa998b1c78b6731861af6ecd38c331fe9c269857f31fa9d5a62a82afcafc85c5cfc056b3268e657562618f47a65b4", "af6e1a476192e9c0aac2e3fd90986c7d36c72a331db82eb67b286844c619fba96cfa942363fd7669c4d81adb0f35182aa96ce259de2ffafa9db29d21f0c1def337c6d5e66f8a6bef59cbf42eaa3a7fa6b7ec2d25d5905472dcf69815aa60d651a9617d033de44a3b445535ef20a15b8aa5d017e88bd1e9424488eb46a5c9a4f974854578bd60b20e19b6592b2d0d04dd6c30a6d74997281520fe3fcb850b5430ff87f6b0d913a7c0d69d1ae7ea257ff23962a960a377f13aff573fc4ef962d342a5725da514fab4d8b9a4a80c4a9fe8b3b3a6b351b7824330c4245e32f9902edb59ab2f3c05b15694c4f73c93ba7ecf7679248bb641c6955b8496537f72db77c125c715894d98c486bbfaee395142416604bfc1f400a782551847fa8945c6edb2d242c1386b7aff5aa4b9cc50d84bfd56d277c36879714e605dde50a1e49906940f94ce94debb67db689075aaeb82e4c587c885402b4ff9239cb8f12a87f6bddb7198578b21af90144a07cf22cfe43a61e19f8aa9da6c0dff19a6394c01a4390927a3459cde2720120701c16f7e271cf30f0975278045dfec8d8975ba99e8314667473d5d8d8b899cf7909f8d5b876096873664a191533c8ca1942a98847115c877aa029d52fc24b5d100fc4efa60b03", "ac22b634af2ecf2a307d8af0194db6f5a74d46e397149bc3f24f733c54e7008b9c637f199bdb40c242118eec50e97edfa19b31d030749010694d44ec84af77058fb6bf08490d8723a937587075c95de5751c320e18ce1ba96b4b16b82fbbdb0ea8af0f0a1a14ab2806a34fb682b68de6d43f031097b73ef0fa50fa80ff8ef43ce14f1cd0c856c038d26b3b602cf2d50e3360f1ae2242f5ae7f342c010d1e1173ba4f897f175222d8837ae3d97314f517090a0e982eafa08fd6ca4a3ae56f16b0870bc3fb5ab318c82d061ec48d159f025bbdc408834f4439fa322565c137890933e447bc8fe22a22a0f7218b2aa1b6243c517c0a44b469772d974a0b7a78e5059c7e1118f888816dd97ea05cc211a5e2462fff1bccaf3dd94559185778c86ee2d8609a54fd6f08a136606e1722a0bc6934ce3ca11f2fc8189ffafbb55058c59e2eb759efaf378aead635fa28bf2f8e25322e25972f7565da862376551cdadcd0b252aaaa5adc899f9f475ce021a84b63689e6969f42251a6d658d719d0dc8689514fc437a86798df71a7e8fb8c9b0b8126560aeda29442e3e74f6cf2427c4680d173273860baa7420f3cd224d3e15fd6", "a8671f45b97665d0d52921bb5ba16715d8bdd0ac1c97dc56fe06cd9878e8fd3878eefde2919718d64df68d57ff90a8a0a61cffa4d19cd1b2836cdcaee39aa53e7d6ab43292f1dcf37da0b901a20b9dd2b58d6464bbd32a180950e6ad78d7cf9ea806a2ffacc7ee519bd3f39578bdf9ff52a6016c64b78aa38594f087840a750f280465353003c4152774944da29106f25ea6f1666ddc9d66ae624f0958ee8d25031405c1a08683140862a4882c0ce42405959ecdcc21ff077e7f159466c0bf26e3c724aa4dd435340a41a4a931322a8f30908329e8c6bbec3d32c0311dc581ebdac2340dc774e5d80157bf5a7593f8ef60ed65071e3eff23c45b1fbc85d4b4339625be46e2001dff6e2899085af58bee1c2809d82d0e74fb4c39d4998c47bb06f8fb1a9c225a83db7a19da8a31baf69a4b542b9e7317dbcb03626a38e3ae8a057dc09905fc876607e65fdf46b63f57b658d0859b42119e764fe106b7b0d893bf8c5586124194d8476b614c07c2ec444f016780df8f4637bee28028fb35a44423633d6680d544d0a02bd82f6327e8c306", "a11f2af809dd3d03fdffaaa2aa5763bba083ac0260364eb36352862cf8d6a35003f1889f82c7c4be2c8dde8c9b1df104aa2341db3f57bc07328b530a6497c08a598dc61396cb2b25564e8dc5a8dd84ae5b7ee85e4686ce8174727226ed81f0e5980e946c222d9fb5ec7e7cc351d6c40c68dd8777a69654078170943b2def9a58843d2cf3c09f3e9c5650075e6d161e781e278e2a83bdbe73d0d7b9e589642b20bc7d4b33d029735a0716864ce269398b0f76fb2de536bc31690c33938419c9eeb5ecc14d39a6a8e0f485397ce524aaf34bbeca851e046663004015affdae78948778dd6dfeb49a8dcc1f8a9a8f024443598bde06ad6dd52cfdbcaf43d0d6984a72bab05b1f58f5270dbcafbf166959c371d874f1548efe0f282c83eed22025aa3bd7ff4c2bef13f76d91a535b77ca9d046fa6f898a0cfdedd86cc830766168ec5871c1700e3c07831ce096a71c56db8038de59f85513305bc3b486d840280de22a4b3f77adb66f6fe2db1c76791a4453", "8d4e2cf78175e6bfd9004c3723c718e52b47bcf3663013babd8877789204144d604d5c24fe4a5c4efa7f7ef9afaa555b8a62b6f78858dce8e970ddd72564b6cd95843b79432bddb12be4895fec917ef0684d0168ece6b8bd97f5a4aeace122ffae6b5497509b1d5fdc6eb7bf67f900c68dc400bf7c3bd91fef5f251144e586e01b11d2e3d31e3e4e9c4629d72ebfba6772d8dbe979a91d73b6e67b664e52c3f81949addbb6c75683ef32cd2008c57d7e41da9b8334bdac419181cdfbeade237409879b9bda19cba75c38d798f62e03e7610004ae85f3b26ae0dbe951e8a16717b27feea2362b7d41c39255fd48ad7bad2f7cd88ba05454175cf0a86cfdb7ab933b34fa2109894206f34697c95afb285c5d77c6a794cc4c6bd6c93fb49f9e697141cd1b495db937de6049cc6cb69e1d40105aa3dda454e87c508006319dfe7b3d75e183bb49dfdda55c6fd502c79eecfb"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert_eq!(
        signature_with_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                &generators,
                &messages
            )
            .unwrap(),
        true
    );

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert_eq!(
            signature_no_header
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof including a header and no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_with_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    Some(TEST_HEADER),
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_no_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages,
                        None
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices,
                None
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
