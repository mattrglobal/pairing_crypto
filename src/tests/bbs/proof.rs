use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["99ded114a9604c4e52f78f58dc7d55ea10815d5ec49e4149261f119dbfcd3775ec8409d8b577455381d2811c5f36dc908200cabd1d4cc82f3199be7aa954a0f0bf6da6e8b14016aa82e2520ad71a4b0ca186d0a25a5aa1e5e11108ae6535d3b0878a14df138109da46de6b6b4ef38d452a34f1707135e3015fc3888b6d2c799e4ee160adb109a6148f4566f694d6d4c21994b4ba968b0fae1dccf12d8e40b30cee71eb8bdab58752e24bc7c0576c731649d3566411a10b6939755393a1300d79137def2563a6ba05686f590475d0e3770df33d0792ae065df990db7420fe14f0cc6b7cfffa5580c4466ecc45bc444cac0ad18107ff7b2828715e4d19ffe9cff5efa93e5e9aa57041c91e7209b4028b411283c971a9a3133558a2400f3a20131602d86a7b34d0acbc253ac6913e6bc76759a809becd22fb0e7d768a439da846136e1facbb593c950840b7f4b3c42550f744aa29bb7496f5ae4fa895ad2fce833c981d1f80ca31a92a37c90bf0c3710f060a9f3f7326f2f522ffa922501ef01a9d19e04fad2659c6069c35749605aa17bc38a0609be12e3821cd2eb414d25f36f86f1684bc77db9bb9399d71176c6ee9cc466b13a7dd7f0831f0313507b94687415e1dbbc93d35cf6ee2a95a71cff0de1d5f812de6300a33a150ca8b5370d5500ad486a6125ce8bfc2fc58799b38a6001c", "86e85b6c0213941910db57e075078a3288194384ece3f27e3fcb3caafe9e5e185b0bcbe1b32e2b24f8859236be85e0c9a39de730e63d2269d93c327baae8984ddf98e8143744e323c8a7f867994ec13955c1f3079f91aa2a33d36c6922a8daa79253886f7b1d1d2e79fa60123b8d4608ec6e9752508da558714c8cda3154d49f33eac1d08d943529e6cd8b0052e142c5516b31c9142287795f30d06bb5bbc554ab370bf958ca9412da1eba80cf80d4c15d4d3d63519ac7adfb944e345282ef9fa38f0de9cbdf01eaee1896ca11a3c3570b11ba829df3d086f30a89ce47f84bfd16914fd999a1c36045f8fcbb765533456ba32c96f0bef51d2f72b04415735556a55acce9690dc2e59ac4747000edd57326583fcc941add9b98198b1675c9ccdf6c23a04977922ccee2becb6e1b57adb646d796890b841c1ab7525dbae28a750b98adb4ed0b650acbbb3b414641d593e1673f86788cbf8d98f285fa2800e50b063918ff6378e109bf8111251973cc9bf8597eb9e0f3198312db5bffb5b73e850d6d26bfac32f1d872e4f04787a84ce7e44ce679305ec693b659a16f6aeee1b99965c084f911202a75f6a3c349845c5b1b45250cd1bdb410aada260221295d02d56eac0450342f5b3cca0fdf2a4b6ebf7f", "accd0589c03c1935204357f5006131739d351eed9f53e5284782a1c5a3c9f38ea5ae85e8f6a8b20daa2f857ed1fabf48ace23d91995d3f10eae48d9e25d01dee256ec398837ea03f73e33162c37f4c5ffeeff51f1992296cfadfb87ec59025eda77d427ee1a253da08c18ce79e53a8d45d02293f0a10405b4cada10e0e64e65c78afb89513f2372f694ef0dfadf644502becb0a4bcb398ea0d4359632b3d96a65bd582fd7c349cf44c3422737aea97c56a45f8188df12033b9d2b007cdf5334957e4c84c22663f57de999fa144edc9fb1d0f58e22a980d9dead217c33f23b948cbd154ec0e6f88fbe97ffdb38afbcd4e0851c2b967a6287deab4d85dddee82e7be0edd418ed639534187f496393d0c3f40c8842569e6c59dcfbd74b5e2fc7a4c24eab38c641f4a86f67f8760334c76a4267923342da11531882042c9964cef6d75480b864c9e336f0c6b04acd6d512c8361f60f4f612571d756e3b7cbfab5e3e0a4c86b38a50e9442f5d31a8f069467e6780a6e68da96ec8dad81a55d673bad7765e8110c320a85c111e450aa83cf94f0db0da94b8f3eb1b1fd8caa9f874a3db5c57162517953856514eb3cb66bc62af", "b7f48f2f5dcf78d9096c92b6398d1753668583343d30a911b69baaf6f8b97e46dec805bb9cc36585e74168f3e484de138359537ef5965d40ae3fe7ccef3a2aa648bffd1d2f57e6244e0d0b5c014bfd955e6262e6f106b63d01ad42d35cb178c4b3727dbd1cb390643929aec1fe784ce9741e6f3848abf8d7e01b1fdcda22bdfed991b39f7757de4cc8259502336f13be456268e5245fe532a0901aa7eb83530edd6eb3c8b93dcf4a25e1b64448f0d47e3d3b3ad738b3068824bbc85fdb72f7e22369537658b0e9a26a9ae78e0133b767177b816c90437f90d0361c14618e6ad98d5b195b5036d64ae1919a8546445afc064ec3b1c56e01ee753ffe85d0c8b993c150582407c8c5ecb20b62a88e7f0a382b429ecc6b2f44caeed50b431570ced9218928acd0284922df813fa7df7617b70029e97bb1a53416341247834c285876916bfa0be6f5372a636ada487b69acab5a89d6ac5f80baf764b05d288d87069d38dd71250c1853cbad63fcb8cb485cbf3076b2bc8dd29a45b2bb51c5a883178989898cbb4e4866514f9e6f8d9d7c3d99", "b3fc8652b359c6bc2b7878fbb9b5d71a5bafb4c555c0b4618ff2e305fdd9480b55ca9e24b556e0f537c2af5726e25349984443ecefc673f7839d10fc72af2473232f26218938737e59f652c1f128ca0dd0bce2a71c27f43097b9e9ab06c13d049275be69d99d6cdd00e9687057dd931ad1a5495816c57056fe8ec867a3e3cdf7adc6dc4cbbddb12dabec812b11fc37025689ae53e91d1d1475f9a347ca17acec2028dec923925725bb6bf577753a72772b702ec10379746ef979848b4b4aa9d73d1f1432e85e00d820d81edd5c00617738ff239aa61ad1bb311397978c0235ade870fa1ab7e48a48d7bb670cd159b926396d5e1c73aeb2d3dd75d42a161662d5d30cf11ac762b1ba5f59f9770b591aac47bfc6ba0c688dd0f1f5c7a8572cb578627dba4634e53a8e40d7af2088c776c40384c52e810830c2f93cf378c821ee5b64816d0fb055b34bdb893f315c16dc0e2e0733df4c86d4728318639914d9890a1a6abbe80da99bd1add2ced106d5c393", "9034069cb94067a4c75660786c373a58562f0daa5bd9367cc030e448b0070ed48be9e612c3c332d805e3957c07e1aa1f80d4a7e1bd5ad557f013d29fb3b19be1e346fe2edaf0de30606f6498201cd47664aeccd36c0b91f33ec68e54569f8d5d8b9d98ad996b0a8be9ae2964ac72374f032115d17f3f477495bd6abb5a503ba1ed63e99a6cc5b004772419c50f746bf432693f6d0c71e3508d47071f193d840b915fa604bc2fb43c9d4d9f373e175f984b99b01e34ee94d0bcc7f99e2fb903ad9dd0573331b945573a688c36901c5470380814ffb4ac624c0b5c68f4818b1400c7b7dd994173ff5dfe3b61f74343bd0e552825b6611354292a8e3e3345371eea92ac9846469534019e58834d445994222c8d3542afadec843bc5087d66ab2f8dd9b5e842576f72e181caca654e851b46730481bf2e0334d929db181bcb322296f2332ac78a8225d5e3d8b04378058f3f"],
        ["aefe3d3270a6f6f37c1566bb261c33772caafc2b675c23f69a15bc9f4c6b147031f3a2f172a8c166b99b7afa24b3397d8417b4ac84e9ddb47a32e5c2cd6d9a3199b3bd17f50fa921a516469c7ea4d895d0385de8a23cf78c9214b55734b9edd297cfa20aa679f92da4ea8bbc7c436e5400db65a83eeff7adce242e89349c21cdd0ec1bd7ed6a7eab8ae36509cd3ad4e7175b654b79583ed602f2c2b49fdc353f360113e2d5d4f76ed8b72d96846d36b1609cb3320615b334315ee3e44ccf2cd71cad82be6c38c1c979aa8166d52f45202f14f9b00349cc7c885c6a825202c2bfa0a7147270cdc3a6513bbc4e4eab3e1c3249e7a54a553403931ea4c9afd1580d1726ea6f0910b49df8523dcda6b7c3d051c2e15251a6af135a2037ffcb4291e0da1fb3a5eec1907752a1bfcd8f9b50831e0c9be56d81a2de5ed80462401004b67ddb0715e46bbe414be0d4574386b05c0da374f187f9a52cb1f64445753ea39a791e81d1936b6a1f3b92c16a818ca7dc07e041721fd5808724488ee792f3543a7bea12ce8c896ec79ffab590509e3e6e6299c1abd52fc8877c8fe86e300e3082353072c423bdd285d891a346e6db00ed338e4de8a967c3d1f03c93d6e0c60e595b193229d54c17b77a99f63bbbdea7be3c2fe98d7962adc4832f8a8adf5468feeb6394cc31f347d581caced3667b8ab3", "a307b220347a6d2bcc3275d9b186108c00ae4c1c2db42e50ebb0d427edc08767ef030cfd89b518bf839d6fa0e846eb9891c5ae468b40902c2cdd4d1a6e4684c067ea4aac59cf3f32f55cda561a860e796fcfdee12ddc87734ece2f440a17d758a545d6404a70b59c8333754a59e77c9cf36e9a3ec26747178775ed26f2988b6f9dc5b4f7c5c9d94ddf2c6cf16654a749153f2e0e61f38fa15802f1247716d1980f42db571155a1774dbd418b55820be00c076b9f86afd9a33972a5ce6d272e6986dfeee2dc7ac7465f2aa0aef7c4bc152d280d93bfd01d681cb32b5f80d6d9a88fa02a91344d091b803c557244de78fa13255e51f31a872ae37e1a8c8a13c247d236ffc1feb3eb61d402f548d2fc390110bb175a2381fafe671eb410fc90a41ca104cb8b7bc26b3ef1e538e2416fcd50440370284c0364f0d06824db4110c90f1bb27c05247a132c7c3f8be3940ac107491a4e387795abc419b56baca478eff56b0edab659f3a5103ac4ce3ca88a4f2e4ee4a143b338a3322164ed99c9dbcc9bbffb6172d8dba7dd1069d41e97b7029f72be203d9314a96aacc55eb20a7fbee5f977da8a7f5e2b0573b15738e3b5c7c331cbdb14dc426b5e5d8c434659d72166c71b50d927afd092a361b1de4bcadfcb", "b6ab34a06dad770b81dc0571340bee55f2f098f9cbf6aa500cac2e7e78bec8ea80e6024d181a7715ff2a14edbc550d0e810a5f1c2b79b350f5f27d250b616feec56d8456add16d684e2f142b9bce157f005b815a5573854b31e5c9bc3dff9594932d5e56e3088ad758cc0ec2d34243ae729fd3f5db60adfad0794cc8d3d2b6c6c0d71078d7ea3435cefbbeb9e9204ac600860986522c14b3fefbad6be9442f430d09b13c4ffb6716c803d2c28e409cbd67685238d9b0c2d74a62a6b3a2f7eafd230cf745eda70a7e0d619e6904a19f8a5e53a2a328e8fd90e595dd98aabe1feae4f9627767c1abd5a39bd63f9ecf49b432cc2460b6a1ac376a49fab8359749b600c25af8ad64cfe992c6af0140a5050d6e7200ab876d4e183197e0b3609a8f77a77d2dd4666a8a40cf7f5656cc8d61590d68f065d9a247142fcf7fca6b51b96fc980c1bc07809a2a794fb861977e1b026cb7256f96b96b20f00bd1ac0506f419b2f84f7408e1196d5f86fbd8deb04f2a08baed34b654e152fff95cfeaf787762babac8bdba04af1d8d781ebe48bf32ec686ca075bf32c9b4eaba7607947ea213f0a6ca3bb7467fa3779f5233d1033f4d", "a63dae25ccfcd80b5271ad0dc421bbe1572e1987de1f6775ad2a4bfbc835d5c9d17be67306dc42d32fd395c9e7d6c23db8eacf5acc30790b8c54f15eddc2652d1a4aca88018e61229c5df6a00495eaf226fd4abe6a33de663cd978d6ca4f692e90b19c8d9c4e0ae4c9bbd22ab617999fde31de869445c9c53c7c722f1a87d0e2a375c98d92ddebb8448fa60fcb94f5de10bec5707c8d471d7dcd541c7b85343e39a86ced5367655c1e72207136221ed0653d33b256eb7f314192509416cb8d727f722ee74dfc6352b7f2254a67b1248724f76961f1f49717f16b55118b0d4d7a9b656d0cc19827788f4d8685b48e8fe45913b17e13ef211e2165847365768d2d5d4e4e1301f7081f4bd9415886af0f6f4ff4d376e000e864be0fd03e239afdf523134697b099ad6016b849dc56e489fe7380a927d73bb2f98a87267701c1ed71ac7ba17224b23e45f0543973051c316f6e22f4f60bdb4bac41e0fb240e0fc1831bdc8f87ef3582cd3763fb8d2b838bce4f5e9066e363fe76ffb117a567723d66289bfc8d6c1081f1f1bf1c0fcb888d42", "86e18f79d93e4f9ccd83f0efbbf591dee43ad012c0c9c40634b0d8572c5bf48c80cf5645e03ed3b4ada20248c26e87998ce28216cf739c5259192e883cb0d8d4ca427fb8a8ff57c6fd4afa68e1cc3fa932abacbe09ee6753c2b777c01b8ced72ab74dcc68be987028f0d682f1feeadff4401bf019375c3e0035673f24c1f108e5200116f721d4367cd8e761e958ea3df3fd728e9e3242aff938d266763f19770d8499cfbb08b4279f11e29841a540bf21f86bf2314d5c6358e0e515479f82f77a42bcf801dd237988c1eeb90866ca2ef288760ef60274e679e53ff7d8feeff5525ca15fa73fdf8c5eba55da0fa97a7ab4ec09ed8a540d9578dddb0492dcf57476947f0770c1fa90ec3c36fd2ab7a5b8d22b2589088d75f9b29575ed3f657c1fde163ef1b4d418120258462575f5de56e3a58f81b0929d23739411c920f89234513e26bbe4a51a59107def013460de19f6dd6b4a26ace77e6505999c5933b7af38a2a85658f965f9078c7073b06576752", "a327b3da612eb52125fa0084c8ce0a3e9497ad554e39ad45963fcd38c4fceeabf3be35c8c1348de403cf35aa64f367a68ccdd35333f3c191353b96aab16bc60dc61b43bbc310e53049a66117f65c8436cc18294f8ea32eb3507682f00902d34f8e32e210e6ead331cafdd786400df84be1f17e43a065ecc9ce620a1e71a206062fa1b680d5d5d7adfad67b0fe3f921550b4359232fa4920406a98002bb557c18479b619e8f24677036f325b355306ac15702f165aff40dfd69af7e241af958b2b8ab8bf55219eb1c0c305dbced022a983de5a933461bb05abcce0a55bfb2e15830812fc7b2fd7a7e3e5a1d0c04c56e434f9c3ef1be399b94098b6ca6ccb4eaa35a9e399b0564b5a54f1fe55fa1d12886224d191b0a64af6db0c1422555ee6187446d0ed0af4ddc6914085c9e2db375ec374260b5db179c6fa2256a4ec1ef41a07343659610dd570f95709bfaa750f7f0"],
        ["96b5356964877ceb44c841db761b5d18f0c34ce2fa478f7beb0407ecf88bfcb918226779247e6385ae1620ba62d9dbeaa01c88dc7447d4c66a726d920289e36c9386298bf5f84fc53499d64bb2be2e424902da7677c1fcad9243e7b256ff656f844e41f4ff1a7ceb564c76cb1a1be7a1f7dbd0a2663f21a92ec03039f1c970fff75bb5fc7b00cc57b31d39698f99afbc4bd254472326d7150fdae96a4a8ef7294b6881d059a0e951ab2532ee993a33c11644e3b9a40aa6cfe0fd62932cebc58957aac4e73ef5b932d7481a90cd9e178601c23e9705e32e89850f8174c927d5dfb50422b01fbda4b4f6746a687a68841720f6823c8b3ee73b8ea491225bb0a604c0017e494544276a89376f017f6fe8272bf0a7501951529d3747410f8c16076acfde32ce4821ade83082c7fe50e707302d3b1a4e36408275f2ba02c2c9f182ce4b1594a9b61d8b2d20f2fa905481463939958b0effe3e3bbb5ae5706f3dae75835ef1b4ea5c448414b32f37ee3a4955854eb6512d4343a0736ec4f163b6d7f9f625bb41eaffd0f572ea2bc46c06b7487577156b4810af1e03bf9d1447ffa2fc7c112c3f33bcbf082825e7854f133f9c60dd3fb5e27cf8745abf987538f0fd54836dc5b79046b7fdd357c62ea67315204576f34e0aac7257dfe1aaa19e8009dea12390c8e69a62b4fe5689615df08afd8", "9135dc3010e333c71c2994b89137c2b3bccac8c71bb111b114fc595591c90e10c117c19d72fe8cdeadc72a5a99c4abc4b2621d24c812aff5d4d0a7fc01991c867664218329262e53197c79554e6314c816af774f327b686cd43fb7d0b91b744c868b77ffe3d4892800f2a6820b4e7746d82e63cba2cb34fb6d9e234a4c7b34cd5097926e36077e77c71c90ec1be04bc7656b41fb9af89769bb15ed9a99aaf4de89fef8609900ea2b4d5fb8068e87afc54ecf734d84e7d18bf54ea97dcb42989fa7a5407c0faec5ec84c0a139235704a218a10cd06eb6fb56ca82b84de212ccdf87b1dd44651d1096ddf8c8497ae62030366541764834a3efe763e0ae6c5efb879e939f9ae64da6c523bfedf661f3b1991a72bae4043d91180fc9aee3e66dfed41550db30fd97a966f1bf4e2c957119074ea3d06ab39813c7e066ec8673d0a2a4fa32a635f448cbeb14d4592eb570c7ec6b374722a08643e611e0fc173a72a4a1ba56145fc23e7cb1b893dc40618466a21b3c690138904d499081fc670b44d9559c39e3fc8712f18ebef67d6d152b5c2e5c585b1a6e79dcd971988ce556a617103aba5cbe541af5a0aab78d940c30713a370a1e5f6454c319a5921939d446c346dee1875ad2863b0484e238be6401d82b", "8586abf9f5d22fa5ca54e99b4efe01254449703d299d48579661a59da91f42cb94f43a151fc2426167b3d08be78b378cb23fa2663576f87bda487aec5ee75d50d3c65d402a7e29c85d525876d83a34f1610577669c66fba36b8f61bead3f4a73a37abec8c198345d4d76f01f8261bb48f2557abd19839262100b51d273eb9dbd64e9fd4415a5e8c914b0d99915014a4452083017784b12aa5d55e0bfdd3c91c429a4d3dc5fd0af358e757f7e615c76455747b3d4826ccf7b15297e50c81d5300dbcb40642bf09f6d752d7d4f16953fb86b863f34d8ef1adb2da43fd664871d8cd26f0d0a50d34923567400738deb104c25935a02d84f24e3609786dc634aa42cf29892f127c42df86c2592427e957a672d8a1bb2d0cadfb7d799946c72499e623783d348e1c60b35d9bcbc2cf961851a19cfe851a6ce07455254e3968d4226e3352f7933c2d463d9462d261c26d92e944ca82ab17d03075e7665ced2d52fbe833fc959b10ef6787150818d9aac8dbff30af03f2ad1c295784b7a750969c6fe592eeafe0d909b0a11f40633818cf24de50e1249df53f75e55fb86844a099e34b6c7d8b63d3b74ac5d74c7350c49caf51a", "8b6a023f72c2ae72907d805350cd8bd9b7d17c2d2e7cb64054617c04cb3503b6fedc36c79d5e50c7a622151bf356a11cb3070be4ff7753d5a6cec676a2bd6ccc25ca0b5e2a0cfe72b195aebe43fecdd99d096c904bfdd07ad3796f3c2fc2c985a74442be7b6a8d750ecba22de0d90b08fe21f0371be7245a8541861506e6a5d9a4ac5b6941a3a92998c16686c127b33a65f064095b0414fcf95e96fe71e519045476a5ad6407187bbfc058e4fa69931a67e09d6ca22f3ba2021aff9d6299538b0f6ee0915d70f1c556626326f75ad96f2f8aca492fb424353952dc7a9ac0165382451c432224c2f9ce6602448fdf03b36db225439b86c7cb4a260af6f0f3037d0cfaece533c2c3fb8d9f26c599744e42355f7d78fe031709321ad6d9b2c8ae3b8e86f8933a08fd29eeb0998fcc91ce8d50ae1664ce75d47bf1073c3d86fc22f0178ee29867c2076cbf99dd240e40863d00ec4f9ea0472b84eb639d9a2d3ac0297ba5c384d032120c177432e6730ef6fa40d789b6591ce0d9e800fd9a395a7111f4d23494173b73e0c49e5f929545757f", "942fa437d7b615887813046aea1b73bd950fd92b0b2572a26985892600874cc77f7df2d9b0d42ab235b2507c759514f3a3b803831fc896da2aecb29dd1693862951a111c11fe1084508146ee05b2efd6c98c84222f62e3192b8bf11571d47092867d429b8a9aefefad6904fd844af1b5cca2653a2a07214ba4678006d74f0e050824da82f140e3268f803d463e893c492bc9d91c9ac277645e491a1e3105c71b778b5a3878bdcdd6c16f43b881d6163124e5509b88c401201f6c2a7de5432a09fa908ae1522ddac90b18d35f40d9836c27969cc775f3469fc904cfc3607126b2ed291518c50569a5f0bf91a439b20bbd2b22d12d74d9b33ff4e07f8916f730c6ca57b8127f5f4c1ee4b00106a5f46e6d032a0460e0cf0378d28353375b93cf00676a2a41645bb7351d2cf3958091593f3b01734a0b5c4dba38db8162ff09c4749cadc2ab433e332258e3b8de89a3f6ff0302c320fcf825e27a037f7d28b666c59f748ee9c191022b88d3dd6cec37eb63", "a00e00866486e5d305b41958e980961f6e1183adca0f48695b3892e2fb4ad8f505545207b0ad4d5a3f23f0dd5e9d30ebb134e5d0bc94c008e1b3c3c4d55da6e7bf531d8c45d872263e6af8b4f589be87861d41ea244091081f7f1b84513bcbf1923b734418ef0a86ec1e25162584a5ae2894c5dc6ee0dd241f1c4f552fe40d41dcfa1ed84d307cc8c2ef31907f266c54607f799a42a30b569b69d213752cc43be5de1f92d89ea394619728eab5c4838d5bf97ea69f35e8c23e2c5eb0d87b867b570e061c6e7a7d67c8376007d87485ff0ae1383aa8eaf1c1d8d5080f85d7c86553fc8159fb5c7d1fcc9eb75fa197652f6ce336dae2b1ae0a4055a0fdcef13e04ddceafd462dd4b0034297ae874384ef314dd38596ecbb4fce895989c107c3788170b4f9f25ecdaf1ed66306e8924787a07d5aca44d7dcf52e2d2ff4a519b9a3450f00ead66c85c2139104281dfae7165"],
        ["96f87806f731471fbc320b9eea76b1c36e304ad9cf72a602f26946f0de713b91c70ee0f6088e1c3f9ce3bdfacb71877f8f71860ef2d11ac04aa50fb810d637dacba89bc91c04561d6ecd336a0dea3b5e51c66012a52b4bd0574febeff7dc85f6a6123f68e74d61c2c6f74a548f4506e1860cbae3e4a29d895cc77db1cfe3addb953c0cdf7db6b42d6104a0fbc7a6b0e432cd75212855d828e581ca6d3579e5ea9465bee0ba07214ee4732b64415df6dd5017b47ae4214838aed42c8b0bda9e3a2d0142a6737d9e13fef2148859e73ae71d1aadb05650911224ca8da8bb081ade788da9ec21bd66372ae7f55c745b8b7053b79f7be6e5805418144212be5b512c4cf9e111055078434d9200e49d8e012557df47543b6bf868a20c88052abb014d01192568687531016b242127192e261f0ac6dd51a027a5d0da9c3d4d05fcb2a60356f25ee0a181c81c6f4a957f10581651ec24f9c829501cc1bd44deafeebb1f857bd8d5f334677f83721af4f6ace9880d2ff93a00441c21a54ea61ca66678861499add859b5f9c9139531e940b9e5bd578c56b64e11554ecbc254ab22a2c8e2748bcf5991fd906a51cf0b74ddb2f8a8636cfe70970a30cc24dc584ab1c375d6841ad009957d3ef2d12df721c9eed880543e8f4e08c7139af873573e8057bfc7e0b14b70ad7f4178582e6b33ea3eec47", "80570cfbebcc1e19f84d086144a9c5db5285960513396b29c359719e32bf41a303e5bfbc3125939dd827333e18720bbd8090d36f73d8fb3f1dd770114f5367af3bd2e2b9d19abc94238ac2358be2e6e6c0afbcb08781564774485499d8ac5ad98a3922617bdb2035b833a6a22b9e344733bd47d8f17425c89764a1fd1a8555ce26a9669e5fc60d6de9d619cdb49ed00673515889e88d8fc8e7fbb7a0abcda6d4c7c99f8ed7b066719ba161173d484061067992f1bebbbd1b19fe3bc3db02f59da40b1a69c9b4420d8d0152026c126f1947085f25b92ce83e68a913533d6b680d24fec8854a2ef3be55e6d333ca783ba9466cb4ed85b5d52664077251f5df114174ab434e710a5909fe84ef9f4693d01629bdb7a78296c99c95ca89188c5f0d170dcd183f179c1f4538d726fe77cdb34368202d7a6eadcead311cbc58cd5a9dc08c7be2619725f7c0e1aa337be704b2831a23d458dc43649122cac4567c265928b5179b942a69daf51eefcb62e6bee9054cf0bb6e53a426d37d1e3fa8bd340d45e98fd65435039e3843ef4cc16cddc009280e199849de7b8c7b8b94c7a1b1f7b556caaf7250298238ad9c52220ae6d42f53905632c4d52acbcc1533c92f07717ddd380a9aa9efc87c4aefba46ea792ec7", "b7d62f7e23676088e078b112bd7fd7d20b604535ef8c872198f4456a83b9dcafbe54920f3883958092abb10f26a3e17c915c5ed926d2ab5bc43f7da5f2c9abb56c58587ddee0c6d14dec66a6a64ded1d692c8a62c5b9ca0f4ebb2962e01edf9d8ce3ae775ed34759816ae6f561ebe1eae0dc89437bc7b0c0693d2076067f6d778fee47522a1955210e35c324534493470e418b9952709cdc3dafe6198083a4bae9abe116632408a60df4b55bc362c45854d3c96e5329060ffb285d18c884c379f61e5d7946d9d916a8ff3d89e337d3ce306d5bab98145b2c5ebf8de63493434949e7aa731d97c79e8af9094a19a805be060b3c4c03ae7614a44c918d2bb506acedb68918a745fc82f7eee9d3cbf2bf74611c3c1b60813a2f905fb4919495c9ddf18dc88f97bc832b33f84b7cb80caaff3fbef93bc74fe813d95dfebbe5ec650eb3cd6835994047cf61d408c0cdc34ebc16a95b2ce031d8e6247056d68578f0e329f490e4776f8137d16aa4a42b8671d45629f7797ebf6208d93095c526f1140dedc12006f30b3d3d8471a99dc64186354cdbfde27f1e01ab466043071c7d283438ec4883218398199e336ad88afe56d4", "a11c2935419d88ec30d1bf84192a66e1030c0e9c5930a411c8b6595b7f5eb597a841a3a43591579043f76ac8758ac2faa44e143a4d360e68c969888b6dd9f1e00aca5798c730fbf8dfb49cd24e0293a18d7bc2f1db619ae96a6adb4ea838de2f8dc9be490786f24799dd116fcf9a96f2a43ff918511fe4fefe5efd462328036a8446f10cd270aff54672e6ccad769c631adfa8a2a168dd89e572356b8ac8031b46c273ab9eeee9a275fa554ef555b9d52638a1d7b2f1696881f01e5cf308bea3d87d5aea39610257144cc5eb01369da81b1ba91bbbed42b1753f52461bf6acdd36b59d755d687415448df7a225b786961bab1bd12123ebad1d5ccae5b8a8c9aeef6a242c4418ded8c45a84916187235f0f1d681c065ca5e1c6b406205d2890d4a4ce56cf37931b860451701be968e2a627947a550e1221018eb9e697e2d6ba0277946791f0a32cfed2f1bb204e320662043437c76a047626b407704f35c9844223f3ea5336e721d77275f1f4e4830afb03a11d837874be83239845a8595332a6faebdd5649e0c053c742782fa08b3ff5", "b8ccaf966453685ed93dbb13b1dd8884f92a729a755f5535c6356b251a77cce7ebfde215dff3a076950aa4ecc31eb0fb8b5c39feaa63e13a18d21398de127a641ca0c6d39fd70fd0b8947d09c15fc087847a93d6d44e19b4addb03a7fe4a978b8bf3ccf2480e1aeeb1f5073c8962c1086f287f8e3b315bfa8e72307e9b78c48d802050c5005ba4193b95b5cceb8ba48e3235e43cfa01f4b8f42458c12a692ab917d8be3cb5bfafab945d6e591e992b0e39c5d4de6e2ab07e25f2b0795d831fc156bf6fe446ebfd397331faee1d23a4535e6bb654ff3c8266e1f5c4a50a8a60389a8e3ec2b412b39eae01eb4e8a7621d2212bc78458e0dda57fbd4d1d0bb19859d6b694f146ed9caec2c84384e21cfab01f6907daff168b1481ffad8e276f05ea7a896bb26b6de49ad6466821ab315b8361b741d8044ecdfba6c72fb0e402e47b54c1bccf079c535a6ae25e96fbc425981edc22965f58ea082e003f0056a6868b4cedbf281fc4b6726d68073d6304ea2f", "96024d698224a620f393ce581c7fa9470cebd02d5c2f3e07e9e050cb335e196b6a0d7aaa8987a8ca295dd09fea4c06cc8f9aa8848e8b595335da970e206c5c7c38604902ef6483217c0b7ec7729c2dcd551c17c177c0edac58a98a11dbef42f5b9b417cefd7a729381e237eec2c3db2bdc2f8974176ab21d9eabd13fafd603ef106c9e7d1dc6dc862feceb19d005cf5b5c15efb70190dc8aaa38fa546c5ce596b3a5c82fd12a65dd09aa9865e5fd554203a6c936bb5f43614244f7c21a337719fcbeff78d2f6136180d9514e0dd79f7749dbd5a3d29e40c7ff86a7c5f79018bf56739549202054d989fdd828e683da1a37b7b0d14d97f0bd98613fa0566ead69b944c71971b1099d42424473464c025400aa21679a59d99cee237afb715555804e47f633738c7380cf7fb45cac28a5ca6ac313c6514b05daeebde769116e8259cd6029773cefbeab6cca6211bc2e95e7"],
        ["b6fad829e56efb242988f7cb3a6f3467e1c68b6fc929513214a3c95d936a187641451d1024211456b6c9c95bd4e816f5ade16ca69641b4268e224c0215a6536c5412e1c50c2562b1bef6993d582bff2f0afa44a7ad10a5d90fd00ddc92b37ce9af11dceed96bac34ac64eb3b80d2cfa592aac57a73603db3c9ed46a4db7c702b0f98ec1e2e8458c3eaaa38f996a46ac25b6767a657f8a2d49ce572a5b4721f2f9960b248d3b31c4d287865b0b60e2cfb6a7a54b545da106b378a528a6c1d3182903a01e4d6d7c26551bb486a0a560f362fc6013b146d842b41619fb64b37b675e079cc1fb1081be293b60b82a582a86e6e4573e1288482bac64545673f930b7782dde0a55b6799f07c007ff1819966b5384d2ca5e06dfcce660573c9d008da38327ff2194d2b0aefbfe83108c99c2dd537e035d981b2b67e403f273fc0b0ba5e0595a6878e739138c09c9f659676028b68ed29143db7408322951953fe97db718c63fc5400e1fbf2dbb25da6247ca4770b780dea2bf9a0c0f8b656bddbd2506caa4eadb7c7abae88db81e16d8aacfaa321dd30434b82fdae8806abf57b2bf204435d5bf0a1fe2ee1f7ee00e87c5ba78016c7d6edbb5fd82baf535b98d4e43e24d019619d4a9a3c37446a08405125b8ac589b82b848720715590da4c0d01147347ad8119662385ba8ae391ee4cd2d9a5c", "a38c65abc52f4d1a966e61c3ccc0f6f9befba3df9664600d467c16c3b27214863d3609f53e858ee8a35558e874ea5e9a924548f0b8e79d2508e2c500e9486831858918d3a53fc2113d530a0cfe37d73bd6856f5d353e84af334603674ed433b1a9752c5155f8ad778c305344cb2957b58c1a0bd5a58edf3c537ad4fccf0e1c0d407cbd318626d371708da2e783c58f6b4d2ec308930db556f9d1ceb2a8df2941c0f72cacf09694b61e0a7f14126a430a3ac52eebe8d7c3828830bda1457af9508064e75619d2fa5779e9372624c8816612bbe0d7544206162e286f3c31f94abdc2d4ae876ae2314207f1115c194bdc2b29bff8da412ae5d30b9d68fa6a4c71acc8fc504077ee291e888d7d9332eae98163b502f8cba9cf326484ce0f7728eb73b38a7c378e0d06fe0d33c344aca33d9062c742d82556655cedae296d0352380aa76e6bfebe59bea82c8d2ade33c5eb2c1e30695ee52423f4447eee9b4de3cd8c3e6416c3c15c929679141e3934fcd81b2cdd90b8eb91136176640cb0f399b0c50c7d5dec764241e73a3d5b7683da84c10e6c0887bbf9b0e4db8ccdb76056ba563d1314086586c75254daa1d427dbef92396022f79c987c1d59263cfb4d87a7a0977dddb888831c1eb32afa3125c7dffe", "939b82a3b622a2706cfc50b86e8b7483311ff8e0773e2fb718ab032b7a32612592fc7974055bfa52a2efe63c72b21ee595a8da0c18587588630829ef8c57f5c01812a032d438856b13f4866fdace6db451827e2cdbf3147254105bc04da8e0109317706c7c344ad44004b47b0bddc8dd718397a9b98e3279e0bda8fd0d281653b68c7b65b81cb225a85344270c3a31ff513ac7e448cbdbc749f2b248ebcfdd53de23bb847f5159537591911f846bdcc70502de221412ca0b9d18f47a21567103496677c654a38c712495e5741846bf7858cc4d1b2332bcf27425193c25698a909b70b76fc1343851e93c8320894d64d738eead8bc3b24e0bc58fb37532b2c5e3805c4dc548fe0d6e24c455f75eab458f1ec704ced13fda0c2bd8eb5fb0d721063049af027b84c20ebc532ea030b5f40e6e29d7404f3bbd6c4f818392ea3ab89e7c0e9985126a878d7de2ca9e4dba1f4959c275692812f6ad4ad27e2c40fd41552ee3cac3e928ed2d50e45d68c02352fe3d1ce9c445dff4cb4d9d6b465c395d6147757696c97da81be5812aa96e76616d5e8807d7e9dc75f1b2f1f765fde5529a8c9ebcb9fd0c9a62d0862202da084f14", "abefe7a03abd59e4ce5b73a16f4acebc00a6b80532cf6603b2cec1d31295e1b2f141d7dda325d20be9da2c74fb0d86468ff942fd8d7abfd8564a0f446f43f966063b2d6dd5a92e05cfe906d4e7c8037045b1df3db8c1504633552d19c489462c87f63cb7d4de7c74493937b7a62361590389aa04dab1ae7c69c79e62f67938f1f6aa7e8007635543b14a43ce1bcfee384636dab84cce0f2657c1e7001b727ec4c3b66eb50d04d59f97891e2cfc7742393e60560a5a74b766c30acafcd9fa2ffe26ae037000af03c2b6f33c8d9f3121e60087b02ca494961151573984b5a6c308b8140eda88ea9f34a0f12f08ab714b680432636ceb9bb569bf00874915496cd84e10d24c961e93184a1340f4aef1cf1f68630b4eef6c86ec770414c6e02d35597718451595ab71e2b76b875b95279522405603d8a2e8e4f9b14ca572d45083563a9e028a5611ebea4624f91ba43ae9e22b4598fa7ff647e04a6b43f0c1e34d69ca9b434ab1bd1b5e2f48739898f81a300100262f8d19f0e4b9028af620a0d37a2ca2dac6487681ed29b3e39a4147883b", "967693ce223f7f23459a92596c42d9740bab6a8fcb74993a28240e351845d58ef7e2bce52ac96e35a6e3124d6b0e6e4d942c42ee69b0ab6f00f722c4f0d52dce18f2ab42cafb08ac79f89d5ffda1d66fe02a0724b674cabc929d81860a74d8be93bc840d43d0bcd804fae7892e26997a86385c728196619be869ebb80217c6b238df7e774a1e99342a14114acedca4fc0fc9f46cb8a9de2a9ff23e7831d0d3282c3cebe49bea404cc7c350e92abe44255a65086940ad0659b712eb0651a3f4271cc4421ed422af05ada23ef3871ee10d2ba5673993a9cf0615701fa8affab0bc4b0408973ad31aadb922360cc482a69b62fd5fd12cc6ece39151fc893d77aea00450c12b94ce5371cbddaad8f6bcfabe465b24581123e9e5d68fdef7345f5a55380408883da3bc5e413e5df7992f43ff5755ed196aff32ba46e8fe0f6e62acd0795709fbaf512bdd580d977cdb2b391744b405ba698f4375c7d3961512c9a88c501ec37011d08cf2dd3d3afe3be9a7d3", "9086adbaa65151445adba496f1078d56f98ace12a8d7c1dd53a79918b8aed20a227e9a7075df90aa3d6bbfceaeca964fafada0f31a1bcab3368d7a4491838eeaa115070aa7a7fdd48abb5989668797b63a105ca62df258db5c805734d819860f87a94b8ad3138b2d9d6b35d71d8b25be4ba9723a6224fb5df2503175c2793168782b568c4a4e96212582da7c5b7dc08f5f350db0abe341f34aeedae3478f1abaf316301786785ff63803c2ccdf473d1e55a4db79b3605dbdb5fba8d63647522535bbed64fcf0d7e2b6c942c0c33ec67318f9e58a28926da2b4b22245190b18fddf7993c0f02b9ed3b90da7b5586c69b8436c5792d2eda54709a42d142a026c434391bee97781ee5def03852cbc36c6f06bfc1a7dc5eea85ca693194cbd96bc7a9f77b313a5cd6cc6a0fe882df922281b11ed8c86fbdf30594ffb9416c388090db95039abe1ac2d4878b3fa06283246ea"],
        ["b7236799e85624ad83d104ccad3510247b721955bcce558c2d6daf4abcdd5c3175b5588886a4c1e996dd791884b3275086d60e38ab8c129e2903a9f13e54ced2c6a80e3798460b9f21425c2a95a2f61871943c25de0593e39e1f0b3284df28e58f5c2f4e5548819e886e4eef00db55a1def5d9bd060b9719d7454b4eb250d50f0495ed54d524bbe34ac7b1dcc376cf0c5ea70a6acfac2b75c32b85ad43a7a2145a6165c7f96819e7f44106e86b20cde260d919c2bb9b33f5888cee20c55b4b59e5caec65d06fbc1fc85aef15923d18fe68328ea21695bf1faa10be46958c0b858679bfd7eeb78dfc49fd10fc2ad5698c664c504f07d6eceafb82c5cf4f8486c0bad9faa7dc0c9258abef16a90ccf447447848750837bb284f788561dc89da87a350636c26eb586fd5b8ac7aed8495e611342f0cd97be368901cb006da7dd7adb15fc6e4bc2203eded8593c0289bd4e7d1c1379b2bc3f4672a29f6e0788b87c1deb410dbc6ad3c2eee5f118fd2639b94937a7f3585dc636916d6163a32305bea1623aeaeaa8eb810a9cd4634907093f4c1d8bd92a7cc560bf6c0935e73478f4888db57a836430d9c24076f2cbd6072b9023a4f959fb47d7530d8e9dcfc4e02928668891e2d015232a7350b03ba30e5615208eba5ff556da142925bd81b1da6c87c57606751a9ec6795cc74f81fd72fc44", "a7d7e0f2a4933d41cc7f718374cb187fad14ea16abd2a8d75c80c642523a77a7e5cc2b5406df18fdf8357092f30a2da38f3b0cea847a81ce3e4ad4b0a3756008c7425c0db798cb219250afbc8e5178cf3396e1e813bfb3e53439c2644553deb1819e00ae474f8026367a29d34aaf63d3d153c73ab0ffb3696451b230064447e5d7d31b2b1465b4c2d05244c574ceff0162fe5d8390f1dc67bcf28842a8210bf8668a58af628943646ed2a65292843e2e5acde0df214bd588ed62cbd0ede15e0c53f6df8ea0b4280638faaeac38fdc2bc4839c798b991c7931727c3585b108dcb0db03e6c70a899c160d12dd1f8d07db5400b615b6dda7e6b5f02de3a199c693dd3aa4a59cc75997e5fe36151b8766d982f7b7b3cac6dabafa3bec1ab24f7693e45a6a5dfd270d186e4e3934c913d9d442a1818723c617da9c8c0ef7968ed79d1b9ca26d9842ce5ba134b03996353099718620ef999df6c1873c9ed4c920efd55c44de8c1da27788339ce2b6458407c813408237b0b1597e5f6676bec4b0f9ac7d0b36c46c0dc61e4f991a52fa06492fe692402117220fa2b0e0dec6072f6ca94015277bc25c49be5975e4372aa86e02b560fef3cde1a06a9d4cda51983c95cf5a76ae982920d91740a27dd41ccd9d764", "98ee12f2baa1000083e6b2bceaab9c25c116150bcaf34fabc4e7e15e301c15c2842f64307624f50b7a9a3e6aaf29676192936fdeb30674a0e68b87cc3c7460543247cfe4b240785984f3e3ad4d94b8f9f1be093828358d7c5ce0b2819c431e699595250edc36314e2a6cbe42905b024bccce3623f9a67142d11bea947d98d00e53cb27a22d64191531e299539d18eead29e39866fd29ae4cef1b504f13cf009084ce4347c7a4b0798db9688c24b96db55f19330981f74233d690ea844edc02f225a9c2a6f512149c5713927014ca259b35aea638269a97544a92afde5095fb637c5967aa034a66729eed6c669da1c2b713f6790e8e1b47ae3e69ec61b0e675a1399b5281d8c078f796c933a9eaf64a3d688642d6e0d2a3abddd34a23f2a7eb54ae36314aae8d2b1319d4207000ed674f56b0e4b52751cf2280ca99ec6fd2bd63e04639c72b49dff130988671fbf453bb431e8c9304674460a4195e09d68e44e0d8ebd80cf7729d7315b355e7da7444dc4a1c44b6a1769ad8f2249cfb949e09c5271eb00fec8b6fa042a245dfe511600b64650d61718dbb21aa438821c03eb5f1ddfe1f634211cd2e4311562b75542805", "9896ed420b6f9ef59890c1c6f6dba8c0de25de492e490f9ab5a6dedb3225e33583c49d9a54a1b406690995602e7fbbef8bc9947ce6314ba5c987dfcfe757c37ab049f79ac569c8b484c7d563a52841b5e17ed180cf9ff554c2e8c99852c607c389f38e5fb26e40f37003b0a42d6ad3c24dd44478ad926e9b9b26ae2ab9f7fb267093fefadc267322bcc30a0ac7ab28356435989d1f6674304d18c94b22ba767040f8bfbb17b883447c43bd44036b34f046d73d7ba62e2d2fda7bd2b00207209584880693f3114f88d56becbab2b4f4625c5ba9ae828b1cb015194b9745bf783a416d8ea8b0dfa76f7d9345ed8f271f216cf5aab5b2fdb562f7cfbcff50a7e9cd2c59e6c32b95983b73c7757830434df846072b0174f9569cc9de47d354cd5756b0046998e8de28497d63c006ec22baf632f7eb114977ed86275c53026617ea64404375e50e3e2e2ddd0a9f3a37cbd30e35e62cc33651f5826565ad7d4253a695de8ced7fcb9f9f548afc78ed8d51361c3d2d609913675aded2dbeef027e17310f22c1e03c5e9353d5e37a52b1f016e4d", "87c10e47f83e430c986b2acccc9cb7517afbf772f18e98f3ca390eee455d48524ab39bde4fbdbb3620a0cba7ebd9c93ab8119a7b488775616e7ca82c51c0d7de0ff4b90d7cd6bf152cf873d1a18c4ccffaf8729c229a771fddfa929956e22dad98c6fded6c7c59a84e31dffae75921d2eff809b5b97a29ed58f980fd82927b3f986abdae8eae9d7120bc3e413927e91f011be9ecba10a8b96efd1712e2f4dc86b84ccb4998ede4e686e0092e4a54805611edb33f159e6538f11b518598fc0aa5982d06af4e16329d84df6c2fbdd45e452d634e32e512d808977169492e9e5e7b718662e257ee78bb214dcfae9c0d45bd638766ef08c668a371f33ed0356be07b01e8304bc7fe95975056823cc22f00fd5e36aa127d1c548994764f67bacd313dc4b699000775c8fd5f7618645fa53b434bb5015bfbd3d41228f1b0da2070b33748de765323030493726e094f144f60f1486c0c8661489a5b3341f2cb49606e039ab96735b9e5c401dc7489c8eb8afb2b", "b1a2b2f27bd12f8a16b2e54d2c81c9044cbcf629263d59087f0fdb6819a89180d94f2d21ef0f469c80ebc0390281d76f8ab6c0afa50506434564d117ee5604857ba78668cd3cd1bb7e5c3a8f57ad794b8bd8f69ba0ff8e02542c31d020b89895b02f2fc0ff30e27b52cd2af7a57756a1e6c83647d8b731049750fa4fc5fcf6deeea1d09e54fd3cab4d4ae63cd772aa2f6734faf4cfa4615d8e1acf977dad5c64076cde8ebedaa0f519a410b4795a904f1fdf775a3d46547ce891cbc633b67c1417d7b272525f8b433d4d5c430b3cc3ab6830a8620f4b18dc792cdc18edba45051c911ca3141c194cf11f3eafaf04b6fc605b8680af1ac84458bc4e5f68cb1432266681f11c5193048915e1f017649be34eaa915bbd29287e30afc047e8728bdad45d75be92028a16f88ae4d86afd75b33f4e8b0bb879c6c09ed096ef9656e12d72b4db7e105d68380a0a40c8ef4dbf58"],
        ["99725e8d8d962f561865a3ed2b4a7560079132232258b96aadef8422c700e1b17a62368385e2c6eb4524f886de96596d82de7914c63de29a608948533aab75713121e0e103a3ede216c8f6f6ad73394ddf9a4a856b323b3abd04fe97d19268ea98c0a42072cea4559eb46b39c829b20b8a7674413739e7f4875b186c70937c8de3e90422576b9b3d37fe356be20d55c4295d2fa75e6f2cdf5a540d5ba4b1b8e7842c1a6d2a04751b67c4bf20d86ee5ab09cf722f744709b3fea90c611df8e7d3f4d1b34ea385108dc914b8fb605e129d053162aa2ee32a7b054d4d5d65a51fb90eb9460af7714c00c359afb38b8df914506418ad7ef326e8fde3e1faada974c8e7e5c55aa2137c7385d94d1329f3ed771c85ce355755a16754c6c197de0cf8d8168df97fb5f7895245ed83b66cf8618b576e1b30aa32e636409014871fc144be3426c4f656917a12bc137c26b5cc51d63930a141c79165f6f7085e893ab4dc429b4397c7008e5b4d38ce778bd983cd610bb64bbd162c5af4658c46c4ce74efe8484ff9db2cb6507cf5afdfec7621457533f4da3875e87e64a7f124d7a37fb6f83b4b196bac4acb7007a1526e624f16a55fde6cfce9afd81cf8088c611d40b861fd4ecf6257babc881ac9aa1ee210553f1bfe279545a8ddd43f5bbf95c59a511ba06340b066ed82b2b3cc3ad1a05fdfb7", "81296d25becf28febb9127f9ad7bbfb0ce63619e2e603e7829a83d43a461115fc94fc828896fdba584924c38b41f57ba84dda9472e00b5a88adce383b4ed4eb0430a6fa9f5255fabda75013270a52db35a5da0cb086e493e8bd9dac3a43b4f2da0ba2513e5cb2f59898ec8538d718cbbbe4303c33bb676acfa53fe4ae329ef28531a86a3619c1f0c1908ca6fb01df8bb5bd64c5268268f8d45a2b8df67d8193ce36e0254ad5817061c7bda91e673f634060e7a545864acaff05d4d48e7bec7e5109b053726385655051d45674651bad04e3b4372a84a5673d00641983b7094d031d6755f7c95982ff2c893df3a9f74a3329b0a9a09f8d0e8d62b9b77f1cb7e2c59ce0c901ffb56e52e85f55d2a5125a6189e642febda57d5b2ddf7b8d0acb5f3a605d11dd22aaeb7e9a0f9a101fa338f00339f28b75cf57d5112917082ed8d9cd0f03f0e84edb1332d991aaff327658455c2f21404d648747e47b9e001ffac0eac4c39287ef6f0cbbda1861e5f27969161d79595718fffc018d9ab8cf2d371b8c0756dfb070753176ccf978be09cef8406c5e92d954e05e2173c5397534932e3ae2547a848013a190f5868c11984d6b651c1bfa7ddf6e65aaec326fbaa58b2b8407382add72679896e96df854772ccf6", "866e3ca4b0f75a825a6476e42ff43bd00d1cae259aad201c0497cbe958eebbe4c2abf6279386624f5f1cd0a8245132f5b44319ff0302fe23961eb69678a558b9903c48bb40c2d5e01134368086829fc5f74a5411dcae33e73f713f7bb02958de8b3cadab01e00267d1337f43d9d78e4fa4d1a5fd9c2532a3a935eaa3893e61e6ea1c63b7ebaabdea9a42289bc1b4b2fd2921b27c51f745c25322e258c06967cc66da96cd84217026a34dd31275c6d7082c75f3f609bbc42100c88ed9cb06c36f0d2bcbaee4a5e0b0806263b0e8b79fe637f0d1986b91a4f286e07d8255dc8dae76199fc89fc1ea5049f537527db0b0e3349bee66d084599996cbf831f18ffe13989e7312df23ab8a9faebd6563308f3f468927db83974998fc4aa170b51c71c7af9f6388a14cb3cddd21ea56803ad2ee4ee1da53ae7a6a4f7cc86bb4e2c9c5fbce47e1bb1a8def044a8e590d8cc5508b526974604d0fc62d52decac88e6908dc5661548f8abda0eba4e3dc34a302e2bb3a2cf15b80aaafc8b82b3d3674b27226d9b25ed9b3bbbbd20805eb52e1da6f8d6b55f4645fde41b83fb856fa590b38fc46cbf0e6383c353eb16432cb681cc769", "96768d0ded7bd9faa405e5407602d50a350106079fa7b0d0236f1b36845990827c01a74ef0d71fc00e7096ea88f70590a1f2daa577fc973b1e02f11cf9596e503091ded9ab050b120f7aef7f16b79890a46b1ceb2bee62d0c50685423f191a218b886142fd9080e1072f4e8cc63747f0ddbda1fcd72f6681a53056080ed6b6725e45d744a1955aacc430c1ec0a81286566eccdfefa78755ec4e9b25c099ac2e0296f552b2a1829679217551776b610793f4ad24e6ac9fac38558df71c035c0e2ec9498a04872f11fcb10fee50af4083d32dc85811b54eafc9855b5ebc21c98e2ba766f3cc3dc55c110e67be09a918202211ea6b11eec2a014a85a11b745779f708bc422946d03f25c670b698c53e02da3604e09dce7805ea13aea7f95d89229127bfb7292e365bfe65f28beaab30d3400349893f9afef4234c897b33a7ce3613e8202ebf5c3514c4d4f132e0e4fe148466595712a12debe8ca01334fad37299c74b1d72c408d3afc5ee1128b5b4be2813f5ff8f65cfabfd40826a287f9a93ddcff1d37526ff65a0b3581877fe6575c20", "8b855ea9014c3e1dd6511ea02414b863129a8f4502b8cbdb2a4bba1d035fcac1f9836ba7ac52c9089b5614c24c4de43c913baa689a63d50ef6e206ae3b2d8aeadba9e7ad68f29c25743fd585bcd48c42647a8afa62772af4f1248affc163b32f8e28c009e0ba25417a97b8d9dfaed4af2b963f50348545dabf6673827f8cb324d71a2b0f1b4f43402b0c1b8da832ed3e21e8b3bb73ec00136e3bdccda57b58b2cb4d252aa5f3c884fc1f77c1f1dde1d463e15133d07dab64a525cafe7a6a43df84314920d6fdccdc9c88fe8313cf0a305150d7eb50bf7b68c65cb78d39398b59489362d134f3c5cecd98470c0a7c3c3b532b9c9fc7df1f2f397927ba4f03e9df8106383cc1529309ef887449b3cce59c36f045a9984a00864328f023e89fd20859188cb3aa4ca4ec38e7231bffb273396aed21861713f377356c2f0622f4e0bd3d290e0f1ee4bab85ce4c45c8e0f8db624ba0e5bd5cc46eeb2593433c78896b01d0dd25d85f3f27a7cd90dbf49759743", "b3cd0ae9d0e00a55dd44a84e19471d98c88a197d72a883ecd6a6db12813a28b2ee3c0f4812664f87974328e040cf2d38b682dc12780e1f993928a0c400f96bf1da698b942b5ad9e0a25fe6640bfb7d30821888cb7008929b672b58b61ee72cb6abc82970ec684fc85720268259624a9e056385e821c77a77da838d3caff5b2364c981beb23113d6269bff1fc349297a866982540db8a51594816e17273e6e39db06dc60c65a29d9fc05ffc8dc648d2c94c146aba1db81bf2ca88423c58dee5f902fe074593cd896c75d9415048815f4917962a388da2f358163d780a5894545166a1abf50bc9948ec23eac2c709e00ee16a483f9de541b3d3febebaa634a410d6d3e0b6cac257aad42ae3c78d16f44e54ae0556e0b5a62027c2f942ed3f7c707edd65041d811da4212a336a1ce4c2b4301b989c3a668c49d2163bd540194651da10350ddc7433cd9a01f76032fc67354"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
