use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages,
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["b01a589cdcd822035eafe3fee5d1f153283f414049422483bcd8ed78a42ec9d1b5e5c4850b7fba059f2d1cbbdd7f3967988fc52b12d70fd6dc40aaeeb2aaeff3854be1089f34b5c7953bc56d00b384c3c04c8b3408fb0891f13edce2705f8e57a8d7d4c1b1d9e16696345f6d9931119c6e9da89f88e4d768b797884d25d363fae84a2f3a6bcf0b6ad46e0bafaddc11d62c38f184ae370bdf9c340dae0963fa5f351156a60e97e50ff0ae75bd4d70a5d8300637e3bfa4788cbcf3181d4f123ec618598d6221ea23ada42418cf620c1ec60b0bebabda4671ecc1f1e3a232f73d5cad82c1362dc64f17a8604d960c4a51a252126adeea89750feae4c993d09f9ec8d357e006ca500dd73534feb25a8bfac33980784848455ea4977cc004b4a2462d0ee4d9fcbbb1e903c6f2efd325d72aad50e89d1607dd67a6dc25e98cb002faa6c2c2eb3d5caec81a55d427115dd2ba552c03127e8e924efbfd10d5553c777ba3c13b474b7348b5de369bdc5eac26f69703afc081565ae2333b0dcfd95c629b103fa5f9aa1664684db1f938e304cc7a940fc5a4d470d504a223fc0b412b4a6f5c46bfe23a419cab630882b3c4af4d199514f1fe358a285fac874ec43c9bf6b36f603bb0c59c1e34602cb959f595b0dc1446d42669a84fc7be34f26d8957fca7784e40558c46d32afcbca354eecb27992d", "aa2c6499d15f0dbcd5df3fa996322e0e7339398fe5d631b1add3504a3b48c41bb012c1b68ff2d6d969cb0e650ac2aa72838640a025534e1babae1811ea88d0166a3ebf11b78def3f3993240014774bed6e7ebdbe99e509a719425ae6445ce9e983f719e7db432a18d96cf1aa0dd1db3cfafe042944d7c0e76d95427633ab584492104e7cbfdf74fe2e718669d1f610bc6ef1c25634d0d4d62184318705c537eff3e30a5e37f7fe6dda75c622fa39590f15962e640e8c9b1b25e7950ba20fe2ed6d0ae4bacb41058bb211ce978dc03ee4327b6e9099f8c832979685777c6a3dbd7dc41175e6be42015f408001ba0865946ea857984a420bdd0207a07390337668aedbfdb8867bd8d91e46cd27604e182a231efd3ce235204a15897a828c49d7ccb3351a1d52ededec0ed4829a80b9a875284133981f5f32508cb7a2d6e0a2dc1086efa29545bf78efe37a2afe8ea210990afd5681b8b5c720980a9f8eedae0b0ff8c0d78bed123b011ee8e341059630004fd1ff2a881aa1a8b35cdba8aa7c06ad3c9fe49cba85ab7b4ce651986e7bafcc0f059da1ef7ecea2a0d461a8ba8606c76b96af2bf18007cb3bdc6108c237cdd5145bdbdd18668d931f92132997ee79bc265978635428eaf8890a4138a25a280a", "af718c31d9ab89c5e55a7db345c6ad46c74c8a2b29b0f99b2379b98fd4ec66da1cd6b172d84b562175289c4245488394b8d0170fcc829d807290cecd9e5f14e2d3a2c4e471a18734b61dae8f3b58708264a9aafb1094ec312bbf15e6eca827c9b7558126cd9ac094d1ed17dca1d296338d9766936f8f6391433a552c44f63cda7bdb549e7adcdb854eb755a08c54a6e95115dbf8225855769f7162683d9fa7a73a56fe3338b22ebb72855a1234ac69e65c8b1308bcd6c9b621966b3f0101acafebe291d95dfefe155dad326cbd9723e0170ca279310df544e386bdf316cb45f743ca0d482ed53924e88373dc98476d094c715589c7031b90e6e12b1594f946eddf9b1b626bc46b5b940bc251b84f028734b9ffd942dda02b30882ea551bc572d544ed7a71d80425ff24a18c690c1be5b4ee75c4c8c44ace45107641fd9f2a37adacfd515cdd284e41ebcfebb7c8ac7c761f1a07864c75df2827c30f1ce91674c3b61ec3479f9a9cf13cb6f47c456cbe244fe90c01c8cb7f2a3cdb1e13c408bf14050fbb508bdc4b4145b428455dcebcc4dd921fa5e516916f4904d1e65435304e8d0d037c47dafc3ce79137141f4eda7", "b442317406655b659cf8d6e24d7bfc6a886576544ef852bab40049f217608505cc37f1e679d0c294f1f719d58c09d2ecb297481adf5ff29b0a41e8eacd0f3e8e26c1e4c05d4ddfcb131d44414931203251553de1538158b7f0f7f172f3e9ce618cb82296a3b53a106280f9a4310fbe683cd4fcef1f14d980aba1398ac4b000c923ad5c517c3e93df37a03284ab9e10434243141e91aefd2e6690142e0b719a926080e12ef73491cd45624330a26025fd2f17d49f465bdd3c097e7f4e001feacc5fafde1b4a82ac557e01e8564ed444ed0ba6df602a87146c757230c58b80ce30601e9339baa191ac3c763825dd047a5d639c42b8877dd02834983aa8a88f2036b4b52a5aa1282f7efd4fb4b4e674419f53eead4f0550d5f82ac6a61b58a696a1b8b20f3c60a5474843f02643ff9db5a6159698935183e34d11c70c67b96b33a3659a8f8a7dc2af40d1df8727cbcef1543192fd09fbb446b56d09ce131d0a23281978eee83dd7f06652305e077ebf6bc41ecadb3ed0303a974cb1def121ffb985c7300ed4fcb4dba834f4bcc97b97e51a", "8e5b9ab8c767f4a9fbd6756334f05ec4d09dcb3dabb2599961a925f7ed1df06b5e17c0336e09ec068b52952ddbf5746db522419f1d7c8f9a8ff216569c86f538c3c0eb0f7dd00e9f1d04b26917dc5f0bc470fe1a9482da939db2689cb0b262d295ec834e1756217dbca8a3c1a91f4154b3f34d3ef658ca8149aafc283ebd91917e518fb7ce4b5c65f24d94fcc5a2206b1a8992de03e9004abde188bf975439733b5f7d3f7e4c45bd871747c8fc9b3159418465e5f6b254275804390722cd0c3265474463d597d59a734a195c5693ced44db8985b04602e7f33d694a651f4b33c0cecc6713cf182aede19520aa72226311660d9b7431d6e6ba3a4cd2e1c2bc80e9ed01be2b8ce380d2037501590f029933672b0f7fbbdd60e10002be916f78305e3db39a4e336ed608b2c28d39d7e7f914e34d7f57f8c3bfdaf79273c267863a808be182348473df20f6662d9578ff78e6785bb719e9f74bc99ecd0dd98890b6baaaeb3ede97f7f7d079bb9ed6040f109", "a0fdd5f98bfc429e1b62dab2bcbfdddd588c1d14260e33c792c189d11df2ed16edf78836119b8dcaf8166609a0a7c6b690dde204cb95d51d66318edf53b5e6f148d1c5478127e898a55911870e2d686e07456df7aecf793021f6839c01d3e98e88fa8341f9f5a38142c421d39ac9bb6c085a5de28f1ce6b9047ded844df531e8bda316b3fdeb1a1e6f648b7044f88115162c178d750fa9deeef81c0a58c5e31d19d90908ea63983dda2297bc9c1df4cc70b2272d2f22d531a988a2e1d803056f61cf2695d64582ff07d7f923542a082a1cf104c98d832613ded4ba1eca0f4d4bf85a3304bf8dd515186216a37e8679cb0fdd853cd9af8460d0b20e6f8e350f11ff29162db75c3440797b095741cfa5074d592eb8db45f9e9b1d42eb7d7dc1adc1e3e26805a5b53e3684f5e195aff74072e98c44ab12565acdc80608cc59fe946e8e9263d6218a5f863912eaa895fa3f5"],
        ["a29cc81cb815c22f679e4506b7c0a659ae94eff1effccbed2a0fc6b496e576ccc3248bed1418bb2dfe6f4a42ed0a7e6fb0936e8667b25b2147929241c4ff2cf2ef98c8a00f972eeb432c6a77652040646bf31dcda234cffef795df3d7364107b9742ac3a86a6f5e3a7dc3bcb9396ff602ac3211ccbf29cfd6f1d465ba054e5c1e300eff3743dd65b2eeb8da78416e62d6ce42c1e6126e5ded5e90d720af336d7fb8ef3824c4dfff18edf0ba89307f75b2e6ec0b21f41e4394f96b2ea1f912bb0fc8f66f1c2ab4716745104b55fb63fdb050aa43c404db0a73f0fde283448c1d76b00962e6f0e91d3bef07e7ead0d670b5476b39fae03cbbca17e1705412c186b7b574389712f1c305656ccfeeb464c9659a3435c7e2e7495bdeca93774925dad79154a3a554d344301ac187c5a0c09315b043daeb84eb829ed066d1d1aabe6b72692311c9357d82d2cccc885a39fbdcf10f80f7f5b53e5f93567c34591ab45ad5bfc824bd07f8886a568e2400c57215120c1e69a88764613aea9e8c4b686d389d005eafc82922d52fb6763c10448639a1ee557592a96363a8aab2d75071fed48735070701256490dd2be0ca0feeb89644e438d7f3083aff4227f4368144579332134def3583cce3646b012d0f9dc14664503d3a4b0b4f6ca6f20b13245df9960dab2fa5eb73a29a911f1c77104219a6e", "a9b4872853a2b1abdc1fe44d2f9cd827a1d77b981057b80ca15acc3fd2374e9a34d5c655cb1df89704f0045cecd7e13c87c9407e49c11483e65826b057ac3326ad3e2a6acf99dc173b1bbf3f88237c81100eb1f1ddf59db875c9c4e4f9c4126aa3474a32464e5182b06a54d0dbcd9026c4ef8efb43cab2395644789d3852d6fd147c5f0be0a0f0f5229fda1dee75b0e04f3cd457879d7751f5de805da4489a13dd50976d83cbe541aff1ba7a11daeff86014661bb3be343e15a63a6602d73f7d1cb09f925e69afc7c5e7374346dd53a50886b12d3e3932b8e389c12f105d6535dff08f135e188ead5d1fd1753f60ce9c1bf4cfa45f91dceff4af66e85f1d718b82ceadf6fec9a5776f331e4dfb88f47d2fae81c9ae8f372660c2b5b82c8c68efaad6e985c5b610ab7f045b2b76d1c02a29e302fb19aa0fef6e6c1c1c9bafe65b7820d237855a1cc7f97b477896f01084468b47b93b417745de38adbe0a99021aee2ebb5e71cb83f1e76bd33760c0159c3e498f741c029c9aad866a4a929d624b95b4bee96ac9fd06a27d9d627eb9f9bb505afe188f4a9445339466bab8ce8226fbbb949cc1e6c76246b7aea8bb9d54c03ce9b20fee0c5101184fdc5c26a1025329a5befc446f7504a54e200483076f51", "a4731931348f7dd5354a002854a93bfbe0263d706551f7ddce4294180f3e12df88bf726e48cd28da3848033636c82908a584fe4324da062c79ad66e38694d5a280c071cca4ec692f0a98b19c627c7e991f9c7dc1824158547ebe1135369f7fd283e83bb02f14411d9e0f3c30693f55523099a28b6f3f42a579a1fedc761c0519a466925de0870f8e862e26585856128d6a912fab86779a9c72842f9ea0fb94291f9e01ea61f42f625bd94a59589429ee4cd0ddd307925dff9f79d83b5c6e47aac7833343c62b127f4c2c80e1dfcb2aba0e646e5498d04ccea6e46213058946ec32d27aa799a76a5dbbfd70010709fbdf7222be2394617062e1d4df71277f1c23aa7c74ee24790b23b360006bbcf8cb1272e0049edf5f5288487930e32708fceb22ae278da54fdd9bb89a30ab9bcddc8a4a8deafc66c35de7403d1020d50c6e012781126268051197f39cf72fcd982dba44dc11fa05b213f4d5cf48ae969b8af094a215fd89d5b11d0178acbe127ccfe92155110279e9fe9c6bf47223247ecabff19665755b2a0dc1e6795c69d74ac2072042d9b0885b561a9c1706387017b2f1d34abb080c29c4668e32effa4f2f235c", "810ce8f54ecb7fb192521b87d4543809301c03e69657a8d4c75f661556a574d7fa13ac0bc96626318b2a71421ccdf94c926a8a187350178f444feb7b6d8923221d8bda53c0e3d88a3840ac32aeb6721932f2d1e38a026ca565969dc8c8c3980494bdce0d47df3ae4caf4e5c6aa6212166b26dd4c497e0021a1b66025e802062ef979cf1c341829a7c4f0a7f841cc350163862a3225d6a41745ebc226c903353653250b206ed02c8ac0b2838c7dfd65314c6914f8800adffbeb5e3e52b0c1b4f762d121d36394b4a5009b1a87641a73dd22513a0cf33d7f9f3dd6c9453737d592d8fb9b54e4635c6190607b1a578bfaa70d2e5b1244a154172bfe88c57098fcfc406f0be8d03e1e1698cb4866611a78263ac6368ec9500a1c70b598e7546b48843f9c76ea5a580f5714d9932f73d959f359ea33a0a72790d2c05f7effdd5cf081706e3169201a48c668df7c049ce9ccad2a8148029cc80c9ec3eb9dd7db7f0564755958348bb3094e017ae13f6b112bad71a5d35b94b66135610409d79b7cf3948d80ca336359661529ec8d3461a9c95e", "b58975dbd51be6bb8f65650415ef24a36b666dbae395868c5df0812123fd51c6149e02f3b29106ba1a7442706973694f98c0b7192668384b0546a3d6aabe7488bcecd1c5327d805de1fc60c756a26880016811841c8ce8452a9512f93731ec70a428779354e582e0048462c4563bd161b6b9204b943ccca7e53c72cf3d5b25ceff5239a983be99dacfb5a3c7c91eef4051f5d81fdad149c7a19e80dc772c92a31015eb978b695cf9074e7794d62cded1671d29791c6705a4c7037eb09bce84bb347ad1232eda26593c42efa460f80bf555098b7f21cd54a4f0cf8573bb3bd22e8cd256ffb4c9680661c8016d6394a2d234b6c58480ce73c2deace450ad29863f014429b436b9ac899255ba5b65f5275b5a844d35af5a9b42c231c0809560b2b9838f3224a56fc77cda3c863e1438091d0102df0a8718cea16a2f7b0cf08111ed25f3dd5a1c05485e5b3bc11f966696322c3c161bc58060943fdb33f86c20adab6cb67415509d36df7587b0dc13f3e756", "8a41bdcab55d3d2f5f2460fe95f507705880eb040cad10e067d532af8b9c38c3f50d71697b45d8fc3b8b4886eacf09a7acc16b76c8a15d702f10273a662ed9c79bcb80f4e08feefe7519379dee98f063f7021c96a1e3f4540a1043e157c8a04aad67d0cc8f994cb0dcc2d225889a1bb553f70068bbb109393da8cfd4059b570d9dba6768601e657fbf3b431c12a583eb6301ca24eab8ea61271ee40e5fdfc5b143426c45d088c2ad94ea18f6eb30010216c697150056e794daf3871ac420326591eb766ca2e6096d421fe0ddc17e2c2816d9ef02301a7a04c124357fd2695591fdc83ab0a46fd6aca61416885bd640284ad64cdf9bcc727392000ecbafd7582947a318987adef78e4d6955a911bd5ae9594052d78a56017937baeeae053b78596cca75fcced0045c4dcade3f7e7706530a61e676a0190688ba3c1da8e09148ff93e8b9520f1c3e8004e5411a9958ede1"],
        ["a4106e7832e980a9b028f86c9da05f00e4bf4d12e579acc9b001bae0e98ef32c6ce95243523c07faa4ef9f91987c3790953061243436898ced8d539be9116360fe483c52419657da8dfeb8e46696a22c5b653552584a8cb40e9dd52a3cfe21488087f3dd066349b438b9d99b1538b78c4d679b71253ef3f080f82c947532e2d605a1cfcb09f5016448a929f689b25dec5835e08602a97052277b8fcbe7b4c90b9b9b6b3daf85785b66d02aad01c7234e5f9d9d2593aa1a87b9567b5cb682638e7b4a1a14001c7be354ab102a557b47de7301711f1e1b822e4ce34893391b36ff7eb228a784b2fa08103113fbe218200f4ae9b3a88a55f6e14a4a3cfedd2a02b896a313de30eeb961666fc3f5766c80f614219c4a00601407cc721f886af368fb248d663ce47c8a3a7685196aabc24536010b379d180d9282e933caa73831eb8fc66d6f078dedee833dc9cd13564ecb6c6bf22e6b5788eba42eaff40aa712ee2dda21aa015c67cb33d3881a4f6c85aea410a0c025af717e48c55f794eb1d88b3612711bb3a5e36cd34d44633de86b056337e3086d4df682d8acf951a724885049698adab59e671bb8d5ae1b26a36d1670331e160b7dbe40b091aae7b1c0ef9597adb0e146e0937cc32d227b64a5c86f184382fa1c83808ca93de70a99c91f773f9bcca178a442c4730f77877ce24332e6", "8b6bcde1b39532addad6a629605238e534b86af7c9086cd3c5b8a563b187b719dcfa29539165ff9a9e15b0167bc558deb0db8b1f5b1215833bc7c85fbf7e60ea0b90da840e6132abf196b2529686635a5961a6a50534a552154cc0e4217b3245b4d35a033b3a36786e1da6681c4fe7e74372e5785baab2185e58cd0dc83e1190e0d24d2ebed9f5aa3ed6966e6cd28ba05ee74d1f83d8d0d0ebceaa4e0bc159028f062abe9cfa47be57ccccc0da16e5af1ece77be928ded53b65965ff0b9ce94b29b9591121d71c88ad47d5ce891e50525858f1741482bbb334fb3bdacaac0c72f9a16579193daa4218c0c44a4529506e0619700c2a852e103f46e736f94c2c9741cd2a6edbfd977e279e8736a2878e55679f978384e94e92840303ff8cee11364645ad141aa011d8298ed65545d65e5528e8881f841749663945295413c2b4d9b0d5f6b74ef129809b607672bac2525b0c71bc0b1df97e3eb4e81d13c4495ee0bda828d8aebacd7ff81c1b47eca556d06ed2529cee0422c29f90349e315ea9f17da781d8449dfd30024e4ccfc13bc2f02f2d19a684772973f758f342f7075936393c1b0f80a5f7eedd0360e7cfa1826c108feceaf74080e2101ac20615938648f8f39d5bb8650bdf9ae88a6632fdea2c", "8eaf2480bdd6217dadf44b9d22d03935ef6555b2e7cc90afe75d394a693412aabc7004b1405a3a38571b8e599d0e18d287d7a31701194f8094694488c180d31f657d26b2585153a5c9899919bdd52d788a5fe9d350e94e6aed23dce0a7469092a787f8dabb7c403baa52ddfe399b3b9fe0bfb81cdf8967838067f25277d1d58df39abbaabfb5bffaccde56fe573228ca64e7bce38d11408b2456c4e9d74182cbee491b5dc53ca5b46dfa0953b480e3d466d0f0565360065fc0144cc296f68593f71316a36fe7037577cc1c67748b3a564f37abe869b89db25882a3be0400c55e0befea99fd9bfdd40d5a36b4cc0b91fe1d08640d84e7984b53c0378b4527afcc83605ccc49bd28ef2ec38b85b7c6e7b20184e7494d067058ad4b7d74b47d20324c93156cf844b786ccf62ea620d867835aedbb6ad99df18a40abec451ee7325a9653d9724af20a297703b1f54e738eab6c97d4910423bc0d5f401fb339ad838da8666a9232003b9ea27303817aa972fc509e39e912597ea7c4c33c40b2b1cdf7789324db516fb1fe3a6c70f9c1be59e55d4a2d54604a40770a33a80989e7896a8a535098b3394adf557cfa770cf9c0ad", "881d95564e76ce6286d2be5767e3b7bf481ba81b805b87e638725d19572c4eca743e5dc394c5d1416b57918f1caf006785bddd3d900fe1463ac88a32a2f11843fec00bd87cb6e3f40c59393503e7e3516c7c8222169ec0885ef27089cd37b5239549603143b47f554b88ef956c36e1cc26c79cffa11d4de324effbc56a61a8e323b3dab3021f925a37efb68cf13cda8c389f9560606e68c907769e3e560af3ed4b3f687b9ec94d77855f70c7f0e48dcd308651424c4da7a447e96da349df9e8048b152cdd7004105c6f1d7ad44c040ed066a7c6e08f016ebb4e8aa3e11eccf5d6c28acbbf20029a90d5a1010a59bb76b172ba6da78b84de9ff501d6c417ce0c55ac2a4f3918ab159b15d93a7e21b2dac346646e9365c0a503408b8dfffbbf573f24a5db238f86a5b22fc5b3fa00f9ea41455ef8f2b3dc1662859f466379a1eea14898ceb422dc8c168389e278b9565c72e8a22bd82b83c57e0ab085d36e1945b7172d62e2c7089ba3f47c3218a8be44b546c645bf11716b3a448e464a18b0035998d8c3e46500535ebf72a6db727a5b7", "823978408b91cf8b029313a72ddfe13c82a798d751b4e3cf021a0d6947c7541e58d181bafaf7c14bc48cfe42487028978d4b783dcd15321d714435cc7570431c0b1192035081741800e7efee977ae6f52d4b82fa31801a8e2c318845ff989b2ea140d0a8c15c5b22b941414f38269dfd70b0b7806d5ab60d4055ce8475070b11378bcdf7efd252967d6098da6590afac554d534ff9f27a07332fa37a64ce4fba5e97c96ed143b96d870c02ab904115760e456e0229802ab8342b0dbcac8b65abb867268e5a203ad25bc8f88e7a6db37272d19bc5b304f8e08f05f4a0923f8188135df2dcebd3ad2dc2b5895362c13a4d1392134392f293e5434137f7aebb3377bfbba4555454eecfa681a4ea648d3b9466838b34ffc067416f283fccec2e8ceba53f74dff08787b1b8cfbb443e046b1c39d5bbb62db65707debc265c7541dd6359220a5b5f92ee5adb597c888ad926f60d8c06f8ba5601d3997823baa23b8e140c4d90f5a86c3a4d6aea212cabf159d6", "a3596bf3852951873010e28b4bf4bc30986b3fca38501864f7410f0d89b08c4c2c7a1b39288bb86ed64679a12316c01d80c034da01e3d2ecc8bcb6cc7b167c1b27ccbd2ab93b3ffa31256c19e3ffd903b0ddcdda0e647f7fa59f2f59e952f7818ab93163adc7a07e76ff681eb8f4f7a6751a71faa52b3bacca2d4205964def51489c9ba688cf4f34bfc556c795a0fe365ac23499cd646450226cb5d191fc68528a84ccb46eabcd1148f561be0b96434521fd14520c4142c8815b29a0dc6ac0b5851e28ec0b056e6020375b8198221a4d5b51315fea2133070f5ff9bbe81499b08f168824a0c04198e05c8a34a810682b542d9acf592bc1a58978ba4e772e396a24ad092014261a2db9b28fd9b81206a16c8ac4368fd5919f61a88e8c984a842066efa2b96a931d7f23a84350b7b5283f6440ea8983014bb5673f6c7b674b0c99a5a214a834febbfc39ae7d48e9b938b3"],
        ["90264332741d8309c653b7eacbdd285c69c31c72f947b4e3b7db0c7181fc5dff49db7b122fe8535be5172f17676c510da589b6ba46e6555d79f451716d06031dfafd53f35db46d03a6f9abd3077b1f5c13219775897133151ad053fb956b5dca95301b188094db87f183595911d7d7bcd8f9c48e3785a342aa64f880be115d670520fba55f643fc076c170f0fd5edbc610fce9dd663a561a2655e3a8578253e5ad8e68f0d6ce33fc818e50109351238631e462d8f37a0a6ab10c94df4aa0ce42b47a62d9e41f3bf527c33e989ff28c0b71e68decdd5faa4e5e1737a174a9acd5bf4b1189e68a1eb74fa63b3af2130d2d44c7f1c74b2514690cda0723413d10d9d056324816e160dddf4d67e0e5b189300b34a6918839a7ab4f464b98df9616a5afa64bebb177426f1aaae23b1ae6eb931713e6a26777616dfb6b106dcd4c1988b445a922bb8a766e9a5c9f0891dd62e62dbb6a0c88cdbb70f38eb1d01c8b25671b50057a97978e7b85c90ad501eb3c7159c0bb9e5a47b38e93e36c687d5c8f80fa387512903eee280343ab1610496b9a5f4e22906ca1f16e0e57547d916f6905e76ee9b4388a688ff736ef4670d7cc0a07a049c580ea02a83e3d3d4a0a7f114aeea81379d5f4a6c0065db715f381d580503574d85e2e6dbe64d80a192dbd5dd1d751c6243a33098a957587924e7efb13", "88dbd19d32eef41792f3ea783c86e3c491528d1692f2096cf48bc39cbfc64819d0d241c5e2cfc7d21228ab6ab706f7208ec2c000ab379e1a6daae53aa94ff0db72f30cf01efcf52bc6f136615687b167c798503308b0d198033261e5ee32f1a5a16af1d369baa80c138bb4ba5eb50e78206918892458109f976a651d4ab95696367b60571dc3a38bdc677360d06e252e4a9ac339be4d15db659522ea33917155a7e63be7742f3e2c08830cb061ec0f6707cb0341afb9a3016d61fd53e172146991743c9f4cfd3abb8dbc98afc6c498826556de52ca1883cace9f2fa62a9ec08a0f9445cf159d4550ad8ac02f27a24bfa3b58e9564bf144405c4a682d880fb440eb02e88b4901a3695c62610d3e8416a938ef2b3e1f5f43e1fc38a587ba25578245809954198f4c249cad639b60e8a87451ec923a17022a576a89ff5e141bb932ee0d273384b2c98d3cdc3b1cf688d92f59320de3faad3dc0f146f9adb99b2186372b5205f4f892b3fe1107497ac3d3ef4037d109d206c88f472524712973813292c7d57b42cf1bab3de5c64eae8a7fc54831026857c09653ae18d321508234545f1ced41098bcab6ce64070743e836cd3c9823282d3490520a08d6f471da1bd0a9f201fa63b1e26ad5ab36a2c92bcc7e", "b2129032cadda83119f4fccd809d66f2fcf6989b45761cf0cc894b5c697ee97a8d9a588d18dbcb75f902886b70cbe096a90618d2f173ecc5d5c3744390b1e0e8ad031a458dafc590d0f935b67187e38d595b5bfee06af7a46d4f4b59ac252aafab64dcca554d4228c0a66977044bbf664a1c29e879ffaa12af0382193394645e8668bd9dce23295d77835688129b6756454caaf9500430cada2ec78a5dc65c942a66a362500d131475df8835a54ab13b0807241e216a0fafcdf33691c97218965e793f0cf09fe3db00ca3bf9d0eb0754499941be7b41978c1114b2f8b839fd7102e99522d56e0c781e1544c268750f726e8302a7a1acba75db618ceca17500a30090d1fb865b7e83990ecb1f769d29454e8f6ab9deacf05878fe3aa229e4ba06575995f2b4d52843214a828375f8daa628a3ae9a62a4d5db16c46d7641ff19e449ca3d49e6258da05eaa33bf86ff981164dc9835715aa1fdd97c61c60b3e22fdc955dd68dbcb011d5328d2d290b03cdb0095fdfc78d2e53cdba8e4dfa0ed73d8e806e5cfb6373ee4e3539c9516de6d5e6dea495d2268d844b9169a0cab60b34644e3f1f4cb7f943acd72b6ec086306f5", "b51d03ff0ad95e6c68dc39818da5c97202d494f9e14d0646266f3c6b364cbcff0e63058aaee431e5bb5e9b43b5727a93b912461c0c2fdd96706b707812d160f275b3d652cdf6df66a2fd5ed4fbe44e82e18bb69222b748af9d46631c8d8456c5a54b54523fd72ec4d9eceb114c7829cf2968ea6793c8f490ced1c34523088b2723aad67b7fb6a7bdf9d1496fae63a8761218bce6e132f96d0370d3e24d14c8f1cc3aaeb3463f9a1796b15e9a670c85a5136453c9b0cea79102339d066e1bceaf810dc8745056d448cb7917e463a519584cfd2ae2d4e99d951816c572de48cec1e31d217b036917c69a442c4ce54713cc73331c8c682571431399cb1c26be33fa43c1cf9a90858b27f79b9d48cf7a58ed5efcb2d3dacd1f7c8d460822683c5d9796c9b11cedba6bba0822f5a287891eb96f1631373309ec5244a1dac14ed20ce60f470ffbfbd9a5c8fc2d008d7eba59821cb1d620aca614afff2051a6cb3ec81f03aa5981e8a9c609991de1107f46a9283b73f33be49ca731844778444876b4f9a46a9cd1e2d88d102298f84ac3147fbc", "8953c62dd29ee470510d7afcc1aa85048d3fab984adf1c0ba2dbd3d80c32230222be17c279fea25ebeb96e5edc00aa95a03d8a25f80bf3d33c2d6bf5676800a60cc8b516630bd143e00d5569c75e3c4564d4fbe1097cb86df8b186237e402ad2a284901bcb8a36b8f9b370a69814af87a84ebb2eb07dd3ca5cfbca28015f6564e5bf03eb991ab9f30db90406aee185ef66a568d361387af0b5477b4ae7db5426f0dae2252657d3c077dce0e276be754a701e56c81915dfb29d30b0ea84550eb54034ba4e1c4e29b53ca1db958dd4302f18aa33a06421d23b6eaf2092c94a9a21d119b48e64186ea3ea2526cf2428b9940687b6eeb4cdec8519ef3970b2ec19a40e7f3c1877b78c7b702f5ebc83ac23c31395c8eca970ff1ec64a8976f4a91fd06dd4f62a6d9ba993450170d7d816932f38fd50c58709c9e4915adc87de759d6638ca9b8f7ca9a7c9d0190326a0f73e495a70db43b9601930c6eaa7326e3f3e6bf25a53821a4514336228d82fe3db7788", "9645604d394ac035529b3e761566402ccad159324c88b8bd02425a2c8e0b0305abdecdffb3cc168445daa342d556b3e6add9d05ea81cf16b05745746446f8c5b1343e412bc229db6bfc9873d49da4ce045ae2a898f102540e4663e0d5d542d93a43a9a59a0883b22da4b66238f507d8baf23dba27b334a27c70d12fdf5a0dedf59a3f11d84c1a69cadf9e838f3cd3857544c8b174a5fc26b8ffc2c14b85fd3cabd378cdcd537feab53e59b289691f4b0611112087782ff09a689271c1c4cb59903778dd4b9fcbc191b8ca302ee7518222c6e3a4ccc1d516afaba05fa6fea7e4e5563956c4a08453c3af732bc30c5d14d71ce1a45b7f1513dfbe7184590b945b26aa89a13a2b94edde12d47d85b19f48e55e8517f2d8a06866d0b1186987a2112e104643cb470703b51010e39e5b80c1c47d4496eea6cffa2457555f624dfafe559dadbf41408974fb7039a9d91aed0cd"],
        ["a385be8867aa15742f38b6151dd5e53c38b36353354ebda4f2b311b4b059471aa5b5c098f9f20d5c6dd49606ca8a40cba2a5f0a62d7036fdd51096ca7e9fd859117c0bfbb47eaae9c3c39c4dc3f33f9eeb09a05374a45bc49db2965dca3b1ac2b0cabc914f310146e91f4f03d044989da4e4eff32640af0b7120b935404fbfed5ca6f5ad78ea7fbbe340860e911a207b39949b947edc1d6a686ae0f863d4bce59e4acfee29a36138643d8614aff1eb81026692ac94366fb42f96bc35dc20aaf09ca0cc28670d6906cf1eecdb9c8c37f03c97cc8d56cccee81a1edf6daeabcf7b368c5ccdc126cf06a544fec58508c7cd6de3934530c0b8bbcf0d6e2d5d761bf60bf3e7d4d551265f6d426e0239fc1e76444550085c51e06531ba289a99db7b543b3194c826eae6034ed239c9e32e092551c92364cc320e0be63ae5f6f0e825fcd33bcdd9b489907b3f7342526fa4d5801278cf5a25ae3b046effa9e375d98f8be53a150f2dc31af5e055d3d1be6a6888069cefe98dff719dcd06342e3a08ccb78db2eb0d7f8d3c85b39de5fc2a6d1294270b635a9b29f726221adfbf9844a888c14e860455a997724033148855671a432249fd55190ba676f33f6630a59a33c40bfbd0e569aa344345cd0751b3072afd71dfb4ffcee2f9c9893b447ebf9087479ff40a8c74e97c5342c03356b6f97ea9", "ad1b1b9f6d96817aaf4f6e6413b6444b2ccbea99e71e43002e958caa62f96e2c24a4e238b4755a51d802303e922424198cc602d437e664fc08aa7b65aa85da5d683ea62face7af85376d5c9dc0fcd0825d6747382fad8f99114c0480824555f9b2f4935358d1b9be4645b8273cf22c3ff020789117411c49faddf4abca275fb2bf7f731a5432037639bfc724e7cfc1c21c4212565ba426de553f71dd0afc2a7911c27a1d5cdc51e08f6d35040d03553d13c5533ec3266a9958fe77066b00fd5d8dc2fa3edf3cf50ffc6397e22e56683870d59908c414fd5f397a408cf5cdd4351bbc6e3bef334ea7e594fac0d0a701114f85b2e9a8dd4f8ca56e0f589b48eadeb4fae31ac2ec9d2feb7f8406c131720a417f25ca38ce445933e8134195bcab073d61b0ae8e65c5bfdf87496b550c52676abae3e2c11e5239173e440d2d67a821a79c6d4625741fbb46fa4789469b67090a72bb1f148da058a4ca7c95bd520f369e6fa9080c3ae4c2de68dcd85f8ff1df156bc7f3ea4841107b1dc657fb110b776a9baac6a3c736504f8593bdb84b2e4637ab9c72ef5d9bbdf5ed1f77971ff68f3d571dc5f37e55b61328f50b3296960c2bbd982620d263e8f0f72c45964a02c4c4ac824efb9097f077b3a9cb2d0db48a", "acf5df31b253f4ec8563a7adcd520e4b2931c8d6eb88026fb72e8bf9e3c8f537c6b8fcec4e54b7f5a2edc23c97e8cbb6a25b54a794a1fa56d36ebbedfd8e0197da677f919009376b23286fe393c43e8fbba62eee816a6ccf006ed8045ecfe647b8efdb0d3fd05ff2776ddf804ff417430fcc3a80a2d70ccb6d9707e662b8d33147ee9cff3608056d30eecc2ea16bef6264ff400e17e01642c01cce3c83f45b34492485dc64fbc7fc7fb0e73fd9eac06b520792dc92862903698e1c2f9ef1b6058e83dc2a61ca5d3dea64f7387153c7d273147d1a490c0f506cd35586417b05d3fe458ce96adb66b781481d8b296e6ad42304cbdcb7b72d71eddb2b1023a27c82b58097cd1ee90039668f09bf64f8b3e223ae1cea0cfc7b2fb13d999aad6a388344144fe4e4a8a5f5597627d23f69167e2791fbc062c5593b5651b7352d7f1b5361f1f04209b3865ef9e1082140ebe27e09ed3d620dcc758ad01f25443b7862d02465a2476bd2040462c64f0b8d07c5d569c13a9bad9c78c2a7413aad721e2ca9dcf934bd2a69b8cd34715123651e5a4d0924ec83afe1c8987403efb12d08272c6258faa60a028fa5c53f292ef3631d43", "8aec4251f3582a805f962e1429d2b05d739d81efa577ca73a94ab302c40d80ef26abc79f554d265f5fab2a030ce685db8f7ac54edca0798830b41f2bce29085c0260fac63d502a4e45c53bca05bc3f91c486c005869f928918aa9b5971b7e9eba0db6430a77f2d7e87d961a17f52881eab802533ab0e4508259b13c680424a72403e1f85a29f97a7104e13666fed1842115ac4fb2a3b1c8f19dbe94e54d51193749a77dd8692cffe776068195a824c9a114a4ffdf101d84b28e6b2d7639470d154da6fcaf8933c78877a3e45f51a2740074cb707f3d70c3309fb293dc410513270203d1ba7638740ee3c2017d3dd1bf54f3972894793ad1ea008236e0cf335d98a52a96645c4ed5a2bf35f9462fff5dc0f1cf2436457886529aef040188e76dad492ce413d02342fad876c0e016d52a9273f48f607e84af036b5e032ff70cde357a8d2bbcef695a0314c88aea769bedc47c64ee98dba3452af5f9cdd11c2b881474f8b5906c7c69777bc5ad9f13ef4d8164053026b51a245442071fe1c9b27c4ea9c6811f3c5f1e259d52a585a20fc17", "94ee33e75b7f3a156b6990044a1dbab4a279ae2fc43943374d5628ae3b3a4c8dcd49e214ec5878f74ef2d93b1196f9b3a533825497629ee175baba68bc5cb0dffca20ddd4151d7a7caba1399911419cd816d3a4ad5d9244b4c9e0bb2db2612e78753f363612cdd3b14f2412054c54fad8abd23e56840c5080bd2e49603e10864f09d5891699eccced7857935e03f36fa1a9bd9c9a386380ba3849d42ac93bfc3fef9dfc0da9386a75cbe41a38929f49c72f1d96f6aadd574f3b8167f0c061910e1055618ad720deb5baecf6bb038341a3e9fcf8883699d84aa8fbfbf8fcb3bd426d15beb29b9b87be50d9d7bf0b10c176391e6466caa81b6ffac9815c7ffc06513c8d134fa4c295b1c29e2a80a689c5812adac1a63a848eb85dfcbfd197202acb0ed682a485f697391fffeaa9c2f137f0a84769b2939690c317bd23fc6ab4b6d19bf8629a514cd814806915d92432cc255caf6fe30f29432424d3a4fef144bb554263d72ff9652471e8ea87d5104459a", "8fbf365aebda1316d36b9b64c91268fefb521d679a1ed35ee70d5c5f4c8f0ac52b267272ccde4823074aef216c1d17c0ab36f5d1f4593b9232adab0f6a8020cfaf7c45a0e198916cdb1f9141a3a159155eedeb2c2042e981422c747899c443e98086f11d47e6db4e78de0829f0479859b30b0860d16fdde78639e621383a6501ce1b032f21e6b42849f130368c56ddbf58f99a41a4bc6e99b4765f3c59b0b4ac64406c698df03279d04e067ea5cb002c0ff2eae5e1b696cbf7fcc2db9276e545f65ff2a2f71f93c223aff51b142b36b67033c35296b2162b743bd299a1ba449e8fd6ee322b0f90be5fffffe9a19b53a8234026a9b99487932c780a32073faa4df3e96ab448e6d2b638f86b2f8603b97b62997cfe7769458d2d09dccf299eb5ab52c8b14bd1fd75e91a84c097c6ea8f8a655d8605ce9b78621b34a3b8d72b6f5f3b52dd362c77df679811b735e98a6271"],
        ["ac3c5ac0edf19a56a52d608bb8caec25e22e6a2e9ba8b7a9721f36d86b5afb6bd972e3289241f4590d3d4bc40b3e75d8869cded8f90a71075f2ed7cc627e157ee5c5bbb2824b3f2418c46591016afff6045544e4462b47c03e66ee1c5ec6a8e7958e5ed5ef923efa15e57807775965435b00eceded78414c7467ee9b7d2c30a8057aab2330fa13ed1a9e18444e417f9a2f6b1a09744c92a4feaa79c6de116db1c5881d88eded1637bd55660cd4590d3864755c0c2f390022060bdd822703ccc66c2615c8f18ddd8d2005b93a2e6375de38beea14eaa4ed8be195399fee5f32244ec9b2492aa32db96369597fe17a4b992938b6cbdc4359d9cb54183c0a41594d65f74a5ba37bf017099e2a29101bbef629d2cddc1b8e6c71bba949f3fc051892c065610eff12c6d36e7e628b54da0e4f03c5f97889f7b4b342a8ad726c508f36ac912857a88ff3c5e8de4c073cd777e028193b4e5fb77f31ab7f2d593fbd71dffe95ec8b62bb35520f351e34efe86fe06c77d55c1a81c5226cddfaf5d0353ccdfb9a1d8b350b4bd39d0acebe433450d21b2773a80f338d0a29d08f34cc5970c92c4ee28093b56bfb761259ce8b31bd2d10c6d55ac33383b4e53597d96a25178427d33ac7c6201b20ddefe7c17882ac162f37621deb9800dfd5cce863f6d546e7a18565e42b41d4067e07d5e51bd0a611", "a05312b00fe4d02fd74304d8326ec6b6106555c7a5482cb983cb3dc46bc68aa9dc3b3cbe207f4e3952de5412ef87c107a9d9b88dbc20d8ff892ac572f160e47b29246ce3911c56ffca4d5f1e8dff5a859036cd85e663b3faee9a848f9e31945887e1eba19264f7624e60ed5642d4fbd9a7b93d41ad9203aed743334926ac1574052aed810ea42f56a3bf95ce585e73f42e13ea564e0b4d5c29e2426d789307094791c315667c6a4d38eb42dddfddfcd667285419fafc4bed86d0a4f486277c1baa20f918f36dc206fa1353cf676beb602d3e9d1f4382b3834498eefd49694b84ba638cc8cd694ee768654d3c131928da69b07ffd121de36796c0629e40612d4be740afdbac8d5a5b4a45e0487d8733c4199ae53eb944ba67914c521d5d61f082dde42357f8b9a50571ead4822eb8842b3995982f7642d0b46d7984b777e5b13d1e26128c7456e05d984588480e482c10075fa2c9d1dc78e7efb1694453313cf47078e8fe9a870109780722046a27f1a620c313684533c41f677e6b91176f6758c4624111a1d670b7f643aaa178c9090555072df64cca89dc8339b14b1ce4fb32a146799eb37f77edd7854de6df6eca0b60b95a87e2a9309978c0c24fd6c18effc5d4a8cca5e51f292dd9b0f4726a860a", "9631d1ecfe22eeef9ca181ebb4c032e6360d5a1e7206040573043ad6481092c532a239656dfb32b76d10f0ae5bf191819393f9905fda7614ba951d0e1711ede32d942f1b91f39070a60eda3372c6cf609db776b1f1a0cb94c6d21491e6999739b85516830f07d7d1b7f74b7397cafe1b9232535b6172a75d358bda5a113ba657363ac38f65ee0c0501360cec09ef54f06f96de8c61f6b585a8bdcda033b8825d94b37e79ce5016ab749b5258351739a02767009773c3e41a8debe3147f5797bda93fcaf92deef5feef0fa12a8f75fd53032b10fe716db01fe324b7741bf0b4b89d24ae39627565c7bb400638f669e3914ea382d52220b47c1f126f4f9be8cfd1857f9f25f0e4842f044bcf636140890519c1497d13603c9e6a33ad43acb998002f2dbd43b3b0a04d55caffc7b8f50c0a3e409417b0740025d5be45422bc5087917f79f8e1ba3646713aa51566392af65649d97e3959c2ec1c886312ab241fcc9767380f4e1c6fd93ba9ffe61f5bb555f57ff3116372a741b3bf09014eeb35b665fe89bbb9b67d1afb54d515bb632c36331efe525723c8446c6ccdcc16c68d35c07e07f620b3427343b37c44a24f9f171", "b6a91849f3e2d77f38851fff87e3ad1c9ec2985937d495bd699d1fb179b0e1b57fc233d2b4382c6291d5954e154db50a986a9261fb8785cfaa2b55aa799b603543d01454834560ea29227ad81ccd03105ab64367cb98e43ce0fa96f6a0998b1e80ec852be95d7e749a074afeac2acf3f6e15582c814cef0549509f9ecc05a22e7e5dcbea443f5ae5a2bd5db539b9fd120514dd725a14f41dab57dafd54b0c07f471dab430801c816032dd2c6740c199c054f7a7e66222bc444281d89008e821b26ea8949839a9a427cf65a60a7247bfa0d10fce069ec65d3ecac66d44eb788452c36a7de4191f417ae3b2391ebbb9355486849e6ffa2b154a796d49d7b663f124fb73941ae5bd22e249a7b0e75d4abf82ac11d1d3f196d4ed8324dfae2bd540f4fc9caa54be9ca4ff93e9e1ba088fa6e0917f94eb03148bee6b10881783acdf27dae9c1e5a57858aa69b8a6f1b1d6fed5c12ec0d2cc844b397316c62c2a973c69cbcdd4cb76833bf59e145989d749f5c5116042d41858d91824dd17e6836c1b2090f5c58f4748623a9de5245b2b65c6c", "8aadeec9995183ad55de3e34742e2f168c47dbe99a101ef0f3d6b0b28200ffde935d90457e13d4f25132346904e29aa7926246956f16c4edb6cf11671f1658b675e216c10671ec6cfc5a21186905996ec651a725283c037e0025f0f61f9fea21926269c7018651e3ef30842192cae20fb272f558e409db4ae2127eb517a456d2aa9c9525842634da8c561ccc789f9ead62de6e80d8da07b4a52c4605368b2a3132e5d91bc46e63d5732d6eea58ced51f2ab322912395ad18bc231a91349e16adb6cf65edd28f6a971811e4705fd94cf011b84e53587d79d4944f381975dd8b6159e1c485e1f6abe0cacc1edbacdc4cb0586a3a04354fbc7ba942b3c98d04b51cb48596e6413ea1374410da34e21d5eaa0efdb81e3a6930b77d982fa5513d79e6e1109cbf30023533e2b216a35683a1b75c2fd4a41c277a2b4804857832e5733c44edd0a3917201deed45459b1cc183673960a388bdb122965df0143aa2c0906f024e5379e612b141c19dda48a4fc90fa", "a10f8cd227d214186c3c4de189239eccbd52df71372ff27b9f8aa9c9c4004ef50a2b31f10328360230ebcb79ca640a30a5023cc3d39ebfae60b893cca91ce4fc0cb5c56f04deaa11371dfe9cda3854f7013eb36ea70dbc67044e31c5f7cf1ea9a42e01532f3a05de0a1b0634a8c431d3d65776a9f05d44c026e8826c9446572efcda919bdced0b3890172e71f92878f06d30d45cd0b9adc260fe7f0f0ac4bc322092837d28711540648de74349ffbf6063aa85672a223039211224c8692e2aa0ec88a4cbcf473e064d517c6a1ae3fecd33b5502343bbddfefb6fa2d163581bc67a5d46ea3232a04367d4777655c7002e191a41c56f15ff1202870a153975ca154c86cc331e1a53b6b6b7c870d9693d3d03ba2b118c2d17e1bddaf5669a8f5e054080bc30df2e4efc46cef2fb6e3ba83707432cff334378f4694706b8096bea6c014e764b3b2dd9e33be141f51e2c668b"],
        ["afbfaf3281f74114a9e24ac10d57827e2d68d4aec2c8e70d90ba693082b38119ce955220aabe916d1beae9c8efde51fa865bab20cccfb5c34189316ac10ae07afd3bfe42514f9e9491283f66ed7c52f7ac2db1431219922bb575c3d61256327e922a38c65d106f82272d45f51798872609f0b72007c19bd088089f25eed01f18a1d9e6a7c4649534a95df58073a0525925278c30f32093100215ad26fe9afc05ede3fb4ca5053c667db25ac666bb1e653853be98558743990af8ffaa8a685a72adc2112053b528210e6e1015b8368c3339bf62e6f9e0b5fde95e9963b8cd46a94bc6928eaaab4c58077dbf8a72647589529153af5ccb4c8fcb0bb7dfd84db51663b1a59313fad573b75eb536a0e12dfc64e3eaa7c5c21c413c7d8fe92c09d629e402394feb44b90d5349f33f4a017c145e39d9081ac687e9e9166a1da538599beb7d1d034dccf819366faea213aa16d52254fd7db73497ac0cd81125118377283b0df77085748ac3af27aafc103a00fb4738ebd6a94b7a7bb9aa99f7a8e7d9044c55eecffe3577fbc290fcd10ccdb4db35bf09e9ad38eeb23e4e6b44b63bb5cda43ea464e72ec47959914a7badd4737d1401c9c31962c2053fd798f449f5570da7a0e64892db2ee2adec13858ba80c472cacf6ac4e5772dc93b4e6a363f9e06c50114fd2ac4b87ade3494504ec11dd78", "b783d25a833950627bcbbb478bbdb1b90de56bd3a497285035215ad83b367d20b257541ef3365688593a5214d5318a3cab53e6b4236bf91938a53c0a97cf271da93557b4354beadf3cd76fbf9e5dbae55f2fcf2a2c0d46d7aff7d3051ed43a558c2da6ebaa911c9a3c6bfc78dd283689b403c072f4f6d2cd109b36a53927dcb46c3e2437354875827b90082d823446193ec614b71b8ab6cf39bce26bd342c91434f86949ee5f58aa9eb9c981ca43b83a0018486f82b1253c5b39a024def186e028a21b54def383cbc5eb6b8f26a34c1404e6a7ea846d337f39d46934df696e8ca728dafd08148176e8fd6a66664043d25994b81b16eb9e94da1cfaddca7ad98adda9d799def0eb0c547c1431429142ae5870bebed07248b13b19bc2d6dc514ffa7c2a229c8784aae1b5f03d9adb5f0e22ce1f37f9822ba4256dd76c24d7fd9f8f10fb0c4ec9ec37f1071ff55519cfcc30c0ab17f8c5dc7ad9450357cce9d98b3ddafdd95b80d037bb108b68b44ee4731082d9aefb9b5011919cabb4d0c1f756a7076e0ab958cd2c44617569fba84268e55f9fc5628c570a703903f1e39efd46bf85b575e52459a03c6fc5037329039fe2549eb62658a239ffc51f6b095b46e4b9937e2518eec02e1438d2fae96df48f4", "ae5b0afe70bf3b7fe974997e9cd5883332d3a5b2014ae212c83e2ae1c1257f522efbb040d8e4f0709fbb4b67a4eed8788e9571b8390534c13e882a6cc9b9f363e0c4f8b12f6281cce79ee3fc081340fd085ab2d7017b6b5cc6a1c6d54aa71ae2901d358f23a59f90962abfc78d80e9768b6cb931e039436177793c59ef9b374e9dd2428da13b4d60c7edd9caf70f2bb443bc83962108ac2ed1aad8d69608a64b5e7654a91d028fa8c4c32cf22c917f152390b155386157374fec9a10f840833504d09b8a91d766a46e0f2934d69e2d6a319d434dd3838a1c1c8811bad9fb291f6dbd20efedc4332b15fd291f483d52956dd1f27f3c83a74ea6964a0744cc53ea97f62968bc0c3d37ffc663ea6a056785217cedc4e7c0b2d2e4bdda9d77356ef634610bcffde5f76f048e837458d166154e9c2bf1151cae042452b164939a8036c7b7179905d9039b75d51a4853a116953d1fe0faef5c854e85a8671be132d41dd93e8f9f2c0daef5b9047908a57f138e49fbca2b8c0594c3ab699eb26911ba3b1956e5b6eb283729d2710b857e676b7f059833c0b36f6589520de3466d6b431e8e9980f468de53f32291b1c4d8dc9e6a", "a394715174971e978d70460991518b901de4e21b0b8a2bab3f7af194790c8a3822969795c2018d2eba540915cdcf911189e90f1364f4d60ad9f96388e74cd7dafcf0aa7ec182f7f2f46ac123fa59bb711818b2ba815022ac3acde55171c2f6d9b6bd51355f8aaf87124cf0af60a5f3969032a053616a17e2dc1e28a0001e5a5207ff76fd8a997ba6a7015dc3dd241f324ca0cf45a03c3bc0963e5bcee6df7b070ea2d7807218e7468623f191309482c2520f0e421c6a9d6b54dcb78cedde1afaacc47aaf8865fefe391d524b973aa8d12ef89cc02fd8339ed4bc2fd080d58e91f99fe1387577f87c58bde83c358275144d028872ef5eff9b7eab349bc988d0fd99431b720f06b599cb02ed5e208f9ca4603fd4f02b6af933dd690eae03cf1a7a76d56ec8025e38bab15c6ee984f90286487355efe84d9e9fa33f0102387e2d9ca22a290d5f520932dfed97727fea1c055fcd38ebd63a390b661edfbf3f29fe62e1526f4cc553bca0f229afd80deea8542b8529a9ce2a27d929804818c54835cdfd6cac60fc0a304a3b2ee3a595aaddcb", "995cd10d0c6253d94b9e6d31a7dc7927421312c27dbf6082f7c14243b5c28b42f680495bb4f01e54be2c1d1874a96844a54850b1bc15396192542ae4ebd3d9e7f6880e4f7c3680383e2155bce670ce26bc6c5eea3658126d29b776ba05fd599db94d020a6e2d59ef4a7e07777837ef6a4a0f893f9fcbcfa94c56b67cc2b226042fb2f5f9d709d6b3a0233f8c595e88a723d0f4808f2b0b3bddedd5194dd23e2c3e683000e22607495e44675439a944750d4cdaee647ee1eb2177f74238e61477723fd8ff82f6fbc4c1cdbdb62400708e179e6db3a2a84ea33ce55bd7a7e584d2047842a5bd03e27c1c00daeb0a2e3752124a8d59264bfbceeb9ecf57454a91c0023faa1e9b95d5bc7f47bdbc424f87852763700a9f1ec1163380e0ea7a22a146c9f5c3b1047693af0b2c321199316ec1181f9c935f83542073b148dad4c2b4b2d300ca79f33000bf932683bbea13edbb170a0c4fe4f57e8b55d099cbd8d380d5c2f976fb28d816f4c6d069095c7f3ca1", "b91868168a588e37b65ed35414242ac882016048df479a91bdb142af44b5525154332aa9d623702b13a0120108acf0eaabf8a76076e8039c8deb5dc496362f39f059b470a1961a27a3e23cff577105dae317966ecc64ca9835f40943c19a1eceb3d85cb36e5e586bb1dd24cf135ffb3db95ea027685c7141a68713026f0d69c5953c1dc6ac6f65bed62a305b4c47b6ff2a1190ee2ee4c7fdf4b5f6d6185d9f43195881ab5563d25b72ab64c2f7a6d6ed40183c67d441d8f024e32c906dd507fb56c6d939980c5bbd7efd958f3b63e57b1c0e218fc100c8da8976087cde72d98b9860c2c6aad54423e36fde9a2cf1608f48bab6e297695f28c0c8ee25c41c9a5fb821ff0c4181922587e27a969d8e6b472bf899d7d02a87c414e7635d59b6137a0b6f91de8a8919a89f7a38f2c57d4f1b3228f5907872227f1c5f5c49efc93dd4b0490e205ce7fd03e2620d65741d3c1b"]
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs,
                        None
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["931394d5a2ecf609fc89415087e5ec3d341025fdef7d7438024d5f482b20b379e1bfcbb52c851084feb65219582e5a12b09324a339254625dabc43583edadd196926bb96d4baa73c881803d301d9fc230368a6568e1c44caa8d4d1b0f81ca0f09027b9469c4a51f3871dfc9bf8fc112be759c2efc0fa518b7ce8d0f24f7cad12d7a4e50c7735d644e92fc31129ae62916d5c5966303ef184ffcd53c0f31723e40a055bb17c1638282c554b4bf8adf97e0f9e227050237352bc1de80cfd6cea03072057ef26815869113788c1fa4f2c0b5f03fae19e3c42b34937028197ae07a95b324fd41986e7d54f0d2c699c187675253860a8688c3715613f4194e74172e5c539efe4670d8a937046cec98de6e2634ae05a33be092c4ec8bae63675ea30c27800bd3f74487da473caa4b50b2c8b9005c56a4004457caed5ee9e4a115314a909daf6c80ed56509eeab4fa978043b9437bd77674d3d4de7a479a8f764bf3a9358b3f3bd036826f9096ece3b6a7964300a285a88eec1271a3254a9c95b25fb114a14e74acc3aaaea74317a8b19539479148d29c3189aee6ae6ed34366b6278b0c11495f2854cd93055b37fcc1cdf340557bbb9e504795e6009bc4b9ceeece10796f543bac45593881fbf4a51e9f4cd5254262593b532ca484c2d5b105584f831f48e90a8e8281b28defb98ed76d1863d", "ae3e1331d763a892aa55099acb71e070e38b9f5998de602fe5d84229d1a711ee9580da67a9aa4103fcbd437b33defaefb94134e0567462f1fc79966d2b7cba83f2c505c61d97a26e9d51496d982271f72dae102fe53fc86c853f8aaf58c1fb05b9000fea9d3374f38cd29f93a285c0607051391bd56d61b054cd1664ae1ed2510497528d73f74f317ea8473848d05a9e71d8973c0d887e0695102a14c2d9823142abe7fa498ecb685384dfe7a90887d357088747a1c64faa738bb5b16ba2d08878f9b3eb2de0419160c581ad84ccf9c71ffafd8620c727f39cad06957436af5554885c81b62e24e47b4b1244d3c8c7f11ec544c29a2f9c69b2426d822036ebb63b6b11497721ea84d484d8019e2d2916631374a16186de997ae93983f1feaf8690a7f70cedc9761c3f2df37a35efb74c136d80dd3932b2f36eaefb2c1747c5019d9284b5cc14f6b87c0d0f007ca0ed4706dcae46d4c70de5721ff039a2b940710dc70ac3aa09891104b8773cc547fdc068029c38f8ca3d328ed8c935d9ed0c3e84fdca0921382e8157458d6dd917eb512b5b0c94f7342dc4c81e5e644820779a66db4ec306ee525c7ed4cdf7c2a480a55bf329b67d153c40d83adc0c8ff6ab0b6034b0b866d30596698100eef153ac15", "89397916ad1ea4e3dac6d1f30c1772c70254f03d9812012800f64bb2dbfcb4fc1178a1c3362735b097cda3202166b99e8082b529cdc0383b4c99d786ed2223df4bc8f796f39c6ee84daa79dc954efce0e7ae6b9459a8b5323bf147877d7aad79a66466302f581b39a806a9fa5c02b94ec1cd99a6d8b8c898b5b81dc2732e3270f9d3abc5552831a3cdd5f56b305cc43812491bce6dacbd854bff929b0c62ae758b8eb76bbe5c5b31be4b8c90b3487efe30aeb7dcafd56583a8aabf11dd921ca58dd5e1a305e7b303cf07c75ac90b21c24bff7799c53a7db839ab6be794bfe293a9dfbca48fa1510f3e586b852806f9be56c140395ef19b114d933e9995b687c0c241530cef2b3073e43f6c29b23569eb158318a9ad3c659024f9fa0b0447a43b949b0bd483efc2ee9e6d9906a5635a5609b4272be79d0e078f4c20c61bd7ab0cdee4ec3e42e097b5164f557fa034faa44ccdae1a1f10f2f1d9be6e95e43f2914c58e2aa7e3d18364d777bff7b3f11acf084b398aac81ec0642665d75cb1ec8f327b45cd179d40950765ffd217263814a578a1e35d1b3e484e99ee11d6d9d67e187904b192e26c7d1d333a95329c0d21e", "a5840e33e8f0deb6b35c65d06f29a0cf9cb707c31588a1eea1ae0796fa7862e06b87d62fef66fb76dbd5ecd51216c487b4a22abbf3ef1639f041b93a500ec346adddbcd4e3ff15551e5691aaf5ff35d69a135aec5c408b280a95101501148396ac3bcbd2503e895b5fea1a95a3eb0aafde6eaab5cf0c1533b81d82b2a1d147c8cad10c682e76322c95cf0a3be73f33ae036bddb15b5c9dad3f5bf76e5908d2b10d878b56ce69c7fc94da67f319632f370160442a77f49a56cb4343d5d1aaafad1d0a8804fcaba5ec9beba0a8126b8ddc470dbf2137504f04413eafc47a75d5bf9c76255a70da703f1f88becabd4316f217a19b685db5bf32f1144cb688ac5cf83c2ebc10482de7771c28ef7c73f3f73016b358dca3a3f57033c7319fc268a7afa9e068ba55dda08561b70339194c2e74676f1213910b2d07594424f9a4f4bb22f27f5041658f584ff4def78c0587b1040da6505729cc6f421b1ef2dbc19ca34d754e131de0be07d00175ae97884231c66beb0bc42a86e74506893aae108e8d58786129dd12e97e564d058564c0e538c8", "b9c25c0756618f931f6e4ed2d7f30230267772b997a2f10bfcf24740fe1f0285b37441b063a424e4e6ac6585cb0f4d39a184aecb3fc0e1f1d598f2d4c74506546c7b205a0b7cce4085630b571ecaa3144eebb91b8f57d0750267a357efcefe758109cda48bfb01d0f108cb1caf041ca7cc51aaf541aac8f013232948bcfd597ba2b631e067d28702032bbde8554d2769739d90ac9d74810882e29956888d53236ad31a023cf795306fb83ac69236dcc0264c7c614fc843bd2162e290c8ac97357b51f2ca162d19b8f7eb21a3d5ce100b4d866cbf64c500f99eebd23d409f28741761f342268a2a96d788b6a870d0314c3372e2e53bf395cb3cc6251025747d33667723fc62f61c1001a58d276e0d251f5483372f576f3001eb8b76327d85776e8912a23891e0d8463ec965de8184a1232889809811344eac5e7f832d3fe0ca5ebfbab219ed5d17898a3f75e983d931872c4373451d8307c16228febaad5070d5e45bd53d9c6a09d62da2967e14be38c1", "a078bb00d2ef6cdd0ae071dc96d64a80fd5b0cd73fb3a381fb5d0f3251e82cddebc5d04dbdfc4bfafb7feb2e8e34f1858ac8f342c43510b5156328ebb16208603c69fb540d488d823f4c816dc3ba27cf552ae7f076f51b6011be5b6525ecb45aaedffeae0d3fdef4df79c2de474459c127512e5a7203c8353395af4e931cd7724176157da820f6fd77d4166254bc04b614e6c4088f4d986f3e58f92164a6ef4149c0ad6a23196159c1e42901966b39a05523d24e23982118cf528a3a0ee85320b2fea9f804c0dc949489d6b3e239df9649d6107aa5bb7da1d1beee9553e232f07ca34c661b90883f1f3e8e65d5662a6f3397a27a7f7aa99e90ff0de43459b0eb97c1bbed1d39a23d7a9e9dd22eaa35360b330f966980890b3c41ea445bede65dab78ff7e3a87052697655f2e366196ee1531dab140f8ee931043ff4069d0de44c49870743c053f3ba35c8c080f27e77c"];
    let expected_proof_no_header = ["ac93d0a29ed5f31517dcca82b812cd2d140f002095da6814995f811f35a1fca890237aa6df1ac18376b2c5cf0f53d268a9d207a5c31c5efd497872adaf3ee9388dbc7cf9dba5695d72f17645306bb55c8b8b070e8ce7ad8bb197555ddee66687a438a3477f76576fc37a3e602119492b3eb6ba6cc06f6e78982f1528a9579eb6c502dab095e216b3d6720ec53c49c73b1d30449315c0e19d0286e44ff8d9c411e981ffbf158c2f98862f4a37b6a564c2315a6a4d95bff960c91a4c197ae2da90b4dda42318576ac27387478c794c555f6820b6fec4454d3126316f0922f93377b77164e4844890a2f63f22ba27f543d41b94a8cbd9ae3e667561a9d58258f2dbf0f1044672ade3a3e8c16e85b940a21607d2bf7f246de096a2db68a454e848e513842c4265fe71ad34c42b951a973b8834fce1d7e7330bf3881eba618fa05f25b49adc94e6db7828cd2074c91fee51731da5a88d736891f566140b48ac11f5ff9bff6e9fc5c9af29f1cea4154c051d611ddce65b42a4f8de245ecc3f643d125f1c325d1e24bdb2089676b66cad5dba414c010c5233c2d6c0b5c3f8e80ad57bcb6fc88f29ba3785350a9af22a535c0cd22524fca78520b78d96530bb0aa372dc33432f9f50bb11ca145c4b082b33b6d1d605e46b83f99a5a233bbbab9093e910540cc7907d3d97dbcff9f8d11cb9951c6", "a06eb032a4daeb19510f58c212aa9ef88d920faabd92db7d6edbbf196f01f01119b80557deb799bc10bbc10aafb16b5d874e74d090b6538bc404e50f6fd2cbbd0ded585ce197b34cab5a1c8dfb804757f5934f22eef4e225bf553376450e403f91f8ef7a5f3f761029e7b92f6478c877d2cffebc80b67099b9d7e0d0a7d9785052180c1bf73828ed824cf92a662856f56bfdd5fecb85695f910539b736744f713477101430b10503cf1d8471158e1e6e2c4605c1330cffccf4cc573d08e2af789b4e9ab0652c7923cd97b488be684f567126d4e61ac7f32b640aa348295073442aef9f78d9222ea7846110be8e2a37574f2275a1445f2dc26eb38cf85f8492e22d5ef7440e7902f51b6821026091efaa2639305c0511fae1e154acf62a370aa77b6d2f611d740cf8aeb3d22c57425aed68a35779150ac1269066447501d6ede6e66a746fbe6a8a04b0182f7ce8f4e50b1d4cb108d1f7e0e856e682de65ada7db1e8c504ca2be9ae5dd912beec524bf8614f0b16c74dc52955449f2a0a8fcb45a1744496322f6859a5d6a710c6607643217c76fcc4ee7b99b056afe4ca51fe0471acd5bb3014e9db16c22915e11597b88610ca1523b8b55431ae88167d52cddc79d36ba82627b875c43962ac64b3623f2", "a2879ffb49986b4614b75dda3d56e4ac9df344b0a52545d405a96a7395a28477bb5b5ad17e63198bc3dd9220141de8118b19991650e00693f6780e826a3df45047071a55a31406bd30d2e8c3f5de8cd6cbaf6ade77bb55a58bf4cca56b525c80a828821bda0cbfa6b6a6949c8e934d188d4f9dd6c6a0a3807f6a809d138910c1d5c260cb84cf3be02d9df6d8564de58a686792e2b9d0b446be2257f1444536bc04415e46c1e299d698dd5a11d0024c314e818a972e1b33f950f9329fae2344262ab89bd514a2a6c900a3f205f1e9508146ffed72a1357a5911c22d285a413cbf3f8e41370aa05dd2704fdf9d2ff7808940f1be7dd20e1504ea939fbd8ff976843b3ef6427bd464cf4b39854edd7db1cf03b8265c86cfc0601713ffc2f77f5be6dcc55a33dd7e1a469cfbda60ed2c194e0d71f914e2764c547c3c0411d17e668db39ee447ca5f2386d91d329e9c6f66ca2b41bb78351468f91c6982de4ec5bf5213be12a0aa9a4214b9a7bf8cec0d5eba1c67a0a54a25cf0ba30983e78d42bee55c1c1aec6fbf8e4f179f0935e5f1f0a914ae9eecd889f18a36d0af3e012ada89075991fe8f6b72f7103956d31e96d9e8", "9748022dd2298f9f6980f0e9bac010e1dae5475c2092b3c2223699b4abca18348f5c7a13461c877878525aa1bf50562fa4d9953a566d40293212e533dd193d9cff90a9a21a367be6534dc96de9e86506c0223bd386b0574cdb7197dbeb10b8b3b2a66d03ddc4a150f6caf77ca70c2cddb9be92f91670159fc7fe64b8c3db5bdf646f23a98435dcf9f0050c794fe225080fbfa230592d29476c56bc213ea0ceabd5b31f02b0151baf42b4d818b81dd71c547c40a035699ef1d39274d69af4763d61718d94154b2b8cd12940ba1f9ffea545d7e87a8d2e347938e99663e603b63ba9c14bd24ff9124529997dd4a3addbf61a562defc0903259ab7def43e60a85000523f99e2a00f44fedba7148cb3cab37001fbc19706f32f71ac71c05980e2f2d2f1fbf45f2ec4b3074bdec979ad5ecf94716cd2b7dd6e4d2f7444b671780c6fb1b7d30ad88115f90cb64a699ff3545a408e75384c71d03faf9e20b0015ff4fe2f3e6c61b0702462f6abfd0e8a64ac25a2cdd0b4138f47ff66b8019964f4b98199e3e6bd57a2ca202422fce5b8d2cc0df", "a3ce92a9d1de10d6052af2b4747cd97d328b9c02d1ab4d54e90e62c9c8000b4a624f85b38ccda6d4052a2a88b30928e68bb6e1b50951ca45aed733d24cb12271e4cba4b44284f038f64a9bd8379831b174657a9aa4c54e35cead6f988e0f8a8380b9d17ffec577eeeccd8b7607dc57d3e43c57c68f5b7ebc2b9f6c2bf08e018277eb530d64d943f57f590f2388ed993a6604883f8c4af5f58b7b4d13ce32fb186bcf034914f3ec8b543f3f5c0e07652e02587cb67ddb1bcea455800e18fa1ed9c5e306b3ab97a75fe338da364d678e8e018cfa836ebcd95144a0d95cb94bd7c61fe6e72357a86ce6c5437e9721b796a32e2b5eb119bc72eea7c55a6a15e5ec1d46af5d90075b388aa296ac169750a6386e6428896e0e2b029a8b8780b6d71a3ff5034313a9adb2cbde6b728c8d3e7e7b43091009ece4c1d99a1a41a28564f9223506f205f93d9686f06f1b7d0279536f0d51b43f1220346e6c04cda4b640dcdddc405a714705a8b520c4e18919cb90ef", "935b0b33aef27bf3d7a027722fe4980ea03434b484b4d4466f75e82116c1ac560a5c1ddc57f9019f8d660150c069461895ccd3f916e7682560489214dff7adc2c5f02fc530e768abaf593136dfce93e1025d8190f3ee24c3aa9edfc0dc05d6ee82159358db5f8aab722a11c3483f3f61a752de6f177f4102d075fd2eb69a6eb712a6909c53f766e4cbda302bb9682a8f37b4335578f31a4ac7d2d64f2862cda48a6f01d8317df533a401a8cd489849cb4ee35b17985ec95e937834be6dd4757cf84f8d9dc55e11f93471495f4476b50b603374c9bc8370e4dd424359ece6d6b7d7ee58be1e3cdf886a2ae1b79b35e4ef4a6627078a30a3d85f060ee059f5c8bb3e4bcc4289b40ccaccfddb3a388ed94e3363ba22cdec8313876f219483ae0c5cbf85951ffa2d9f4e238724008871feb0373dfcb0e65289eba76981b0256292827680290a2dc2117bfddb0c169b37433f"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert_eq!(
        signature_with_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                &generators,
                &messages
            )
            .unwrap(),
        true
    );

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert_eq!(
            signature_no_header
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof including a header and no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_with_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    Some(TEST_HEADER),
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_no_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages,
                        None
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices,
                None
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
