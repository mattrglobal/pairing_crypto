use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["b0e5c5f3e4b4326b7498f96e38b9f1e00bc0fd65adae956d3cc20f022e20a9c23d9e82c64b650511609db19ffce948e9a0e1923d85cd19bb49d317950355e40314f8cf58794e6a2102068dbc5a0365b3c2aa383bc4856c31896034e17f37c6cf924a9eddd60e401ce25c41060424dbf2d021b59dd525c58eb84775360adece95ae06bf4b795e66531094575e7f08cc381db6346f0897a55b1214236b1e2702330332d8660187e00643d8f4c81232694a260bc58c62a0097cc1cba5409b6cdf1a69b3581ef143b2a7118025215ffa9dd60cbf27d473cdc51244367af5d55572bcca9a08bf391d221dbed749c994306e5b6e16e4eefb37bb1c089b934f4c2c8d941f506b639e81741809b7c95f01b03d2b5a8fc5e133ef63cfc9969994fa2fb8a7af4b76b80c912b2a1cb62610c4fb92c60ce439b49893269d1ae76dee7c07962a6a055d5dbaca618a73c0bbab0330938901147c7804ebf8d0a65233e350ce3e528bd42705e87a6efa37a771ad3fe539b20d4ee0f5e6608a4d797039c415a64710e644d6daab85af943abfb821128bab1824ccbf0d3d0f4ed7f85aa657f27eafa368ee506fda77a1a6bd6c862531fb72f649f3aa20d8f1edc9bc55f0adb967c372d994db1c43f3b639e844f148d6f5470c0aa15bb2282987fbd11f668a4a125d1c903058731f9a9d283fa4cad1e95f62d0", "80a4f776868dbcbaee7f7fa715b0bb995ab2ca2df4b5aacd27940dd5195175ce4e3c945e400eecaaf34a3d392f659923b61a3d674f3c1cd7c14cb87049038312c0fa3a7432396f79f3c44bd8728a36cf48846c6b7fe892d3cb1b0cae955552e38988f7d094c2ad6aa449202c62dc52fd988cae3a5c5bddda7233b93f7f418743df64e0a234e5639bdbcd6aef55e565e603791d1fdf703013425289368c96832d5cc326241ab50fefd81a171e916049f812d5d66823960c90afbc263f040260694dbfd4426fe6d6fdd51c72e21e5aa2733e7de98b7e8fb7a1b64aa6665d6ead122975b21adb5b0b33e9f67157d486d6fc16a6740dac9eaea4e909d8169ef5ab5508a9ef378f00ca06abd369dc8b3e80e2695a1f082eea1f0001961b3a1fcc7dc4fb85893a186e90bb0a8b2557952b5f9340e5d9cfb15e283c93969438be6551bf2df8aa100b89c739fef0f15e68bda2a8454f82652a6ac347cea43e49e481a54dfcd37484f174c314c86811f9525d8d6515017bf8d7a633fffa6f2cbc74a84a77c72aa44ee496cc84283d8254f6fd977b4952233dc2b3451bc6b31bd807e8077b4ff24c7e132fb40394ea2c2cc9c3ea7972077047126970338c673620695427e355715da5d4ba994d22dc94a647b2b067", "96f9a27f19da010d71bbf1b31a118f7c7804d9b6d6ba029294384553421eb28a922f2e4305034b00bc5a7cf2f8ef812d8549cf4e1ba2529c2938f73b517c1ff00744724e2cb03793d3d990af613e16bfce3d13767f9bdfbfafbc1bfa2667037aa341e31ba77402933529dca68ab08cb8322adc0567a4d4d595c8db3c27c989e3f52247a3f518667380652a696b1e50dd6ca739793d024499b152ab92b269312143e145ce8a01f7965e0b775c7253667f22086b88ca4febc9fbf2d491b3718b53ba29c05fe002a27557596b07e29e85c820223e293ff28bf7ee863482417881a200327f4913e8e2047b30dd5fd28c724d691fcaf07b064b9f57ab14e743a3df715b93c42b7cf80aab78a787a5f9443d625686084006f03f6b8ae794034a23e3d0764bc72af5672384f24668f8c624905a6f62c6f902313979f6ca849ad480acc94f91122615c201a0632be919bd47e54a0c69ecf836e13be43b9e1a09be5ff081926007513438fb4a6611d93582e193c92d333cba3124d3389cac9655d4e93417b7309fe6e987687d33a8c084523b355b541bb1323e5700250945313fcd8287ba08192235d6e4999ad6120a0b2b7814f1", "af7f68c2ac42588379481e5826956fca84b15b1055307a2f1eca520304c07bc1e033110f7714037e9bb175fbbe937380aecf8bff21f8c87328805db6b5d1da33cb7b0a2e80a1d731403965082f8949669296062091ed2821b970d1fe685942c4abe0efdd5950d8f0b56376e0091d32bd995787bfaf5f45cc07c0c012e1a7ead1c7a7958ba7765721706696c069fd58535469e41c6cf0c34f7359ac4c6aaf5299fc0f7434252afce28d9e3d9f9bafba0623a65e494261294a0d97fcd6ce53709699f0d0914c99d79c3cf53518e11ebe9e20c3488d1ff15d9a80b8f832e25c1fbf4199e8cabdc551acdb0ec3f60f833bb36810addd62d80a3fccd8a79605d0a9dfe4ddbac7499efa8e33181b507243426921b9c3eb11fe2a85ef525c70a0f645df106abea41f16698a36ef7ea0416f59ba465a6f54772da589c83cd27e80625a5db2e2967903025e5b2748f63560b4c25840df503ffca6b75077d3eca87114e6bd51f06a7b603e6657a0bed0619cfb8f993ebc9c11f27c966c1ff5b2a2f4d30d1ea19891e95fa81ca78816e0961340152f", "b8dd06821225fb048835396930f22316ca918db0b06c88b82ee3a7dd57e5357e8543be4aa8464bf5a9158207700ef16b87224784515f4879cdd5086cb64342fda37c0212d159f5ee71c783bbdf9dfd1b1e983b2a1b37a47f3cd1ebeef58474b1b59b27d0b88351124809db227eb677e7dd7a6edccfdf7fcb06918837771a66a5c2c6fc08b39a4f8a9e4c1b7c05932bed0d68c639b3a0b688725a2c654ee9dbf2ecf432e19d8b26870d825dcc9a8afddf5aa4d4245c78d64e9588bb3cf85c3394a458c94029dfbee4a7d5d3d9e867d40018c4a68b9028d3a0079e650eebc69104eab307b03602b2b861c27b84f2e097d50389245aec3b32040f03888a981ea63cceb4a160e16f57dc5546ae2e4b0ba3a04941d1294e7c223a2c6b63b63025dffded303ebec83bcbe3b1a8fb43d2fdcac46ff08fe611c4faeee6f609a5daa882e4c64fdc4fe833fe7beb482ad7e9cf50103242219f6a6483c5c816a3801e61ebdab8bb6fa1e26ffaba5b25981208590a71", "b5405dc124352ffd1456c6dd664f75db83524cbbebe1487487e3144df5b4ad39f5a25f29e4bdbe980e17f1ce9e77cbcbb6ccaf95263cb1823eb94e7a6f49c6c1a3e370c021c1938498ffe4add0aae761eeb1907a26223de079a02e7e86bba45197d583b1cf0d4460b47ee421a4048878f4f4022c942847c0ad4f68e0ba268638f57d6125bdc6c22c4d1595ddbb1e50995231cd4629e92c6766c590f3ab3b14eeb39ebb0015e9d57a996215daa934b78870bf8f7732e886b7eaeedbb8d4f38010a52dddf3e469b6985e76b04354e27afc5a119c2b8905ef3267416bf9af2133b003641b031b89bbb36e775466ece84e9c583786e26ead2f72a74659567cbfdfeb85ee1fd1008e96d2ac94d0753841096e6e3431abd367737a1175e316e92a4b834f8f6c3dfbf2d7c0fbbf15e7e7bd539d331fc9db92b97c05c881f8af39ac12d5e15e55b8ef688413515dedfbf243aa95"],
        ["b40a12168df4ea395bcfb2c2c8c00ca307a52bb2e91f0365b9455e85a10d58d56a9a7918a4925594cd60afaa3e3dc78caa4f62496c583c1905193b236e86935fa93af3627852255acf996c4d5c36675c9c40939900e269e68e6b5cb3886ddad5a807885d8f0c17c59bfe07944700304363534716f65d2a475b85d0373137ec3c8d21b43a3528c3f3a1e8838182e924176a914d6a5ceeac04e5f0a7a0ea724232581c50585a629648f5ee7efd388486be463a69e2b20e55cac793c7714f664960fdbb54c2f87ff249156e2e4caf461edd59fbc64aa771cab068c75cbd360eeb04f49bcdc55484610852e764aa78bca24f29c7adeb154df16672705cb6d4fb895fd41b11a52b66d3c29b9cc20e5c210a690260829b581e270856e88d0185709a5d80223598df938f8474d9ab3372a9a6883dbcf8cc1b3ce62de8614ccf9c1860b42801bb86da840835cf16cc8e269762ef2fc571f3cbd05ce6829b39eead4e372b8c6e16fcf2a2d00d77b1cd181d7e71eb331926356649eed3d46b58da85d48641315018ad3f2a9a59870e6a0884fb3aac641d3f9fc0c205c71c386a122e2c6fc6f2473d80573281353c7cd26c6f3ca22e65a47db4c145300413ba9202af6d1bb2512258a4e9f588cea95c5fe808c0b01e4971cdfa70e47ce0c53e1a0629202928f9e77449951e42934d743b46785ef4c1", "8eefa5859fd6bbd6e22a211340647d3c6c7e54fa3aca9becd7914ebbbf652949a389a306f27eecc0916b8e4edee2493ba8ce853870d71fabc2b2fa16d7052c9a09b08cbdeab6a4981dfb080bdb61bfaf4b122948951f16e3a4b81d75526463588c7bcbf001299885ce59c5124fdf000e9466d7167a594a852e1e494b86ba565115447b370ce7b334246d05f5b819883a251ec1e63a08cc9f4906c60448fb062d6c9b7905971a82ed32a305788b4bfa9f08d9b595065e0b226a34b40dadc0820e07540d47fa3de41aeb4c342f590ee34845edca9827deb16c8f5650cb207dcb2452dea9355f2f556ed4463e58c16afa434bb53485bf3b42366053e8c2945dbfcb4b11d03a5fe11385e419c9d4790e786e45fc55ca2a2cbc6dfe16d1dee995b896ad2708de32bcb427870f06eb9c66cb1c284663e41cba480e410c87aadcb95e2d5c321ec37186b2e126498f94abcb64242609401be35312faa36488d36b010eaffbfef6c5ffc6144a919ea79205a92b9341ccffee1c2f61e332381c035356047f2179453169a52e0cd14337e7f112595d0042cc79503fd14d5809df59d3e2bc7141315973615952fb3871e2a2f90c23e35a0caa7f2a679f352429be6b6b6f244b394e814df15c3ce1866da2968f464e0f", "99426e8de0f8c9745c4434b7d2a608f3f8c4ab85cfeab24dd19dd1762b6a7e1679bf17885b88df89c491b0b07d3c16bdab435833a9a46ddf93bff5169bd70e02cfc01a92a98e65d441d05d7e774f30cbf086abde10813a05758b3c38601f51fe84ca3b073b53e71dbcf49f8994158c90f44e8f095c93b97487e9e34eaa42b07fb4d2f455eb78087a35cc8daf681207925f869ec792195fe83e605d2ba6735975c3178e5826c4dded2f969c2993a242336d8217d45bb2d6afcf9af13533488faac472b64530b0bc8fe0f93f42487048513bd44df0e49580ee07ea28459f029b26cbbd050ae0efd254fe59d3f169ae33c970deb4d4c94630eb72124026a91ede052f2ab5c9cf0e57c813a7acc7d79369d0391a6ec89338f76a25dc464866a55f51c407f66b95c2244f262ead9f2b0002cd284ae77fd2064a294e76a9252bc34c1efcbea1c2932e545d662e9e54e4cf4ba36d38f95a0e8a7ff61176bdbd5c0bb0f002856300c7cd30f8ecdbc76f9b5701903dbbf91fe94531c7648dbedf8f9df7c1b21cdd14201670c0a7680d6f9f2ac2ab0be2b2de558aefe893f7ccdeed2cb446507b073c15368a950b2d2aace4903fb9", "92f8754134c89f1e7e06ebf608da87ae7c7f09af5efead55a773aeefdcc6e7c61f5cb08a17f28e31b7d433d9fe32e51b96f4855b9d999d938f21e00a28b3575a5f5880133ebc4e887f132dcb790348ae9fdfd359664c02ab65a1e50bfbb2602fb8e9e65cc148aa11b8d912bacebf1ef81cc0e3812cd030c2029cab6d6017d02ca1a961f01b5d7020df748d55b4834eec392470fdc25f8df76137a0febfb64725b2516d926b2f43697b917af02ad3d54a0f355e7b3a9a90c2f0b50d1396f967aa5f554763d9b1699d5c7c33e52ccc10c964800ad451cdf46410c95ccc8f5006a999d57e0d544f548da32ecac750d022d51f6b5f9bebfbbcaab8e0d409d35f0ad60275b5cea625f94876bd1bbef2ba9fb540184d5a9fb26e0caa2a965138ebbe8505b697af28b0b3e30770b3a5acfed1d753299869f82e997aee9fb9f72cf96fb798868094c1ea6d841dc364339f374fdf5681b052c8396747443927a85dbd93f16b94cda18a72108ce940559bf951753c6859e390c10088ece04eacafa488e88d984a975d8168c59ac8cc15d9d9d2bb14", "a284c6a39881800e663e598a1670b4dd5e7257fcf5bd270edf448097175b62f12b0ceadc39991c365a965e57d6d759ebafa07af8fb6d62b944c14c0e787f6775bac9440a1972b1b3e3b8dbff7da070e9dd6db0b07a4d69df906f17b1e2931dc4a1b0b8d14e1dd6594d6904315c42ddff999ab829a1247a0c2f516d6814a433d38e6396dbd51e4703d393493da39328ee05b37453f4ba79e8a446e2be21a91a453424cf4581b7e6b3f39f6c72f3f5ab721ca2e27ab6d0a34c131f46d2ce2bc595f5f6cb22ac4e64671f72ffce33ee2f860b6a42439ed3b67fe4b2836cb59df52a1daa71be9ef1c7bdf8cd215c6c4e9d7b629c0be831adff88d8f41315da2ccf189ffd05b212d6d7efa436fefa125ae95644f5ca2a84b7e9ecffa20bf2e4ec7a5cdfa1b37f587f261f081575e1f3a97b8e2fbccc0c119ab48b7fd386d08055300ab481b67fa59f539210cf28c81dafdd0648f42d9510371bda3bb58dac6f8d2fbd03602022ccd4707b083f176e8611b6d0", "918413f2ca6b307a4dfa509ce283efb5da1025d606aee8d39534f8758fa29badeab42890195fbd66e0e81ab25fa86f0c9740bb5b676855cf0e125702e6ab223ee85e2299245a71ee07ec4509b790305c5e6f81a24308cba8b5318d43b3f89558975c74904a683a6652a3647cf823e72aa40d07dc2f2d7d5bcb72117e6a9e6ba6dec963f07cbb4bf9d5c8ac65f6a8c73556d8655e949ace4a0616025f467fb83164a0dbd53f52e38851e7aa2c4d54d42f09bd5f476c34955e3f858df6e77f9630cf56715552a7e75334042e3ff053ef696c5b274d67df25429de94b2316ad09358f6f0719ec4aa555bcd662cfb5f85b5d6dffaf8a69813bd1b0d094a03b7901f1e217b9b8f3f1a4e04a836336b4e20a1642d82c94f6fd0cd2499339889165b4eea3ba06eb42d45c5fbdc37d1152de90f52e0e4a4d35714e59b7d15eea6b189664539d21d6ecd16ce9ce165275b4c5580b"],
        ["8f29db7cecc8717e731ff6fd3eccaf3693e5c7293c2787dc8295e705fdb4dbb3f3d0edb8c2c65bf672ad3f08c3ac55a7a323350882bc1578f20a3a26370a1cfbc460a749e51b7ba137e3754057af63dd0b8e94edc1edfc4d28808c542a368fc9b4c15c9fa7ef673582c2c27f4745c181553721132549dfbd7289633690f0ce42501cf141ef5a6c99d7d5e7b244666ade519c247e3feca59a473c5a1c65b1c812a67f4dad07c699acdda7e82915828eb20b89db762b0e1ca26d6d8dc9bfee0c1100186e80ee4333d83e6dbf5091e181a632c1d94fb847dd6fd88d585570a7420a54afc2962b7c801918a4b5455c755f653a6de9fda733515ae4f902569a9273d257ca55ee85930f0288b9548035636d183392dd36cfb682229f99e48d83f88a75c0c27c41df6296590bb34c918fcac668149898aef0b2f60d8b5fc215891096a48dcc8f19af15d9b73e3dfb3b4b0606c54bfd51a12222d9c2e8c2e36339cd7560573c0f16db95a4f3fbc75f1006b1399c7065de6aa24413b38863f294bbbbab9301aaee8e0d15a704d95ca529de2225371377c6495a6585ee9a5d593674e6650f3f5c2d8031665ddb7e4e47a9bc66de6606f10d0ef409170ae61c0b4618f7dec926901d62b491cfb1c3f17edb7fc2465b56a547f98a8862b4af941d52ba01c8968adaafc37dcf0357e51d97bbff156c90", "b984ca50e9a90a71c42b5983583c2bb360d1dc1871e1304bd18034fd15220d3517751d05d3c64b4883c5369beb878b94ab2ade4a78e1a6b5397ec18441a05cdc4140b746871caefd633b99be9bc52a7ceaf3a84825253b9b25693d140d52c0c2920befce5e5f54201d1156858d5ca193d07e751a5a14913f933de4e75aa4c63266dfc9850421c4c863e1fe81b7ca37fc68fddc99bd3a1f7832b27db2921958c49d5358ed1bfd0b0a4e48d95f2a3660a33707dc914837ca142c374f2c02e2b50a7cdd6b2240285c1736de389b30d91751132f3e2ad59ef440e7aa98f3abb1c44d029e12d36b684efa71fd7ca1c67ad72e6414aa985948fb7b03be7b9e39774756c84efc589352b4aff00c8d35c14a922410752a0bbb4342f5ff5f0ec68437151a182cc2d54c42988ddb0fad756809310b0eb22a5a313db6296ef1baadf4d5b574875ed54c4479f2926046cdec1ffc389d3d2d6ad9267df30e21d4abfda8edf3448df535b5c031f83f6a351eb721f241ab507748143bbe4471a3fbe07a2ac4c59a6d5a1e17a385f8cec39f75fc6f816d8e66e114b5a31885c54e4dffe4462ca0b800e6ed4a7f8c080b0fe408766ca92eae0a1b14deec531bdf8a0cb29018409cfcc269cc3912d763b8934e21c7b400f927", "b7047830f713cb412bdbc58d4e898a605f99a705c024b899502e846f64887ea45c3c5249a6d24a35b4715d497e8c71f7b749ab5449fb0568137b4dd154e27100c9489f8987cee0457e5cac1cada96807e38915e8a05e4c26344fd3c6217a207e951ab706b2b2c68d9e4cf873f69d4c1fe4cea6a212b451a445ed2b6489ed4405bb6895925301d1be6e3b355c04e781f672dc60acd326c679469f5091729dd7f2fb8320b5d48154915b62e27cf187403604be42e6a4759fcaa2e6e84628ab161e54407553360f5b986cdbcdbe58c27e732416131e3c59c64637f0ea9d35cf668ddae75b60a20793c2d4db0a463e95a1fe70f081938162e9b64e74a96c2a987327160bb376c4c6827b950353ccc2d407f5123f3a975a1b39ca25e025625147856c1fde615697bd694cb9bc3c6aa0e35a365ee65c74d6f1a345bb8c978589d4a32f25c2d55c02bb4156a2d2d60cffb508451aa078d6f77a686e8ab2c18f188b42763ece58c6637c78cd5719d33af00540853c3b4c9e75d45aa6eaa9bb8e516a7fed4bb1c21ddc5b93c5e892ed51dd3783896c1a7e0f9a673e69d6ae3663fe155cf68c2446814a3e602fa9d0b7750c469e59", "a754d42335e5d3b28af7905d4b6e2a952b88ea9ad7aeeac037254c490e5f4438d7f73162374e0d5bf32b1fe606121e418bdc1fc189fd1035e4a635339a85e1f686dfdb7fdfe2edc2d54bc17754475481a04803c7322c040f322e570bd819898fac50c4aa7012a3482687784ec794bcc1a6876c521f5bf6eff89c485b265b0adec3a84d7139dafc9465768d05bc84f93c00ab4f16fc9ec66bb1c0a01e6b2153a4545690f84a543b37f900f19427cace296d6e1a7745783ad5571388216dd45baeae10775ea5c434309cd2aa5d8e469e153f28530786d0d0c32f3a71a6d3f76321b1736deec9a0e1ed38c79c5475af939c02db31fe80188f1d9e4af2ac0ec598ef551cc436abbb427583c868046bda025c343c8ed323f0453f04a5a9d00727af5237b9ee85630511653b99385e768218d2420dab0c7b85ee2f5689c13aa6c9fdec3b83a822b34ce31ea027e7726410650c456eca2bf2aadb1e84c2fdd7a66427a7025da4d40644dbcee672800e3f1c21491600726ac27fb2b5b9e4c6b3a22bf08b7d09d040e7ec7a3b0dbee19462c48b3a", "90ea269d870e2afd77404be4d2eebc156d1e78e881b00d1b0154ad95a7c03186cd98e94f8090581ed895ebdbcc1032ccb863b07516ebd8bc6b45aa7c39dc43af5b171a6284ab7ce40865216146b5ea5281a8cc933caf90daaeee92220225836ca2c3678863a7cdd392a1ec3baf24d048f029aec468b80700c38a7ee720eb2c99f85133dbf3118a091f17650b36bbafe0152dc555a04bb75df9c20db799eaf88de5b735b4587dec3abf43fd7c2f8bf8bb43e54a8e8db54919ff92913eb71554530ac53af840fe6dbd3b479bd15d91f5af1f9d94795c0b678878d2735de5108b14fd63d0d9fcb57b3e3afd7708ca2c11690b98b639c0db2f9b8c19ba55f510b548462dc3b048a29a2a1ba47202515b952d1115a47cc7c177abea246c85f53ed2e5aaccae0e982e329f734fda6cdf6ee72511f9a70fff9c108c698c9d07b3bd2dc2fb21f89eaa8d2825ae84b68a9b836ea51f7766f746a933288d243e9c657a84f7bed7578daca60aa881fdc629cb9a1400", "87261db5eb479929092822566a1bf5718b16c6a06ca730fb7cb9c4494ef9e4cfef08e3fa5006d2b2cc6579eafce23cc39745ed83bf02c95263a5b6bc2d960ceb594a580371729b765557b50378b69da85ee28a6b5802809a0a45c0414877effdb576cd690cbe8dbb4715f34a3ebae6cc40770d8f93c68e328a06aa94b68309cd6377d28c9e36a54cba588ff11aca1f7e65198ba19a4782346a24a2120bedb8b92d3c950a85cb2e6ad0b884eb6c1d73ed02c6197fed09e64b0d424e0570a2661ee35e241c5fca18729ed3fb78250abbcd613ca24890bb297c59edce0a5027ab4a858b7cdbbf1855ff24e400bf0679fdb90f2f09446dbe78879fd62e088e3422707b59d9b2c7a8c4a938ad5a761065030053525f8b42a198171ec07a2184a622955e1dfe79ef7eb08c2c94e4f985ebb51712838e670cd83fc37e559c9851128fd692a46d82d2fbcc73ef4b8741c0b82b29"],
        ["9701fabed931fc9d124b2adcc9b38fe658227852bba3087c272fc2031981cb916216d85163f7448caaffb15d729283b3a2eb190ea0f94fbe4285134586b078d4ee729537f1a2ad79de66ee38c089da7bb36287d5fefb16695cc4d2b0e7978c5cad4640dc278f8c93144a33841560faf35810322283265f42f5033c44e474b8e036d0d0e3da5e50db93b9fc93b7ceb97622842ce0d270ab3e9980ad753d14b1c947ae288455d3a71fa482bd00c7bec060086f48825b9f84935800a3fd2634dce8db61e3d2f4dd9acba0f97ffdee38a4c1130c6c15f5b55c9a7a0a31797aac9137d792786c0f13bb879c1aa66557a5eccc27d3314abfa79bd5f3e31d3e03857d05ae493e503ef7915323f83f9609a37af23feb10f54fc880eac8e41ea9d68050d381ea2a13f036cdc05987341d86a23df14088211e71b0d72069581872d7535c0e9a8135b50c58b8e34148e2649c5a06f359c0f6bac72efaee06fbdff155a0a75c941787eedb8b29dc3f5ab2a1b15f717a130f1dfec60a9276f12b08719830a463e73ca6166dd45e1fe92335004b1510921513be3acfab6f13cd550a09be794ba118e24b557f9190a9da9f33ddca1ec6dd3a0075d0e48879e1cad0ef5ea21fde425970959b8332a1505274950c4da4435962c0ce99f1541d004d0b8f89ec28f289bd9bcfb4bf941ec4cebadd6b6f57c436", "a5f27e6ef23276a681d8cb0f1a51d56d85680b09891c776717e7acd48758e434bbaa7c54d4d8ddf234344ad03600787eb0246000186e711773793f30c9573640d30baee0258f728c2f70b9f0e47bf2403f40689dbb3096319ae53adbac0c316b8000de19b9ef9387de684ebdc8bf50bd7eb81fdc4293d846f7751840c745aaeb1b1d569c5c755ea75d6c9b05b29fbf9964037f0d4486d701d866f128858f5ec8bec5988264ff447dc285a36b052a921413a39a37f4145e7c04575700a8e7c8d80f3f6610582cd276ddc4fcb62ce4e28a463d586b1ba9941d06acc58119d245fea602e1c413921438a68cc86ae0ec68ba0a2a092e92bdbcf1de0d888c4040c9a7bdf88a3e447bdfb930fa8be4265510766e885e062e85c1a98bc8b8dd2c12cd2332e2c87e9307469f846f80b854cdf61f09108c28d79b57887cd326e733c58aa9d5c989ce09ddc8ba7af25253c58e0f1e442f88feca33ae7f716b2f71b155c9384c59ec7340bb132986e6142633feb2cb58de75a3d6fa8ac200c37de61de06bd388178789bbb349740f5e8805bb01d18044ced34b7c03b05c607fbe96ff34d125712f092d185d0fb1a9017a488b49cf9220593e8b0285ffda574f7e1df2254b732ba07e563a0d57f3120fa2901def20ea", "a0ecc56422df58954e6df6284077342206e9be83aac3fb37848fac8c4b0d6883ba996e5bc77300e1659897cd7cc5d403aa6cfee7727c9bec40964f71df6f061532a8550e54553ac9b82c5ed4231745962e5353755cc12e2e92a6716eeb32e4de8e83813d42cab1ae95a948c06ae255f17c75bc88ee2953463c6c7b5def6a1630d1d0014cbdcee8306ac503f9ddcedbc570cdd54a8f711fedfa6b8b201a6dedf953f8382cb25aa58b623633a45739ee5a57bff592d99fa949ea6c67d9d1fed870c0472dc48244e4563650e1e2b3738cca4526ba7acb4a95a231eecf3019631c85ab0c27a63ea13197ffd8b35554674d695bad2bddf3041070fd7cfe35ea2519e8195f1376dbddcaee7fe85f3a3dbc53785b572f8365489fe57e35b0d7a63274228ef9c35d899aa639a44e8824646b92065a0a6039b5c5be3d47f77e400fda5db4891f94ac2cf065b646cbf31b7f74162c649e6cc450449750a0578c2f5330ae257905cede3b336cc0760d591704a388e23488ebda8f8fd641fe62d234bc2e55e6c997b643af754bac0fdf3bd13aa53ea4070c4697489061fa99bc966025323878849b3b16ae0b6c02ea6343761c0f072a", "afb46e11b5486747348141786e7092f6869e6547ae5f7e0abedebcd3d910464566563ba408bab272bff3d09f3b5281f2a989a0265b02ea4dd1f6cc4561024dced10f3da2c43dd66196f08d9081035cd5c4c8284e5ed080b644c0cb30403a3631852e05255f37b07d0e3b95ea55556927ccc4d72b561d81e673d679c1a5bbacdf70e5cd4f70c81a9e254bf6ac680689575ff88c7bf26ff17fb524403cdbca9a057196f51a524f248dee2e2130827ae6da4080184a87d6a9f31e57b1887e9ff48d966e84f0875fbafc1ff8dbb63f2fb0894be0df8927ab2221e2627693fe06f30f40e7d5fac3f22a5eb689975240d543f5445f7419db9de6e4acd480bde9f52e60c6d3ae6958e59af375c77b56c071a5271056dfc9af76d44dc6d58a3741363dd543a7abbdc9f795481724850f6e18d8481804a5933d500b3b011a9585e6e5708dda1d05602e9c0d3abd0b51d3291660116dade945f687cb43935ca02f6b7444a65f8085f3c57947e6fc536aa5d21d68c10a7a3613d9009a54650f0754fc3f38b4f6cf46c4ba93cdf5286b9666651decfa", "9070b82911639d69d6b16241e54782aecb209b0199f3165295ab325547ab80150c1914fe113ee0d44606b63c097acc1db1c92022f371f0575d9b6dbb7a327f83411faf890ea520d287f7742833c0ce41a213399d8b2b7629297166f6c2ff8c38b40f272ae60afe9376a201875a1088f6849a2a405e066db6e4f9d75fe0848656fa75a07c647526eeb1e75b1fddac6a8d6c3a89f1bf6ccffe029ab047deb906cd961a8d8d50e62f2755e63945d98cff851ed298abf17f9a2fd6bfff08ea0093d1251f78cd442f6d9275987a451677934440bbcbdeb83895a120e0751abcd70311e4260321ed5621af153430fe9a52929c2b5410e331bf0c630d9d0a65bfe58bfaef8f2b0aabdb12fcafca352fdbc290914934e582cff0a8b90ef8b27e9c75b78473371e141c43ff5b61a53386b77ee612607b595f05e5af4394f667cee8e78c10860a8292377047efae464d535e08386c59484e78e095dc333a0560ec1e9f4eea80730bf6d8bf0c78aac0dede1857a0cb", "b0d4dc4351d095bb28398da76a154c96727056922f78e705f7b1f1e9a60c70a6abe3debea7d4bd121253ccbd5ebd0e999772457546f91156710587754a2685ef39a69388d722d0597d46bca79424f8dfb1e3ee3765bdf1f372f5dba721acb39e956874eeb24304b12129f17fce4fb3c47f869d0d981482db15a75e3025764f1f73b96d3abd28111333eee3f2252fb1e35ac37b846466d3cda4a4fb81470583bdb33cbce20050a9a77d9962affa03c6b84594ee464272072891262f86d0d72b60a43eb983abf1bbbb4585e82a6c4b32251c4dfedca67189978292de6ef1e7dbdde0c396e6633c6a739ff9cedc7760161732a00be42a452e8a91d013abe15660eebcfd2b7e5c7a282eb8e2142ce746473e0958434e16e4b7a97f533c92aeef5c87a7e809fb54a32f4ffab56a8b4e5a5d804138e9781bfd4515f18d6d174d58cc8680ebe8c5610391a78ac5468b68d5328c"],
        ["847d1ab39f43943ed72d84fdd93544931f2859b522b54b7a8752c2fbc45f338dfe57ebb9d584c30f169c6ecc7abeff37b02ae40c09fb84e79f91268fcc2fb8b3550a002a951fa7b82b0a9564d29ddb02449a29bc4c8f396c5e8db94b494ce8d5b0da8fece4f0c5ed414f77d8ad8b301a14d3c6d5d8fe31ec061cf60280a41938308c2b670b9a173bf5b44324a059d56d1e3dcc0f686e3491f56c9e36955468483458c3c35d586a532dc47d49425138115ed998bbf65cf2103542e974e6579880c2beacd0bb8462266e9c8b8ae3d1953706027ae93ffa5eaf44fc4d7e09a8377f2e99bd3c4f89564daf94b5edc7023d0f3a9634e5c8ae31ba47769e8603cd9452b0aeaea4103ba0de90ab93f765c3bddb6a21833f928c1dc3e8b09473bff967ac420b33a38ce74028770b39c12bce074b6ee977c6122a3f83efa8d31b30132c769339b0d133e3e7628e325500ee69fbf2732285f6797d483dc98147ddf7b4ddee2cd6166b18c400b3cbc37213496a477935864d04ea05a6fd03b1c38edfa29e88b1c34c9892bac357b65dbf5e583c93895941f781d1174d9bd29162bc804e49dde2d8eb73c467ca91098dbd94fa8c36cb3f3e1d344afd4281135aa2219fcf8b96e90c81699e7434f89005bd29663b14ed0ed8c4e99b5cc13496be3aca75f24ac52529a9042ede3b8b586aac00ff52fecb", "8b52717dfec5d1255ea407dac49cb138e5dfdbebab104ee0c336d72a8ebbeb56dd7ad0e0c9fef0751b957828378d3ac1aef85712272733d621ca452c154bdade481077ee7042c0d6aa2add7b572077d444e0d452e08b71af63db91b96cd125e388cc10a77b738d8791e4a747521f209c9f3c8ec3bf2c29287a7ac8b3672bd1fee4a82bfdb95ff0c398354e059db053331f7c8ced885fea60aba534864d0c060fd0114fd2f75aa9fa9e6d8bb233d2081b1833ee6fb15ca107c83dca117c92f293fd179028d2bbec23a6305df3069933702d05f427d3c117d25a128b1ed577446debfc36cad2dac1d48d986c895ccc30da3c69c619b4d7475b5c12b202256dc24c4ce010fbf18688d7ab02c3652364fc8760964fcee8084ba989dd1cdb344b8d6e5ec6fa464a33934d848d6de444294cde23c43bfd175be378b6c46edff426a698aebb289e6fd790638c904587005e451b429fb146d5062203841995dcee8dbd576c92f26283675767a4c6bddc29109004569027194af6a5202ca8e74dab41f7dd1a4eccf844973610b44bba86a35c08212a5f76cd1bc9d57b1cbdee1c1638a7916d180ce3f7b041ea5369f4313674fbd65babfdf410e022cf8f28e79d648a28225eec370a8843ac645636836f838d5c50", "ac3ab19a9e787d54eb8b8f838a8546f1ceb42e7f9cfccca43892836668fc684229c92a7c19bc82cc79852a8192b252a0a13c5040039e4202d9fd1a42cc963901c72944b3f65a0606efd848dbfb4d1833f8d1085c200732ec768418c01990875f816736c01f9d7164d5cdb643de234b7ee6a7c74e1f686006d1fd11362ce8760b9b235090167a2eef6f4c97305aa9822c30d27ff03d289aae6453b09cc13d6235966ef05f7a255c93203de09a5edbf859084e5338a0bcbcebf14bef9de342dbae70a838632be82ffce1b95d0de33ce90c537dfb95b52a9b66a6f1f767672144e3a412c9ea72d849e6bc8f282e70d87fe11ba926a4e7c234c536ee0e7f6e1ed5b1804d29de91a3b3974c6ff55c054bf9715d2074cea499cb1e0b5f3694840aa351f94764af27d4571be26d1867c55d6d7e4e6f7cf9339ed922c44a7045cec8a8428afe12a9bcc43d52b96363112314f748233f3300d4095b424e5fc8bb79511bc698a907d45184bde863440a9ee43caab72cf1c10faab28117aafcd16caf5c2175194cb111ae4f966994a0a925123592c46daa384667a55803748cdb0270801ed1b3ca604b1df524b0051e8d13b7b462d7", "b433209cf35c3d0637aec385592a22f2b22783903edbf9a5fd08128831d0475084a921c7d60c7f9b689c367cbb03938081a11a80d30a121a269d688d7d1e2bc174117f2f4d151e6a50d1edf69bb700a67e8d0b6f23b824c50379127da67f794793117bdba6be7a16af3533137ef6309cda48fdaa64179357196796c7fcf1ac107847a7f09a7a1434135a35395b15910f05ce5f6810b4a5dcebcd3ce3619cc70abe9e1be08b57ecbae9703669b80848b65bb7bf789e38f5f69cb7437053822ac57eb939394a611d012ce35edaf48efd2025461aac5692c0a103b620733fee62e97235da96c5b55da87d98cf1e5a15c0784f914e30d137e9e9d3457058b1393de5669458e776a08854737e2c34fc3d03a02a6087d14461fa55a027c9d00309b167475db1317e9df5c114e439af20b7848758205317b322f0303819ddc4a7b65de91cba80460447e87d6bb3b44c7c3145ac57e47a15c6f31a9efd4acd13fa9bd5c918590e27b5cf12f03a45204351bde2d71f86e95624ada56161754825cef268829c1349a537147bbbb29f24524b66af52", "98c6c9615ccd60801299433b9f280713cc7a2ca843bfdd14ff920fa7d878a182f11fc6eec18d12fb31a446ee8ced0b19b89576b760e2b43e77e0842907b1f7b8164eed0dae2e430e478934847f41776d7acda5f458c7548593f3c005b8419bb8a6a14a5a1cf970535693b38d54770cb7ba621c990824cebe60623d09514bd0494fb91d1e2cdc1c108744c1b2eaa23a5a4fc1812dfb818371b037ab2b0fda28c3b58180a481b2ea5f5c82d1f121f0b8656b7d4e88dc8fbfdfea8c728b2728258ac5e5620234d443304a0fe795980ec73e10fc444511594892f6b28a5132fb8df58d2a150fbb3cb3469f261e408a8683ba4316b8db61dde4762628a9daa48b3875db3983c7169f7440dd7c459ae22559ab4f94086b599b78ec76f1bb264badec0da047806a0ce5dc4e178960a51bdef40d6db141d14fb32d73c960f0dab93f6780b9b01a8ae57ced35211fcb25041505c86998ed04db49e60e298931b70e4b32018ae5f931dff7098d8d682ac3320a85fb", "94dcabe45c72a11e5dcaf14376a0f09be688f81e46918e9b11c296152611d7a89d6e1ab1852efc0c6f8545e9ebed523283ce393a4b1f36c7c0368f7b89a7ea368caa0edde5eb32a413d05216f789b333a426a5aad1feccb19465a0d85184a98ba21142552feb822fd0e8d766410932e2f28029d184199f6cfd0b43d244cdc6cf8f89d5f6400a9415aa6aaf7400facca5131fb7a830d1903a9e86c559868ad47b59f16cde028f71b346aef4fc44ad2ccd40d9c2f420366f685a10735bcab604b69c539be9082e7d3d30712a0488cc69844d0a7e8ff0c2bc7b997b49dae53ccf8db7e19c0b8fc2dce7b2371c8ebea3d1bf403f3b771ccc3e8d49be0e17608ae924933fc2af2c4ffb3e4207bc1a2deb9c841d6d3c2152427e823bf723f831b0cd0951a9a5a7a9e952315b4e0f2654ac5ab560cf0f4f981e700cc1c56069cbc1138a51c87c4d569415c77efb6f38025cb2e5"],
        ["b8d1ae1b56e8eb00ceaa0ad84d919751d436caf75e5e031b40f5d5b073cbd7e90441e236365ad751909782bcff4c670199ea0ac725c0167685400e003ed963afb29ca10aebe3697723e021b80f2cdd85ffe42d43cb335febf7ad61a49da9558781d170bdf4a868be64e0909365bbdfb12fd820f85a8c8bef387b9a597acb78c178359e38f4ca14ebaa3a30c7801252e273eb31bc9d5fcd4a9ac3b9ef6a8b6296c78f81294bcb4b66063e17bcb06bb0a551fac617656969839c65fc6aa95f9a922a8fbf9eee63bada910900e483b4abb64c99076131ddfa69c237616b2c1eda0ec4a66db45756d818d8e3d8d6c604ec7718de6ff9e92f7b09559544cc66b02e896a1f3e3fb08f61663b358faef3f1f7a0414f948e46d59bfe9122ae55962d0ee1e1e9da1094c91cf3c4d9f03e552475486e1ad0845406991ef35f4852c0d301ee04d3129b6ec65e59873b1f785f19790d0ceafccb71bbbadad734294463c8be7c97251337e3ef7d44b21727c81290c13c6e030148a16ec0a6c235c3648a36f09bf9f552e6a5719f8ccadd046b8e40d73e129cd84d9ca6f52b44a9bf8500b6530beb2d919afb6a1d9fefadcfb8ff268f575b882cb990883068d7e7eebaa8ac68ce017ce4d9162450b85737cdc94a1876b93bcfafb6fed6f0bb674db7333092c56c6c59a6fea1c19264d12103922e21fa65", "b4ab1ff5171f5b663e84999e40ffe5078669fd98a781eef19eb827796fbd222cb76bd9012147cd128bf07154c6097f78ac7a0b3feb17182d5c05d691673ea705f02509c41f2a017517c113fc12be272183b2d960e382bc6f7eda4893ce19bbc18011baad077d8ba300921f83cd89e25e5cae249cb86163ae3e40de91dfaa83f898c4a326032a36c729c500859bd56c960639edade2b74c5cdff47badbc91405cafd21f26541b1d99c529efb3e3b5dbcd68784653a4cf95c9e623f74f5edf2ebcfdb061aaad4ea478ff3cf8a20ad0652b1d90850fc42e8a54626d86d966998dcaeea76b3838ea243a04de98050e74676b66b573af28142e0b8b70c4c421ce8660a1edfbe620af85821fc7ef15c377e9db5fec170a2f8167e9a5d6f8783d31d61ebdd25142a8ff7ab5e1fb5f9c2b4fc451699c483992c4401020c322cd91ed4c169bfebb85d9920b570389c2192d4b90f6430736aadcb6842d819b708e505402f141cbcd9d5d75562157424b3b1caa6f986c8fe5990cf0c5e736f1d65d4661a3775ab4133a8fdff8874edb575b033fb58500299a25e6f48ebb6f9b9804c487f8bd4ea77bd5dc90d299a7e3ab946064e9664748a5cdcdcc23d89a269c1dc2f8dc0e80249d5fff2af952dea87016255b05c0", "99a3e90ce494ec5fba03b7f468aff1265a8af7ae2f49520f08c7abf76711f68b29ec1094c5a09db2136bf944ec03827fa6d308e606b0facec7afbdd6a890ff12e656e6fd7018e7ee61e3144bc7e7a5246e588b1a10c37838bd50d7b434cae99cb3d664d9acd565c86fbea7c774c80d7133d68b7d2606be77bc43d8244873a5e37e2ab667c379b823104ebb52e75b85894454242e52c109316b015231f4d522d2534ab17a3e7c7899e5aa1a0d594d878a1bc5e16b854b23a10600ccff8cb4bc10b92a4aa99ad2674c82b1604901984b501794842dc961eeeaf3bff3b947a75c9bac1ee79b95cb6f53598b8fcfcfe32a5b45d2a1877589a5e7e6b693b0841cf3323a80a7456478e23bf63650b8c15e4a7942fe5ebc85f304446cc5268a493df5876d80de0cd50cbd21f899b3704a0e4ec539efb5d724f6feccec3b7f2612113d683f2b4724b4f650dac571b8de8383a45e4dd6ecec331ce5e2d7da9a608a2f9b83b33b622323255bd8e2275d8f7bb8063330a92b05509db01bfcf1c9bae16acf103af84bfd6977ae7b93a305d0de11df6a614d00d47790a6bb5ac37672be02eb53c61b09a8ca476a303fec7974a2dcdca1", "8e452f507d77139b8ad4c4aec9403b25a93756494e244c4b9be1c1e2533ce5fcefd3bf618ebbdba4f91613cf901fe1048fb1800bd8725326d41ebc949e205dedbfcfbb6463e0b9ca00d325f36526d356093fb9dd1b1b60a30c493fcf7c5dab52946d31ead133688430a1a796bf59155e79893ef9d71cefdb38c1c328128c07e2619c303c7249676eb49978a041c71588622c83ec4bce2b268bdd7b88d44e6d136f7fafc3675d9603329b1d55fb1397674218220152310260cbb37a3d5b4966a49fa2b3dae8cb05777c6bff675aa3bbb773bb25e59938a057af0acfd9d12b6d49389f93c6e05cabd3f9d5d7bc9f50ae8a0b09e5407efcfe5756d2c6ba04240829a768dac299b1bfcb4a7bb62c6f7beed4114a82a98198461d7c856c564a92552c221dab34c858810f3b738b5de5981ef61ac46b1df9ecd7adf0bd5cdf6b5112cbd1ed2c3caa97b837e05457861175a1eb22dfa266a4228e31906cff24691352a4ef2719d378b7a91a712d5fdc934fe1c83f5aff6ee304c339c6df3ec676c4cacf5710b9fcd99f71229d7d1ba04b453649", "8925be672934f9dc5e8f90673b912bea71daaefe3b6640cc89f27154b83c69bad4d0522e695ccf386637daf5958eccac95c16e4661fc05e25df76dfc9ca9a44891fbd6d29732151d9e1d024288e4ad63557f91399bcb249691ba2cfe7cc51db188d2155c9d6a3ce3f8e6f4c464f3e8381b0037df48fdb08e48a3d6b46239b41faf72ed391ce111152c9e8eab87a6e64318854ca66d12f4ec4fe121a18f8fbe031bc4516a0cdd4cfa52c64bc617cbbe4d71903bf2172753666eecb1cf530555e8eb72349e817f803db2a454b847f3f08e13864c542bc38dcb9c44078fa7ab10622ba207a643134ff93207c07653ca4c5527eb7132396ea60f909d23d8cdf1f01fc26bed9bc2fb4a4a13cd8cb498a616446f0f5f00dcdc7e3cae3e8fb8524c582f997867e0b555aad5cea49d19559020d052fcdf3a5c90805d8ce5a0146cfb863f9e2887658a3700fbcd4b39fd8aa7f6ac1710c49771f568544e9576bfbe27b2c38d8b7704935180e05a12f9286f74ff5f", "a742d82ad1bdb855d31942b6f3adb7b72c1e428d8668b5e64da0358f7abf93fa2c01788bcbfb700287fe33588afe3ed382cb78ff887cfb9f1b5140d3d955c7c5f4b21f0c3c4a096fd0305af0724e489c00876d21d7d1798baf590c8d871a17fa831103c21ffb64b3e2aa1a35be1207e6ba03e7a57923cb5b0e2d10e844a769147519cd460cb9257bcb245bbf82cf5e4d4305707beca6331683417bec8feffea62d807f02c7dace13e122f92032e185713aaad2691014e98a972f7289740903411880abfb31598a917d6dfdb0258234391193b0a90854a02d25898ae898aff81b6891f63a914f1bbf9fa0a461dabff7401f7abd04cadb5d7781bf211fc5de4322db3097b869a5070b6ab735455dd75c863003d78ec0803ab00efe7b3fd830d78a205cff09adba98332c5fcf651e2547266dadfc0c30d8dc03a6128012ddf88c14caca2ab9dabdfe02c9b11644090ce1ac"],
        ["82f10da0724f7b58d095484b015ad9a548a1181a291895318a5a9dc6da3f4770e20e018d4ac7f8b9f283115fd07b99c68a184f1a2960d3146af9587e362578e104431d0a3fccf4f92116db8723711c62597f36240badef6a73c7f5e1d2c2a35fb30c92bf56e4f251ff9ef8c1086b6addc5881121cfe1185430d2f6e21b8c16c661e5752da6ad72e4853b84b7e170273c022b91a9f2e9fa4a0213390dd7add60fb2dc5129862b376068327a7aee9225642fdd79c84814457c84f273acd1120ae1c1820cc3b174e60fda4cc2e9fdc7fe5d2210a6577e0fe70f96ff90e146bc4c75cfbe39014baa52ba386e76ade0b3971327467d6b1a8f9c5b9a3ea328c2e2e95820fcf13c2c22496716457f79260e313f683f0abd52d03df0258816ed91601fce1804a26f896be329116aa2d4df9753b26ea98244e28d01991e48b184cdc042151945209ccb510b3ea7ad1281054994fb0eabaa78d88380ecc8bb2d6aa402b804923ce2afb35b8f1806f78bff0008cf6538927ac6e19f318dc75d6390229bad6d27ba6f16db6e1c03f7e4fc2b9efab01f1ff60703b8d04875b5119ff1bbe000f78311e379efe67d965bc24443b53f36d2213400d0f2915bfcde348130e29b8b367e26178e8809ad959d5db3c2968ea1b80c0837dbc3ec0297469a3598863fd6c6c9bf604104a7caa12a46605f5f0cbb77", "988c18e88d7e921c9a084ca30178448f5531643045549c1d0a068b9b2e5a1b632428f49cc768e6024f71cc0b674f856281d380208aad5c7d4050bffedb7710622445304aad508ee962370b3c426130d4089c36c3124dbb66976e720cbf008be293436ce22ded5d47e2a8604d3722241647f88b833e56b7c23d9587ca5c3835d79ae2c6fc22f071eef08199663a373dac22b84681a36dc7f04066bb2af83c19eafd9eddc6741749c6c9f68880a51624e31ab66441ef59643d172bd014ab848b895e7e56072752b74a48ce078175a4d7454f879d106eae3427f2544fad8c9fcab202fc98f50f5555bae04204670578e4dd30ea0966eb178abad2197da51b73421826c38551f6bd5c6b639a5592035fba7e2872ad33d730316418ddb20fde54b67f2dd0c4081f5f5c1bc2dabf90334230d7425ffb5c696050a413454f2c85285a1d1a553ee5d417b50caa2335299c1d988846def343c133ad00c956f224fcb1a67149924865d440213d17041e5a48e326314d531cde0ddcfe4fd28c3321abc38ee2cbc123ad8f5c76b9a14bd4fc0b6bb9181db5a639df57a34d867ac0dcb9056688e40ccd040e9ae2a15be4b3b7448951e165de8660db3d105b0d3308c0a791121a1916a751d97f1c0ad8af54f44677a09c", "8f1970a79afeb44baca134f0f0704a8aac75be98eb2320efb93a048bf80ced54043755c8876af58a6de579155be7b235ab5c19ec3d63aa33656db405492eb9cb49c790ef57739b4a4fff5c28c2d34ce1f40b2843c3a2cc88c62ede2b1513777cb21a2c6ee31b3e732ad24df56cd5fa420b0072300eda19527dd99d095cee3d8a2d93003d749bf08b97f35c9570b06ca117f49f0c24af438f64aff24622a7585cf1273e1311fba9ebdbb79b48ce9133125901eba375407548cc966e1e6fc707f4ac0c7f89eaf8425e0b48a38d5c50151d0170bb65a77bc4d36f4404cbe30fab7be4ecfd11c6dcaea0f58bd76bc298e07b336b15e02d64ee74e0bd0a43b9df1c9a059a0e26e01db3bb3e76fdab45c4403c4ed3265d0cc9e6dad8561547df4c7199f65b6cd901e736a04c9c05c702776fef188a135eada832e35e05126a4ed11ffaa1241b8eb87a81a5b66dcf9808964fa045d2223e26f67d38facf47c46ad367cefad1c3f702db2c26fc3936b7a95612671c86bc04d0fd671dd3e91640c9f9f8435e4443ab815d308691e4582affd9790200bb2bb211b8d4ad6411f67b4274b74da14ba60d55d31975ad5b59e0c60b1d06", "8fa265fae8d1a2397473bb9186a771d707068cd1957f2c18bfc6d224fd3028852a975b3c2bf2d5b2117fdb703dc3b26d8ac58876e44e18dc3ee8ea7884c2d3a1258a7e38ab51795293b5c61e831384d53379b922f8a169ec67bc08e956109ca1a063aa22c47f55032b695886da9be2b534d72e099e82f838229b8ecd534fee934eb878bd454127108a68c5c568c7308c2faa4f78fdb00d5c174b81aedad885e1382a9e35c4662272b554a59f176061ac5fedf40d4d2f43d365cdee94e5943762d8e525dd72b8919402815d91732c310f3dc67ef15950a5763c907c47f82a9052a9d49a64c78fe96ccf3eeb36546790af1901691fe7a69b9ac8ad84df6f0017f17cf33226299a95117e56a411c4b9ab41403f82825fca3623d756da4d8efd315927addb93218e4c4539fb6e3220e0905f6a3c1ad40528dd851f3cee18649f04e0ffa39bfaa61a846357441f7510f2ee982e6f396d143cc36ed3a496c9a82a238d74e4373c4de1a9ede253781a30c5b13d3d8864c076b8167c9322d61a5c908275203e282eea0a39cd7e86bafdeaaecd37", "a336f1023ec07d4677b9e8d7dc308a4113021bd7c9bc13435e9f6a4cf2df7c482207daacc0effa131636524c4e6a407d806bcee16b9a58a8b4ff2fbfeb1dac7e8295cc1880ea14e2e682a1f341b063a5af31bfe37d22c2aeaa9c56020a752ece8c919c98ac07ba802587b9f08e781bb50d337965940fec04bc0b872a3587433b6687e7c4f69dbf243a9fc4becc806ef0010c03fd2958a8c7ef5d14a4611a1aee5687f275423c555813401db0c4aa268e28a97b2c8a039d8fe9b1cdc32700d21a035d1f5cc5a8400bf8fd41e0f62c282c4325c9cb2640bac23279f98f245c787a0be814798d51b3157b199e05f8cdb30825193e859617f25d829442b7921baf71016c119a54aac6061e15fe0f31cd64821aa762ea9b4e9082bacf431ab090c75b9092043e0b739a7c8ea8791b4016a00d0da3bf5c8d1ec48ac651be5b0dec9684e6aca19ec5bccc1bf3b2da44a87658a1325b49ae989e3424903fe19303512cf68135c97f9ba07ba2b7c8964846936626", "83205a756f3db3e03567ee3ac450b5832a27720a22481e6399c64267728985a6368e72cdf297e04d75dbb4a6172b5a4f96680c5ed08276508d3c49baef90df5974782a201cf81224d2057855661197700b52f40f4237f29212b8e9d982684714b3dc89e0362dabd693898ff7512ffc12485d626e81eca44595c8b3917ef2f522f64c66d23d21d4b6736393b50fb5573a1e022a92cdb0cc198f38c61504df97970f22a3025af1f89fdd2f24ee9f984e2802f75cc1ed2ae1ea11a620d23e430a67eb73e6cad2cd7855d5b212fbfe200fa04ba05f612a6267bf62aaba0f6089fd6a8f446405b9fdf04785802b02c4afbcc54de3d11b4f3c44b2d458f01539527aaff6670403c1a98ad446f0c77c2a79eee431b1f0bc4bb2b6cea0ff3adfdd3067c82cea7cca077849baa2f316e1279209a32b51bdc4136ea251a3e99e9c91d2596d41f3607a77b2dc128a199a783259d228"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
