use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages,
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["857ca585091441205741985d07c37f6b1de000a7eb21b1c0df2826c6f8e487f57b14b3eaba4244410f11c6bd26c080c786d44b15ee1ba3c86bb02443d95a7d0b6d490ab995244c1c5b6038b94923d791f8bec53e398adb291ad48a91baa1217ba013af21a32499aefa01d8751ee0a4d14f28237872f346ea7f937b8890703691710c7dfc01b0f2bf31ca7fe07fba135c60725d58c8d5e87e29bcfb8738b47cd7f7b52a4ba91874cb357f235bbce6722b51fb1c312ef5997db6ffc14b26b0595a96512e5337eb49d8c535ae27bd73640b72fb0227295d5e6bca2340c8f35bd4c3bef4f103e4605e88956b60bb996b99f030220b1bf129c41e5490fe68d725b7b4b9ab436eeadca14f0a8572eff537a284467bb4f4017e367caaead505d1c74ae69c491e830121ea0d806690a69975287051778cb152e3040dbbddd21d0947595ad80c9abbbe28ef04e96ce0dcc0f91411489f63cb8434f1e981fbce2e2429ed65af01b7b86f41b074c67c8b85ed45b33600c64cc268c2a8a9c5bf483a6efffb1a43c801eec2ae2c8238d988e1461575fb5ef84c965289b07c19e1fe75492f4deb26d91f8b9ea380b5948c821c0d8f4dff30e56618ca2c4b21eda64dcf887f4376cc4df011d7d2f57105854eeee2ebd13b00a49b864b70254064612375df46cc4f49b25b16ced86107978e3365d4f3ee02", "8e7c2b85d2dae61c2ea2ec58f47dbc38d93541fa3b85d4b0fcd878d397721d28889911471a856006ad7cb9b40d0dc38e88fb2334041a40aee1a423a9e9c31a24b5bb3eacc9236acec75e651b13736e9eed3865293311004f2167728fe0744290848cdf69b3843375a9f50a92fdd2887a6de46b88b1fc0db6cdb62e225aea76d55f4bbf6a1702e6d80342262c4b19cd8142154d89343a4af513aa5d69cada68404546a86f018b1c15c75e8d2b6286790a34a4b956c9a889bfae181c9a8dc5948017e2b03b47226102c03e63911a328d5c4d0df24513002de49fedcf51b3a6e4cfc0059d4ea6bd69abab0b96896507284c15dfd0674c70d8b49795b8e62f90a80b2f30440b3b1f25fa65e8e7b7afdd05b24378e134232f95b71d12eb1fb88b917415c2920196aff5cd85046ba3ccbadba572b9f1a3830e011a8384f29a1e79b9e6e0f6573814d7fb0e06fcc1685ee5dadb10d14723d04d0be07a9c67c854bb06e6d3e39462433ffbf8719d6e31dbdf86a25d7d662b5fd95f17e4575b2524ff7a3f4cf24651e5cc1dea2e40564748304aed006ce488d0f4ff0cd9bd7c85e296439445c7acdf591bbe622aa2a09ce65dd7e2309d7d5fa58471064eed5bf7e8770533719354857a3eb574b83611940d1823c8", "82e4dcb4f8086061bdef2edd1055e51c4cdb10a04cb2e00e94f44ed49623fa3808de09fb0d0f858b3c6833e82dfd506798501a8ad6d4b6830f934ddc9c617287e17a0991565037a64c355b0451f5b195c309b8935f3ecce24204f194c8def8dea08e85387159600ae081ca55c664acd9114137b9ae55ab5411c3129bf1bf9ea74812a11fb21cdc894d059b0a66a01fda57e1b5efeb656bae166d63d2a03680cf779dcea9fca4dc617d5fd22bf77c6aa05d12c9f66499c0a4a7e832f0e8bcf20b76bc885457f2388ed3da4cfaf994961c15c2bfb203849d0281434a3ad20eed88c43cfe9011761a07a3270cfb6f47975a121f35bcc140e28e4717bf23e67002582141f79731f3893918501fc285a0baf73bbf7c7c4d10e858428ef4bb40841712ebda380012c68074884bfca609c37c841080614dd1c258564c3cec5e29a8cd83c9efdd1d363d209f53e733a6dc8b87e732c6e5ad4c3567cbd5554d8de76b0cce26801f318006891da400e071af900cbf01358691661645fa38e1d0fda9d58d5b06425fdecb7f724cf2348bdbdd8e73172d771c47b26c6254e32a3adbdd7d5a934647ef5a39ef6b141471fb3606a1cb44", "9163960868845382bfd954d104a48bc39a9c7fcf6ea0b76ce45f4a8840c6c3c877d65929e3fa4d4e11debd39a64ff1a1a4085ed94d52c9f4ca8d8c7ebe2dc311d042d4e7423dfe9a998fd9d79beddf2fcd17689700cfd9f505dfb342f9224f5c86e72e22482bf34e89616ec5b3c1094efbcbb921976d00f5ec6c4e03e6574df6594fc326be8b6b9abbeff6efd22b1b08331eb65aa9ab1a85e08a3512567202eae2349c18c96cf01c50e56051a33bddf82c037a3d5e52fee504a6c390caef7aa0f58e0ca38a121cf0a5ba3c28d642776b14ee4b4cc6d3ad81031dc23d475ac1c5f7f6c9cb6e11764609641157b81ee4aa05b7ce6358b5b2b2fe4fcbfeb281bb1ffec226a7c5d3a37587c554e5d4f0cc0c2b9bf4ee56c778fd648ed8a28213bb0231917c20c95786c656a8e89b4a9bb2f85363a0b770a0d926ed7408943b972c3bc9f2b01760f28aed4c476a93e54e04bd1d7d71fb244a13914279c9cf1780126964a40163059fd8d6dd80423333ee4bd658f19e4ccf16c7e54a612794ac768385422b012edf1a4bdac1495282bc106386", "ab5a286615ada9c33ec37119e13dcd0d5b3002f4a433ad4a5662e6213e2f908691e13839e289ef1cd63a80eda249447a8ebdbf5375ca2db3805fcf89a53056861bffdfbbc1c99d34702dd8429ccfb8801224529d501fd31866be2755986f9528847169c684e2321e51a37ac268149e218b5d534f3249a940cb23f70ed125a698a8be8db34f92cfbff31f41093407814b29d401f97e1e7901f019424f4fb36ae2e360a3481e30b139340f0cafa186c6a54ea7e044bb068e963100926eb5d654a5b2402974f77ccd2fb87f8a2dee22deef454ff30d15a15d57bfa79441477bc86288cb1eab5ab9837b9897f6c16fe7470b0e5349d08017693c4e6e44f7061eaff3a874d5798dab64e532d71ae5d168c4a117318d5fe6954c4f6333a73b0eb8c251c961bb0671b3ae6bf654d247fb9bbb0b09ac8ea2f954ff585d3b2788ad9a4e6ea11a1964f20b7769aad31468d2408b4b0ba1b294851de53d1cdd38ac3b8e5b72d7f87b943b056907e8c2a13b0169fbe0", "b72d69e69f4c7d067e20271e4a9285a2ef55ef328e701bd0b68d09bd45b1d27c2f34675cbe6bd6e540824e5600f4e708898f0dfb964e08fb5b25c6f7db3090a7b7cc79ad1420768bfcdd7d6ff7a82776d0711d606eec32c8fedbea55f8e5fb8995ee70b2eafcbfada407ca69d5c4e8c3c799f3fcda34aca554927cdf46b548f87c174fc5c6b157feb231649e6b7a5ace663fd3719840818f346fa7655e07d6ceeff2b6cd3fa64f6e9ed6c33e75c5062015a72137531a5a607f9b497542ff271b472cd627456552495a268f60ee1994ce185430d25b6866c32b9cb1e0204789a081d605a61d907d9a759bc43d113c24236fbe304c85b8e6c59856236d3e674337c63baf1ff36d00f2b254a8c0c532e10068bdbe9394d51a08280c2197e7d3dc1b60f9d31c99205b2a5978089aa706cb676a2c70339dc3056a1281e116af944578ae68c232b8e09029e26e3c028f85a9c2"],
        ["aaddca736e9d7900fc346e08a886a784a92835435c1a633d84d195e9861ce7382afc485d1761108e963036af7e8152d1a48ad900f55997ba7afdfb8c5ee1ed0adaef619dc2dbf68042e0297e62251592f0816a9a93c190a7ce0aa2645f24f8018615115b32212438e64e10ebda2b3d2c51622e33dc03c68a7fe257df0342201b07317131b1821feb774f818caef75fec5a6c5f36c29c1f7c23b424bf3bed369d9971e5fe0e70c07a436d118fe0b480c960d440d1b359c0e717a896b784ea1c6a2b64063b8e49197b0f7756a31ff340c35356c8e2dce92f7eaccce04df90e739354e2777593200abb23142c1436948d83519d9701d4123afa8679aaa939870bfe51c882e2578d5a2f2ed11df4cbfdf431558d711c6c3703857cdd5b6c0fcb7576b983dfb9286cd16d2bcab64a0b79d6883afbf17a309ed5eccde83d50f228007141f3956fe7b753fdfe415646c5bf21856b2311406ecffcac769721be74ebd25bd79bd15c808c88d4837eac221ba8eff54033485bddc505829e4b289423b111e2792d2517b9cb59c744c2d1349041cbe25638c065baf41f7e304d0067bd4fa0a9516db5e5d2ab3731e96140650294d7d31b663d57d38284877d86b7799ad06b40611f545459d6f5f38ef467f6f2750c235e21d50470459763335fc8c691f26cde0a2700c7f790fbb0fd3f3bda5adaceee", "a9df826378c22eab849236b6584470a85c5cfbf1ea1370b05dc32f2a1f2702c9e9818c433d78a6d6d7ca31f73661ef3496667c2f34d7e3dd550b3491d573dcebf1ae429cbb1a25da274b08b2cdf50be32c888a46a370ae190bf55ca3019fb6e282e5c3588965d19073596f4e07ddf8c3cf017a6e3f37bbf8f449c7a3ea26eb8ab2be0cc0beec64eaf0aa3e77e87a057f65333965598c4c22532e9ecd7b5dd695f3f8fdbdbbe9742480cf268c1c0495545c2ce3824c221c68a11d8489d96f95530db00b63185d8e8f2afc3184d7f17a7f59a525e1cf1aa76dd3ef0ddc4a6fd0653ec12c22a5fa2e05c3e79fddcd4ee06d4485083d3ad26f71bc71d90412f81d0be2b0f413d13976e2f698d2506dc336a2467b836fefefb8574c6c54aee036e4f7034a8f6f89b4c68ae107f52029827d3e5349713ab370ab52c5bdb39823c8d828d744556ecd900530f6677b7d089727ac1e7aa3dca251bf38bb7fa1044c0c929c488801ef5074d01f45af49e3977c118b17af38e351f3195a0e840c0210a8d49da70d504692e925257fd208f2723fa35e03c997bb0e1db9a2cce8da4f2e71148f5851dc8718e8839e95432815285127f30198866f8feed6a316d682ce6293ad49f0b66e9999babad3aebe40e65b843edc", "92b3f8b937d295c5c79eacc04a57235bb50f1607c6012f1b729503df0a710a8d58bd20c76fb138997b207a400fe7e7e997932a6066d5e13a103aef69f9c315eb094a78a75e74c7e2eb622583866a056915118d5f123fdfcc41cfdcaa781b3572b899bea1380b63c923151eeebd1b126bbbcd6b7fa6c3804246e466d954df2676cf262f6ab5f83943d050607e9a83c88a62411b58523327a48e36531dfa2eed39afd49c1a7fb6be757b78e16ccd91d5a006fa5e6a997c9b3e686328b52fd7d9439a5903b5a177b6dc4796c39c9a8874aa4302b94c19b5ce81774f60fe8fc9e2733f117bb3405351a42fde569165597392481f2096a4218c4e397ca8d0a9a751cde5e8d936d80f9fad42c0cbeb373898cb593575b5a15636f3c4b66a9fe1f4101e6c90ed37c58d7301f1334f993389213b10f7fe0e526891c8a0972af29649aaf87ece531d4375a938e4ff143fdeb0fee958f2e0164252d7a73a9a9d96af96924e5c1fa918a7df426ee6ffecf05410642400aa88fcf90ded4b1eb337419cebfb2f05f530253a0d60cae4d1b8f9239f0c9f07a0756c0c95a9247020aaad1c6d8180eed269fbd847aa045b8ed3ecbd4fad6d", "ab8ff1ebc293f04a2d9012cc2fca6063ac00e333f6f92c8f65925eecdf4a3b732e7778dde061470f0f351fa833093699a3d40e4a4012eb327ba263342f2be691957fdf1089487d0d943853f8eee67cba6c3f0baee3999706784dbcd465c3b5bbb9832f7f09d18e9f6ae2b1a7ffda647dd88669b22d82efde9cb86945db377e3be6a66db265de5937f2563ee777f2ebff5db25c2e7569444a633a1ca85a2320d6abf9e244e107128b2a18fc553eed56640fde3e4ed060820c5ed858b56e3c972132d3ca3b12ddf348fa7412d0424798fd0cf4a69db7ca37425139b1dcea2149c764de6438028c397f5dee8a771c2d91d114842f9c08bfc10abcc3cb16c70caabc099c8f567ab1734a18806e66128dd5d20820d1cbad88b170d3aa1397d2af231fee202523f32e522412ed76e04fe0d50931f9550211530de93f2c862dc6396dfd7063852687de306bf37fc9b1b0be6e486b692eeae91d1e9d7cef52543952be37b37bed96094516047d465016b8095d4508f396c26c8899b4daf477e11809a96638052bc3ce8cdb07d28507b55e876453", "93bcc76b393a181bda229268b88222a9a8e5e15235c08fc813dda8b8b1afbafaa9b06414bb05d6f4ce94fc010df190918b2d97cd22ac167ef7cb48780b8fe595b9f8c9b45b0f0ec6a2cb40a32ac5b32028b5fb84fcaad8c01d89583a05066f5cacdee47999743bbe8c297f351f8bf8212e10d25429b0d9f23146cad972d78389b914ec18a77dc671ebabed00692356110894a4df904c7ca348c6077a02dd15b82e51fb90651505df7a14443b050f7b0e32be4ea71ea22b69be55342b4041f0fd43587b87b86b63d3ee7024a3c9ab71ac5158053661a45ced58bb6e88f8af4db2782a65803c41a096f2e436886c93d8c27146c87816f994e8ad582a8707b1a847b8b6ca80e63b71e50433519981b1250d2b8a9cef211cb523466ca316aba6e05a1be3358b5aca0a229fed42163f199e320ba7d9ac9ec95daf2a4f578dce67c26dbcf43c23d7b18b625a3ebea678ee4d732a4ab07c57dc659ffa9a473a2dfc74ce0cccc6640a36927b48c3f2724f1bdbe0", "8b500a2a93c7a9ddc940bbf6fbe5b3c4a4c7682f09f158c31038b61e8e87c8406674fe82a30af724b50e39cd5624bd49afddb605e67ad2cb25f3a7170bb6773cb92aa2be14391df11a4922302ef8bd750f14dbd9550f7e48dc0942f3d7477b76b36f382502650acd73df31f88284ddd84a7d9d629170f417021f46484b58bab051ac33c5c85cdfe8ff5d3a54f068c19503ab557a6ec035327bf29944519707ad14a7233ff8e6bad47ea89c216f69df341dfc993e425544233204aeeb5a90db8e58b60d8911e5f645eebe24734554bf1e350a53d2f60608960121ef65c634416c77e08c4ef33377b7768586fa55c7495b0573ccb65692fc0db18f0b2dd3493f80c7330450a5e47e811125f6d9785f0152460ece2ca2b85585ed4621ec47342b17ffcc47026d6efd68b8f537f11999ee811dd7967365d39606832ec9b1e619fd70fdefb2387512cb61d865797d8876ea55"],
        ["963d934bf4a50ff3ec9036e4c8c4dcbeb1878d38e7fef45a06be99908af57477287f2664c56a08f62406b7bff982bf2aa516dbfe4fa076b8b82c467c3bcac741d5fbf941cc8ad1e9aa37eed36ef035e2de7ba120e8adf8d18affc88fd97b0825a69e13d75ee7eeee6ce23ea7d454fc19e65c9e3fa162024550d4d8e65027e7adfd0453828e774ca65c97324e4b04830259a69c5ba569e3dd0add5a0aed82004e1ed0fd9712bac4213f4edda25158bc276b4f80b0006645549ce4969c67667d2ae629578cc6a444d1b55123d6483391c14b44f7e1ee4c0a771ab14f6b1ef021a5bcf23c42c9b5b6e783d0acc168c0aceb1080f6e06630528675e1fd2b8607391308e539b6afab96df4598abe98944f82261039785aef618b2ddd27c1a2e7f572dff1744f3633e943bc3879125d36eef4604ecc853bcd09235944d5d2e25d0b367b0e4fb673791f4ce57d8cdec197353d1076bf28fe05dcfbbc9c1433d0fd151f3c1823144563f1fd47f3c11a61799736546595563b859285b1c4a6345b61c72bb52cd42815b6db2f636c4d25831f0939416b4decfd798cfc7a80c9c368f324e2294b1dbfe9025409a17f12f8330be9aab3cee10f6e09aa0967f7e18b27601b27bde46d5ceac6e73579a437c84c9fe7e46380def7205ff90a7aefddd785fc07c19f6f51681f42c7d205c8e308f9842ff27", "b0660be8546034f0025ef2f5563536aa5cf2d5b7f7c198056ddd953e92509830c2f2e5b0d4cc460712555ca715e0151c8e3b93e3c2b13bf47f0d93ad0b2ec18106f27eb62ef96b18b9ca5038664839a152c5fdf5af8c6fb9594aa02d31b48584827c4486e47907f65e890d30fc77a11f8723dd939e9b97eea53d27a19013f1bb63fdf9fb24dcbceb12f89bcdcaf4a0e727bd9ce812eac526855f9883ee05d9a31d871daf0d8a72c8f5012d2800b3bb8e1cb6f8f2e4e096a3004be58077914129b8db3c72b2837354603323a77361a7a32aa444f83fa39c12b0c620c0c8b7a3690bed3960cdf69dab1c6e7fc37613b23857d7c2688bdece11dbb58c55695faea9af73b1181773e882eb49823c5068953a074eb717fb5b64192f375fb4883e5511db4e67918fdd52070c55befa45f5cd615171d0d4edce319fcf618379004b1a1dbbc88db73faab2107eb003c21f2113ac6f5102507edbd943681c1b32c3cb8a97719e8749a884e70f01f8cf3b511976ee13124680cc591cc404fd68b06bdbba6074049a0f6798e9876dd0b7eb04e0b8862e3228e5b9a3ba42601be501964258af57aee3f85e4a9cf98b3955e868429baf0315e021decbbb58cc1314994c8348d3c614153ce1f0f37592521b1f7f3c9a53", "a24fe9e73cd07f9f7c835f93e654cac0b12aa9e883f2fc60984374223ba924448c1f3846d0a006896b859b2181adaa998e4dd54f4602d1b73a03e37bb8793470addcb63d6801b80809fe978a8116cefedaf38b5dd107a2111f484080e6ce5ae2940f4cd7e5a660f1f33e9e2c4b10b8924938339ac91ed67fd15a7d93e7359ff5838f62527b52ca144200a457c2e7be34097d359e24df58756bc8eb3822729ddb07c1e76f53f60fa779817ea0ca1a5f870d5c09bbd77eb7b93f960929e6eac880a5d4b543bf579bbe826c3f67f30c1a4117e60d65f45d2c547d07d893378601083abc0ee08620ac753e77843b49a1d27f0c183751c91c05071f11009fd4e708d0d4cb643b6b0c572845ebd4ce6be5a23c4302af21ac78a4677bc35e1ad824c4eeb0edfb4aca8ed04667b2f0fb55c1f23306f6bba388a258097209aa7d58c76a0f95c08c7cc0d248c88cfce61036f4c4f4578d7bc7a69ed6cb0b5fc43fd1ee97380e6706cc8ca589856ee989bcc88f6f2d4a089f41a1bd9d0512f3304e5d1611019aa92823e1ff5306516eee989bca607817a637e6ae3061478b0797d1f550042130d9fb8f23afb7b46d1f1542b200eb35", "aeaf10f0c5a4aad5b5f0068cd51b2d6d5b862b3adc8d7bd013725fa5d9e713732b599b15ee1194c1f85708bef559b49685e4297a34ea4e401242a06cdd008a9ce83979ed54121a928d2074c4a45c9e0313c1d2e047ee17e71fc0ce98ad218feaa476071c021359bafb6515cb116cf29ee50d70811fc0661d8986c8b078feb297e43e4d92b2da4c9609be1ceebc3e218128df2169458803d64186291c860012cf7d093021aad367dad87d642d178ea14606fc77afcd64cb211815383c6cacf7c4e79b1fe652d1c8f1515b5c12d0517c186d89d6da0d4129f5d71a80b5087c853ba9f42ac7e7ddd3d2390b9861de9a362c003bec188504adb93c3a892333c9c094459fa1cfd70e0f46ee10485f939c1c902b15b1493bb8cb38b5b8ecaa21e74cfa3e0fffbe3307ab37a5a311e2e184cfa17209f6c45bcd45b86379d65191fea971c6a74173684967d4c9233d5075a5f63116d4e834a1560ec86d018f1efb312edf9fab2cf8a630884543c7257fc769ca180bc10d07a547b6b4a13975c75fc94129a7bdb565ffc9518820ea81c7fa012435", "8b8ec57253ca1b4677f571714684c28d4869f1c82d1e378b0fb39eb3c3e15469e3209eb238c747aaacaf641418aeff53aa5f48f47691cb35cbf785165c510195db4978f34cfaeea8526111d1e16dfdc90ac0d759d97e754a987e93c05118f6c28628ab298a3ce98bb1f6d8522f0f8b0a5db79bf9d0fbae2adc1394cb8fb150a074bb740735d4fdf7f08cfac0d08ca5f0336957ade7479854c2c9da796466178b4487a5686d83d03f68d5e74539c965275b30d25cca97382f518daa7343c822696e6c760f4b68b52f7bff524af8f9a214358cd637f6a51882e015ba1083d01e0c66d9d2ba52fbdd876037f9434fca3ca252bfac2c1ae2595c61d43688176634414ac796fef154af810fdbd71e08f2dae25124ae548f0de486a1cc24d2d50a002386fe349f3168fe8c7ccbe935cd65c82a0de87efc4713cff3e0fca953b30445cad3e23961883dad0bc30252b60cb4e1396b15e1dff3f05bae7dad4660c9d98966f26067227fb91860088590ae07d54923", "8962e17886e3cf1178881f22e54f423c667227e624d9192dd5028c19db65c99efc6d96ce467b2433aaf04bdb9884dc65a348381a9d9bb49fc7cb87e2ae0fa6f8bad67f74dd4090d4dce357a45ce59f052c402ea79c57eea0461b5ed9e447a54189d521b00003434f67f3b65b26f63197e4e19603ecb2f88b218c3d9c1f90c6d63a7af51cc9513a6083520865e6456c69443d081693d6283055376f9e6aa326d699a19f29ff92d767547abb1bbef7d3ba1918d693285850e6b2460d05566ad3a1a0987aa91d3314064afd696be405bb53338c4eaa5d462d5663910b298b11820779997b58995918d480efc5245a01b79a52a16bd7ed48647262982df23d73cfb7f50f539f0eaf7f03f275c7c1489a1f5e4e864a90fa239e3d95360a368705a457bf54930244c50fcf7d39ba9851d9abb9438912e431b6cde09568e2fc4abbc4afcadaedb212e32965217cf7bbbd2352fb"],
        ["9268f248150eb0efd19a5aecccecfd5c1bd25aa35b04425bd58ff7b1fd4585cd8e7343e5dbe97667f0ba84796ed94bf18bce40f26e9b7120e2dab3cafb5e43aac8ac5dd0b9fc4019ac5ec4db937b5ee36e816589fbd66f3829baa2700ad6230995e539fd6f699c83e0ad6f34c92c45e050c41ed1252bea786854328e418d84aecd401659628bf50eb4b4b0b5e93fabdd6f799d9e431a86bfbff6923e46edc7f32f7ae15f11ac67f9178c8f6f0acf98c31c5266b9b3439de6926f351eed0996cfac3828e45ec5082afbf138776dddf52c21516f3209cc475d6af8fc7c02ea39244cebc0bc24d3c8a34b2313c106abfc2838f1061a7483fb437ef35897526ed3319444a0df840c90cf4c77a125a5960d6635f6577b14f68bfec50c161e4e6ce8f196ee6a436b63326eff1e275d0f2420e4436f5f9fc2bbfd6452f40e8c09ca3c81abdd26b6b9cc236009ada8313cff10de15cba81f96ed7d529a476f8b93738fcc2c9f5e3cd4d3383b4c528ac02bb59dcd73235348dc14e6511ae3233f3296c13e643e6d96e5c425caa2e69a8fef8cea830d89721b08cb73c6f96e5f588fddcd45925ca0a25857c0f1338ba9e3837170fb726790ade41eb2a490b5964daba6ca007650b50c60c16460d8dd80a943c538774d0f2bb23b8003d9b8832b598a7336af0ee8c6665a9e62ac1b5154d2a39c4cfe", "9419b2f21fb900ee57ca24e7db1af88c414d535fe10755126295c157d15cf3917e6e5cf5ce0890ae785ace3139273ad998865ff4e70c1e8491adf9ac460e7c529d9c68cf2226bb53efbdd99d6d9c0a33dec99d0439ed9bace6b4d74d545f623999063a977daba4aef05053c4f259331f48455e1c3e056c05bcfa18785d69103f6d942916ca89313c343fc78e3dd811055b5105e8c48e7c1d3e353e342e4254407201506cdd7076408b5e74cdde5313af401ff794758aa96b5de448e6e2119d019b2c1164c8fc8f79fa8f33d96002e0cd51ca1720b50e909db2ea5b61bded317d95dd63621fd36511a7f082a8d8a248e948b5ec73cb10637e29dad86a94dc809608f11ac21ec5297c0bd75f3fc79aa16d4b3d20fc49213a29c332ba2ffa81ae644aed6534b86cfdc88d0ff9b88af4d20b1e5465933f529163356e4343d0995b8d7002d2ba4d4d91230d350a85bd21bdbb6664c628d3c83d60cfe55000f1c902e2e8ae0132f2b15674440956e1e3526206091fdc5259dc17f32d38c68dd4cac05582bf2632662826af5176e57b9ade3a4b2f57ff06e199c4dec044e7fe540c976b53c9aa66044a1ee53e9532f2f43ec76d3590e9a35bb9ba3d42295cd429424a6d645332490bb8d34048afb3921e39c433", "91adca77fe83e02a3d83e280481c4f8a613b169c5e074aa486160c8b486bf1c0e5d3e6e0fc7dbcc18400d0be75fd142292985a404f7deaf37b3162a457dd1688e3e94c451a28da14cbeba1f89ca0c01534739c859498e78d8fc0bd200a7ce5fc95be5d27855ea2cf151acc1ffd3d65518de9a92115e19709e3906332cacce7df620ba319ec259a740bd407b9167647ae270752e2015abadb7419fb35ff3008272959e9e159cc8058ed0a9e535eacc1fb57bcdfd953d7cf43bc2d947f16c75e6c7df2a8068fab5f4876997eb48817fedc5f46669ef96642ab993ffa0da44bba1d23d5fb6b0c89b1ea32430bcaf319f6237010a1ad538cc5622d8e8c96788772dc91076d11492c030771d6a4242be3c2c4536e39a9a0339a347e48734754688da4fc59f35155754f80db11cf4ccd57903626d53558645d4b7fed3623f78ab14ff79e6d4184a15a29fc9c408dba77ec4c240ae7edb340f69a9888c5c2f34a9cddb02a057a9751d3ff2adcf16712b0de04236821897cd736f0618ba82d111fc9bf5edfd431671de4cefd94f6d75beb96631437a7c9c1d33732876d068bce468ad17547591813c5f1b0c0c61da6ad4f86b540", "907f7fd5ea504d9e60581e7e61db0058237e23efc7f0b380c5dc30f3b823bd09692b89e72c78c64a1a729f54403443cb8106d0f330fff22262061e342e3f4c3230753aed2716a97e6d8a158c32bb85bcfba8a237123169bbe6d86f73404ac49c91a6b35377feae7a6c00f78d0724d9f470dce05c33047d2c7bff8618f0f257de1ed6403d748498c81eaab4cd8a3b76fb41a552848596680c7569242c2d2e5ed3e8cf8b06769bc2f775bff6d0eadb62ff64559b01971f3be3a4e463c6b2a4b5d61d8d11e9105b64f7ab78026ac035cda84b2821c05c6e85e8d29708127903bab688261040f7a234d2720c2c82e4d76aae44801c26ce0b05022599f42b9ca17ede1339d5a945f43bdae8fc39173026fd55073d6416be6c3fe183d86d03bf73cf33290b8db4a295cd4a722cfe46cc1f193d44a6109bcbaef5d39ee31af82f59a0b411109b5a9e50b969842d20383456ff3a70292c8f21f2e6abf7b25cb5916d215658c3f2b60d89a316a8bd7e73cd14cbba1058daeb3a6efdef559b40b0f933461ce5273b0309b2e759bc043d72d8fc7685", "b4d27ef2e32e6324a6edfe009f4b7d42fca73cec93338008b883df4489211ca1afd828aea88b786b764763ffef2348d1963089d1c32ae03c6a4510de509313f9793fa89f00981f2e55862b5ab8c944313b3c827e17ad3db2ce26cb5dcbfd491eaa9ed96cde96e736cef4f575f30c96bec2046ceedddc1853fd37507ef564c81dd5aea2c9df15b001fdaf9c83f9cdc5000a01d21d7335fc8aaf635dcd0bd2ed33ac9b4ead00046361048a6be878b32a0515ba1f3816f0a161a6bd3d01220a9736b2fd9bbd6ccefd172db8ce23b8639c50125b143497a621334e883a36b26d32c484b77f51781dd149fdba33c2d5b9f86372b6e587d79291a472b7c29a02a174d997427851aaf53eaed9618a397e74b56e265c3459c006f7f478fed642dfd6cb386fa60c0dea67921818ff72b4c13a860a02bbf052c4f8485b71afbeaab007bbb71d0910f0b5b69949cc87fc1641080b04168b2fa682d9b347cb1cdc0abc2b83dc98bbe1a2be3e35aece14f48a4f24780b", "ade4d92d3f898509c09b134a757d51bff0208a44a84f0bbf544ef47b3a5f8d9d9bb130cc1776f888bb74e884053ad42daf316d20e61d0ba0c596bb1e1f7caaedf3e5e767c3f94cc0d13e669b1b539a83cc61dcbefc338048ea9d31ed3af2d3a08abd76d1d41969038f8be8d7b7040d0936531cf881532a5b443ff51dd36317ba69db62b210c8ee9783e242e4c645915c62d6b27f9f27d572acdcdd081117fa61462285c08df8c0f2ed5c9f24b049b00d2909cf0a54d526c016cdb1aa7d62b704e82c25b735a0605dd8cc58af0d12ae540ab9961cc17faed92de01e34f2931e6df96742a6a7cc1de3c725611953a7bc8f2ffe70c4a0e7645a9785d0bedd42ffbea7e8bbf316f15e94853e4b951c557fd8242a1d77a985611a0730c213cbf86ecc692cecde058e1ff6a21f6b85a823ef490dd5de42e2ae03247ab11bd97e3cf48c016913680bfdf457a9c249c31ede4e8f"],
        ["8c9a9ef4c7b658d3333b45a3f0308c7696e4c2697ac3547a26d291da970d404bb87524af12606ced5507858ef2316aae8842e325e76e8b3d9fff743318d64dc8349f293f58ccc6e817a9377c88c4a75e932e5d085c2efb258ff3665470b52c7083e55d730ffb979445d173fffac2b52ff50290216480a3bf5f79e7916dffc46629ba3df44f67990164ebbb22f8515bb12fc662a34abaa23f33341b8002336aa3fa4fbb4723c9e7939886b7ab31fccead5ea180e86f404a3ae746f7458053bfeb7ee1a7dbdbda53b5bae87479c03b73c64a6aae3d8163db1e81a6b5fcb5677ca3f02795e6df15d06a35474190ac1708625b1ed2c8326faaa13b5a6f89da13baa691033ee7912b038ef54c8f9ce1f58fb23b57d4f88d024431ce71ab66cdba5224f5b01ea2a7d67b96b258f96b848a5db734c3d05a4c3bc7ee0d8a3ed3ae2ca9a1547f5616b3ccd0df1e03c29f18087a9b0520f7859903d243aeabc730abd3d9826328221435b040dce66be1e1cea1e5855bfa235e049ffb8534a9323866a40c060d4cae0d489973c19eb277846d890aa52097c3bd640ac79ad9973abfc4c6de8fdc1764d9e7cb058f24ce5736e7b6bda21749120ed139a03c388cc5834ed42d74c8dba90f3257f858c6cf5060ab6a4ba236abe9915a6acb4b518e532be2cc3cbecc942922145c493acc1cc19ad76ec3ce", "b39c76cc2a148eace1ed1e2d1a44a54d83eeb6a09d654bbe3665511aacb4ad032affdbd1bd26460565baf05fe4f936fd97e8ff496b0c79c5cb6d0bf04e16a27a8812da959628643d080dc99b991a3e365d23263251d7375095b454475b12eb648c8ea388c50fd0c9c7f5868eba3a53dec71b405fe4803acc6035d477359cc462bee90070eba8d93f4913d6bc4d5bd6b4726c82810da283f126feb53764be131b0f665db2fa3f761db2a088ce2369d9a95032cef34c0e64334df412b8aceca70e35074029599b6b56573c8e5be02277c5581e480f42bf78bbfca84fe7d935af1b97c6a5a716e1a3753b026cbd51a42de95c42d7f1db3f1698ee68fe7a3ce5a65a69e24a894bcaa350278a2ead6496a23666c0258b057a7f8c391c6ffc117648c18808cee03b1bb111a9e5aaa31e84737e57895f7a2c531d47b9a364fad527d14a9a9e83e4a3a71cd1495a7bdb9565488d62b39a431d1376389247aab197bb5ca13d65646a30c134b2b1f975994f6794490f19cf1d56f81712c19e1288307ffb085509aed6654e10380f3f11b23912c4e8605b6f5a65d451c37504204dbc20fe290da1cd7ab7ccdd17c355b160c4731a9c08f4505de5b69d27e0df28c2e42cb206d07ac90cc2fa43c6601ab38ec21a5098", "b5f82acdfbcfc701cd39a090215c968b5bf39a805bac38d3c288c14beba9f68a7b94e2db41367048f178ab8013bf5777b8b46eee72c94f29deb5fb6b08997ce9180023329fab9eedd8c28d50dffd9f7ee206ec868ed3b136c6cc0a63c16ae95bb7055dd0522105c32cd5b96e6ecf9fab7dbd38e86862727ddc791d12e057f4526aaf9f8ffd579d136077e1cb0dda6c496cb487fb2bd9d07511191aebc21e15b0838baf536534121df5f1d1604e8e2b84611353ea6fa5ea49d67936815eac59a0b1627109a2696fc8b7ce587c0ba31ab834c2721d63d287d3ac44e6ae003645cc2b225c84c1e04012fddbe4e26bd8e5f33c892e08b18b83be563ae286b205f3b05b201c0a0d02ab67eb9773b25dcc43ab30574836f635bce6662100918888dac6ccf305e6edfcfe126bd2da93ff828c5f611244d45c360171c4dba4136ae1f23ce65bcedb29d24497f4ca5dd00ed8f8446d3b6067d5d7b4d5c5d0ab2c9174e677ee96c9afcb0acef5afdc8208e46a4c7c03d18d2900a0402f91885dcea8e6a4d01ae7a407533a714b67d302c2828c6ef92df91c15213098c338be3ab97f4c67e0eef5b5e2c4fe9e1254c003cf98fc6f03", "ad24becef9b3b7b92e4551034a9f9940700f98ae4c59a68e70dd72dddb96cda2f3c1632c9f15eb9a8d55ea348e267a7b96e0af17766689d7cf4dd0463bfe8707358da1f4e131e2e7c795c23e3b28a42d2f19da5278814be82ba2ae880bdeab9aae9be23be35dd73f51e20f6465c68f585b1ce3960b73d14a3d794d3e600cc0ea8dfa6aa53ff61e443b29a53597d51b1323eb894db6ae28295902d95db27536545ea7072193166e3ec5a48a15cfd5cd97293f90fbd9877934cce2f6684367ec08fd9796ca1982aac5bfb3a083e21d2ee4497f450883e1d1650063b58ff300ffb802ae9a36a846341a5f23dd5f53c0fef76f7a858d359351082d912b58d6e7e17f654827f2a8b90221f46e5e0dfd3bee33107f069a9714c1bba62afcfe411eaba8295cc166e418dcccc33243e75946c9956b0991df3c5ac84fc17fa522cdb54894c7fa33e31ed53a4c69576fd620842fb92dbc2571a18e1df20e1da7ce9256406f742fab14e6fa71615fc926080ede45f72fc80cf164c763b65696f502b8e08b4426f38c4d4b60901ec105ace4d114c708", "a82a7726436f8024734ec90c4d5206865c88bc86a2c55865006f5ad62dc7c1d51d6015726a6d5e515e5915adeec3b4a1974c9005a5afea5bc5afa35a11b27faf98c104ee0a73e599b6a8d01e53b685ca1db229eeac4a097df9240f063c532fedb9600b0ec873fd9d07d3b100201c96703073b82ab6154b6967ba6501983ec0c5f87cd5a420a2bc3ba6f2c1e3adefc9221696b94801a1a8b1b877d5d26ae61a872691d6b7e34476549194dc37185a29c038147909887cbde289f5dc7085c06256fee76b1792cc69fd2312ce1ffdd7bf45623bf85aa6e980d7c3977184c1d4b14994104c469ca0801d2c919f0418c064216c15d50fa2a4e57fdb3b0a42eff1405cd41ffba02fea9d98012f56d4dad45cfe263cca236d8199a067510ec1cb9307d42eb24d8b078d041b4fb834b47f7e273a113ba7e3211c9480c95aa7f7f2f82db215fda3cdd281a5fdf99c42df46bd91fb3558def005608a5b2ece4ae1c90f5d42a997482ae46822e88d6c03feec3e4760", "ac1677aa7225f187dcc8cbe7b1e50f8d875ba1dfbb766da4393784032d6821c9fefc3e002121710dd961009f02895cd7b40a5aeb67c874ed9f0742af18338461be193f33c80146def3bb6ec517facd6be059dd8ef07d0b27660461244f9481b08c251a1b136791ba74b4a8919ce3b342308c010caa5d9ad1168dd48358ee2f2232e34f3be077798b6d283e84060cc3c141e35efb352661cc33181eb356b000c25bda2c6014f6bf0b791464c39d8e1c083def082bbe429128f825a17493b2031f67308816846ef0aa55b1b85c42ff81912acc8cb4c5758d98235293785dfd635c9d6ad7b14e021871835b64b2942fa642168ee9d3ce5b114f16d4ade6f82f6a4d8b727d0ee7f2c1696ebce51d835e68f54e733a51296348451d95c8e4f5c95393a08c7ff04ab669f8465d473b1bd252603a719b727674aca808667f70c8ca90b838a70d3f82e5a9d75e343fafd7328576"],
        ["91c121436478b62823b96211a83de4c7ffc436d05171a92be69fe18c95744c52824956b793c943e5d658f9b4205db65d93bfd17c6d05255bfa154788351b89ca1a0d994751a15d2eb219374248dc32ac5c46bf7106050ec72e6b3615be6f997b8b0d7b0faf55409cf8145b375d76866dd70ad967dc5ca38f74bd4cc9aed1f3e01780c0349b626455649204d69ed762c149ffcd26f52dee32ef0d8262bc9910234629285091567308b01ac3429fa6068118cb8244522b3b4aa88634ef3d9be435725257ded3a5d05b0946571a047863804d467c53727b23b1e80303eeba7f8aab4b87b5f3ee7f70a7fb9535466e1ca21c16eda52b8fd36ea7433c4c91b5ccd2de2c3b3d69a6defbf205a7068c6cc7dfdc174735bb22208ffd7760a1807cb5d0ebf40f43a73e6b49b389f77c4a2addf7354612741c48f03c224442eca18d8a84305f533cade91892f901b262fce10665541af166f5780c588585c798b0799928f7d2cbd880bff24ca94b92e94e9addb4e96d5fbb4b3e6af0ef36816716f90f5a7630e8ad5867a27e93ec1e64ddfeec9bfb6e486c85eefdb43548952015d1d2a17e6fa2022a395629dd3caa77eb0449c03f329ee11f08d624a9d275b76d8d8f20b7f72b2ea052fb3d7fcb64057fa802bb7744d29b00dc8a8db6b8331e92e13f9535bb349a00ed9b3f138db71b437f29df7c", "8312a9f6a1598c604c51a1ff7707b3354077f0774db4b365a58d10d796c1cb3dfcfb0d5baad7e7b6cfe5f02d9b7e340194bea3ab31818d2fde47bfd394a31b6b69909906d2b6a6a68c92262611d486d91228f518c42aa2517ad7e01f897e99a98b6d7ef01e0da7beb1a8a3f7cd41acf3a017577b5e7fce7a79877ff78d88d89b1c1c44a05bc10d380a639e6a82950a8e6714df45e8894ade5783b8cda68d47d71861ab6eaaac21d014807209c86b55b85c9d092af7a9ce6ac2a855471a594d87d047c92e4c7bf5d9b1277e5888d183452d1f5406845641ff577c8750f149f9bce0f9a83f0ff55fe17d6820aa45c21aae63b75db62ceb55cdf3e59a9d49d78414309ffe3d6b69c668ffa88652a170d3be32134338980326246bbd5321e224fc67ad426581c6e8c0ffd46de1ad16377d1f3373fe56a02bf63c5d41283864a7c5735dd4e67b1f16eb9a1fbf5c63aad66ee34f5094649f6e4d0d43c63b3e3377041b5bbe77b679d447630b826253a4e8c6717085fcc56a6946b1dc18fe34d845881eed4c84c2790cba9adebc5562e4d1fa443360d4f13bc2fb9706d42abd0442f26017c59acdcd5f5621a6623d74b1605ecd55d0641d4db1c3adc4fe7939fc2017582be9869849622dfd9352c79327379070", "a0ba52aebb1979a70ec4322d4a9d6f4577a7cd4b73c2208c6d92701ec44046c0cbc2c0be69945b8eb8a60366fae2e25282daea08f5e53b5771908f9d048656d758b6e677290f75113380bb56581c8409aba4a88fda19e9cb65234905bffcb1c38456169be748ba4eb090b666e0e68d0461f197eae71d98ee9119da71b760d25ba3f17ee2c439befbaeebed152170086931a30eb7cf8296eecda9caf0f30bafb1f330f6731590d803c016c4a0e246008347742cf6ddb51f3ca167d2eba622041a2e7090db5b1b945f6aa65f5fa6743e67699f7fea202cdee7ba3671cc3e0e118eda503de831eaca123ba67d2bbc357ee33c0dccf4f23ccb035001f5ade49fb1c038f5082ee4b1c11d17e29d1a09f8ba373e8682eb56297ab8c7c8c77ef5e1018f8ccdbb327f485d586d2e8770757335ba4bc7e6efa5991612a08cb4676144a1267085709ddb971d183f421c96a2f048c128ad24590baeb5cd318dd6239beaac74d6848e5badbd2429c9e0fd2b972067256880e9733b771702b24e3dc4a706d3fa14e6e6d94baa5e990f37d8afc27e125b695b72c83f0f573c6bb7b05cd803b5d6d966aaa586bc17c2028461f20eb85f9e", "a5eb153e7228775ac3d18d07f7fdf9c05d367fed38116d5292c3bc85ca93db68b3edc6754dc5ceecb073ebd0167bdd2785e41c7c705fbdb04ed37c131c6dd659d38155540fd0063c8493e08751557f6456131799dcf95523d8082bb5e4da2259b1bc3d8f9aaf553063bcfb20312beae99f06f80406f1cc49a583cf1d70eec19562f81e22cdf64c2433d66932a6bd36282bdcb0f618e1e6adc22f186f19a33c1797040190c8a1cf927e734d6b033333db451804ab565f8d7f4638ee472fbd946240533baa8f517d7ce49ec61d490b0a56169cbbe39eb17794de29ed9250f12b5c2ac69fa8e54132c69c652ff4da793d1322291b48f11aa353481a981d335f745492f6d129b4cffb417bd1c528374819ce4d4fd3da8a2fb4761f9510638d01acdcc1530cb98e63743f23347ab15a9fe708044c10fc4a9214fb1f11c35c0f7c47bab9ce11ac8d48a09d180378edf5c8e515458b43217dcd8c67f22bc917b8cdf8e34c8fa857000e31ed9425dc0898914dc1438eb15d79367b02f5c8d4e4eb6c3bbcf40d52fda8b083574e7b854b7e646eeb", "953ff4891bb0152b9b4bf9c7915d0e3479eaac8d9b514fa06d5acf7c8e0beff879647aaa6789ce2158a8c20787a98e7296a8045fb0653dfd033853ace353b1100b8da4656f26d30e89db5fe66a22f1150e85af991453652765453e7215b299b9a95ca75ad360cb16fd09aaec86ccd7a7c4f3b68c63796e65cac3dddbee541b00b3ce0c17c4f291c6a384e30f9e5b7bf03615ea87ddc6873a89e7c7362e94d0e2dfaf58e67f87f1c69aa720500a18793c712366a17583573d88d4b9bbde0c3d7e88585092d1e65824dbc5e77bc3b22b68053991076e84c8c12d82bafcd523a51125ac7fc72f289cd6c37c204ff44608aa03301c4325aa3370f52f74477c3cecc4d35583bc22f2c094b80d723231e563da48a34b89672d046bd9c4fa1886506e23d59a5dbe727233c197200f89bf3d6ca7215225ec637f7dd49e82e8af61f50e3124fc587e13f5ff543629596e32e7351e3a3636c099de97a43a67eafc23ce471aa8a9ed3a84d08517fd0fe0e46cdef6cc", "93e79ef5dcc98ab89d9e85df1a3d1132d0c78776bfe997c9de0648d6afac328dcc849a89afbabd4a8a377d60bfea7d41a263f7ebb571ee8f542b4bd007f1a768abbfc303ab578978f1aa4a4f32b3d8c9d0842b97115064e87c66a6bc77e08c4b840afed8b20fd2565a7467e0261fa2113e4815cd57659f4345daa51f0314cba994efe102e1d42fde983becb2c74139983bfaaefb92baa5d9718887c3a8a406e7b1df607393b5f23bb9f491000a0d93ea42adfcd082d20ce6cea3f655703e05f7f133a6ae85f43954e973ab62640f464b2d30b0286337e2a1f84c3ed1e28d2f13d8cfd549cdd7ba148fff8c5acd3b874e09eaf74ba29739385b028a57d7259c5d9dd8899b8151c3e37a0dffe628cff72e33decc56c10dcfd966211760e0eb523bcf582dc8b1c45788d0973f39dbfd13de4a09ec8da84f8d67417412a5cc604c69296c2b718a3e5145c851fdc71abd1560"],
        ["92acb3e221f8843892df907738f60ee19c6d7fa952028d36b832690b636e7588542940568ab464154fefbdef0068535db3d9b3a8a767be53a8ba39ca016f3ffb8be7d7c7cdb67aa4eaf449bd5a79f0326ddf81cad627ab72cd071e3e0568f5bf8660b670057494061373d952f22224eb83b012580945e736d640fe3e8b7bf455bcc4900be4b89eaba22bbd972ddb5f061dc3ced2b8d966f673c56fd16b15b35485e16f1d8f8353c1609a73be71dc3c0216352464f346afed61ad79f419b46d8845302ada9a5e2aaa30e08a632cd5c4ef6ed25d17e39774c957dcb72fbcdce4b00bc58a0bd54d9cf00346b395b16a4d3a307b40aa7e97a1bad2c22bb609b98e055a88e31eda5e5cec3bb39ddd8f2760c0052d482aa5f253436de1c072630536f90ebf3324c6b96e2d1d0ea95c49a8051309066429fd48011125f8f6721f9d4f29bd65a88fe77048d4b4acff704071a4b81b5fcb3c8db4320ad11e997258754d5ea84a8b48df0a59f816c751cdde476090454024a13924130794e7a77ab85a21f04f91b67fe0ceccf117e038b31b77e6f421dd43859efb548b7edba5480580a84305b7c19831fc5630ab4e18d7473291cb055b8f31217a6ad1dec961cb713a5f6c3648c221521a00c2c37a193f5ebccb5c2449ccdc4ea0088ca82a5e080d37cfd022387aa67299339db3f91131d7598701", "a164a0fe296a2fd9607de8b21e863ca71429af88727fd70ca02299ae094d58e66af07e9e93e33d4e466cee14dbde329d80b5dcedd84121fab5cc064da195e2fcf7648bdfea9ca2244cf420f4802f786ca63f65d911ca4fcbee832d15b3f39fe9b619f826ab0e7536a8f4ac2c1e7af04b325ed687794ffe3a0acd0cdbf3569ba3929ea91454fe9e5571346a843e9645d36610f297f7ad207751561efe005e40d7eb95709c22f4af5f02eaae38c99ff8c06cf487c13b758d95b2c67c33150acace27a5254e4674a6cc8ae9a7be6a43d0ff5703f3377ba5b36f804037d2f9c1e86c855873c8a939315eeacd6361d08076ac154be3eee31bde256a5e2906ab4aaf542392c6ee75cc8425644226a67a2dda8b578bd25ca79735a0a3f9e636b5d47b0f362d9bc2ffccdfcf3722e1543e9dbc98394df7e6f0527b64ee200d095fc8916beee63dacffeca2991587d455236499b64d610568685b7e28586fd7526a70e8dc8f97c5ec75c0e7b273f30204f1ecfc7153513b5c3063689179d3ebb9cae91662cb06c6fe172cc389ae7eebfc32da27432d6ed0781ed105158535c9f591d09f7ce476783d04a70fb2b7d308cfe70c91793b46d87829a4c6f647e1847b6a16d89d240b08531b7af5d160cbb873ce35a861", "81c848813f6592ee013f556f0f0109a6d72eecdf5ddf0279e92339480cbe04dc299cae414f215366500321b80062697c922ef6a1fab552677518d237f1136827c151ef17e9a7ea72cc5029bbb8026dd399f7e867558c810def1e017b99bfdd2bb0797cc7c7c1d98c76fbb2a7f314b04c84d6d92a269eaa24ec47f8c4c7cd9f9ffa450211856b2c5c6a3e67ac8c8c4cc845dd524f2d590237531f57929e31b9a183e36badcdd33a3696aa6e86b6024a986f8212372f7ebc2cece29292371023d78188d3de89a04050377ce08ba5bbc3e45b4aec1edcb0098e1edc70a5b6ddad8654012d16d19d8fa79cd4c6b31c0b3fbc459f52b3f9f270ceac1a0113ffd7eb29bbd57abe5c7496f4ea04f59bec8a7e7717590e9caa0e0ed974c05a74f1023f30e00f9bbe8b1771b8b60bd61a0c51a3592db24f96c2835844b7a1117efb8c5bdef70406469684721c51823bc530e1b52556f63f69d1dcadb0ce0806c83d7198e8615bd7b94d95fec32aaa6e5940461ce6430678a3ed25413a11645c6751b35065bc08d3ed4d6fce4febaa3c6ad153a4934498d260cbc00d27bbe8467e64408eabfd21d541fc0c63105161d1bdd59fbd83", "8e94ab7d36e7fba7940b86bbb1b1a11d9d6e30795a6c851d2346c99ce9bf6b0f5a995aaf0a493c1fd4db3a04677f8cfd94ca17a28eadab4766ce141d4cb11be7bbf263beae7ed563eeaa768064935136eb327ae26b11fc23397660b385f2171fb670515ea8db07aa7e8f09333a976ceb50afdbf25b5808bc1168c9ea7dcc16236a4a44347ad1d5366bdf29432a49e89d14e453f432d8657909de71bafb657610aacf115ce0f45b86e933ead88ccb1a0144f5b6cda844b9c862dca527713f1497e8c2f43a108f85de1e029ecb9fbcddd50433b18a7da44e8b371dbd72cc8ba50c19dadc604874c8d522969cc291f37cf821f6af50ff6d477bfd6077af6ef75043a72f8b9d2aec0cf169b1f2dc22ef16ec155e661fae7de6b87a30fb1631cd98d26f6a57288e351cdb0c9fd122c419d5fc574ea8afaf474785bdfe5dd49a047309a4169bae4f33ddb5c9762f9717848a5a62c6d8ee02fd399defa94bed9fc34d00d9ddd26d7f2723a31d6fd07d76e97fcf634e4a18b73aa60f33838abee58816fe278a9bc25fa924afe1ed22f3020de946", "a03aae9ab08c16e94b970073d20552978d2527094b27a3a32a9a7ec0b602f4139d69d7f39d08f3836fdc5c685ce895c2b8001dd97822a46bcaf488c9a66420f928a746f7a04acbc1bc3fb9678290775425a869a58b7eb33f2f1cab0ff3994718973bf031c3e0f42cc7e7d5f7bbddf90496e5f8f0ddfd7bf0e17a10ad7919fc4dfe18b0693d88704e0138c929c044bef21d18d6a2eedd9055149fd0728993cc877e8e1ec390af9a58914875f7aac7f15e671ced082d3017f34da957b7c071077d3f74324ff800c5e5ef059af393351b3320f8db5dea957100f57281594d7279d0e317cdf24af3a6aed694c9537ab0ff923e3f3adec43b7f464d5275c1a7bed7b0b8bdef3930e543bf730f2780a482463454369ab4fa4bea3aa91c4cf539154f3d3ca4b9fc36a509ffd4c20add24307e311009e137e203d0aa7bb9cf98b81e54dba26ed84456da0ed478f59b83d5419ae525f908f83e25b89d198b9585831d750547e8bf16ebea9aa4eb02704537b31318", "8542bb366ba4dc862d2f0869ab388d154d9148b2ff63e7be4e6d8aee5f9fc06660c3b633e5e195aee90fc7a745c0987d992ded15674a9f1579160aa896f1d35a3f9e7f3466b39776991ee6c8d7699c448a693ae3608d1b8d925177dd412107a1ad0ae079a8573e791d08ea3a908b2e7a68f353f8364c2fc53e638ebf882da47f933805f724232715671c6b8f0e11321627b0b07b890681270dde659899486aa80b1b0d502f1cd788e3655e6c45951faf21202c8e016c76a431871a64cfa2424928dbfaeb4ce85832445a1e7a895b35f234a326d0f00966247f8c43e3cbc899d2de1d6732a92522fb66c1c0bd442e0d9e192e0512b807f23b9a20699506890406fef205315456b91b0b2ad7c0618b636b1c4fae5f06bc0795cf2f49f6c6431605721ba572f48f8dfcb22b47b7e6ac7625345f2d73070c3bc7ce3173771615c2bc9978385b0daaf674e35f48cbd362c58e"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs,
                        None
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFO))
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["a10539c2649d60edbd219a13d226ad80a7a523e94763c9937903ffa73417f256417aeb33f5c47833345c75a8bff21afba7f3ca23824dfe489d3a48255c425474f4c39a2c84a7b7714c670cc001df2edd56e70f683f2b12e9d1ad8d955c44d19184254c020cc60e2ee687f9700a53a54138d7f049b6ecb6b30026ff14d4e0a0c15fad808f227b4c0c09a023a2a4f4851a48a468f24c25d375d0df0cbbb926111be58f2b663e8de36feec4f7c5312ff0731e4e9e4bbdb3007c22e409dfd0094609a95407e1a002f941175d4b7b065450ac3a8bd2045ec5692652a19f24e388b4139e05d910f1a4e278016d99f2b2f073e46c526eca82e7b73e2477dee06c8192a3be4ebe35d55f960d9359cce3adaeb7ce401271968ee28dbd836f58baeff1bd34f7f0e568a7230792b6d8bab20e0016bf683765470ef162424402a08d6c77b687ea29deae9b5c1b63e07b04135fc07eee31a8c2c609d2cf3143df9588fbc5b0984a658c86de5a77b866ad2b07b138dedf3d656d989b9d6239bab4aba73a29f3a91f11429438888770988699252a8fe348254c403f8d31cd20fab415df68fcab3ba9e95ce9b5478ad86e78bc1219e4af633b6e5bed4ce9bbe619547360f405bec1af030976fcf0aeb89928b8f124b0cc1d3ee7f0a0d980628c0b661073ee7cdb1d8d175bf1a0a643f744986b04e5bfef27", "91e9e95b1bd6e37ad9fbffd1510d5ff6c98018c6a82fbe466ed4a79a4026b1d1fc666ef8048db1bebcf00c57653ebef4b477e6068a42be9e4ced141e117ed6c7bbc468937727069c13d6304adb538085e0d2d88121e08a278cf47053179049e9a129bf2f80373aa13b870113a41c72854df77707798f73c415d9a8bc552b8a882b0277b7ec6c7dc0af0fbe9ff17d64bb3cc17d531b777069dcd6d518809697a5e9fc6eb2c65cd9972e3c4c919479c7ed29677a8ef7ef46379442c1e4721cf9f58a3522b4b7ea7b476be85fd6e8b49f9e496ff181f9b3a9cfee2cee3180686e2f8645fa38e9bda9dac4a1b6c5f60026052ce497f60b33804ae40752c5e99869a02730598a4613a939cea646f57e0ae7a853d462fc401d83328407fdb8d0ee463321135a38cfd5e52cba865fb9cb335cc920cca1782a1f5679a274645bec8c070898a9b93e10a7d105afb9eedc6bf2056157d48d2432683fbf624b5b8fb91a57cc096f9a1d3716a7f7cd16c1e5c1f892564e2e8c1019e3d601115f229d1f8e701d172d67e8727957b8784045c3a800249b061927ac9a7cb0b581c859fc9c75805513c16624c8d4f4ca66a1e3e1c347fe551c9f6e93edda02502820232506b5cef48de7f1dad5658fc3158993afcaebf0cf", "8a4b4da7c85ce5bf04a1abddfc1554bbb82ae75f2a142ec36ff41733d67c9cb1ddb8c47f4aa6cf747b289b5972df030490b6ecf2ae5fac8253651d816c26ae1d48686c0fa5b6257a9141993100924552a678be6b4a39f8f7fa24d8b2692786eeb119a66c60230a9c1efd373ece96000bd21d01236b8d74072fb87de1891540c60b992184263c1fb7e49a54d9f86ffcf407c45452f3d9aacd42e168e75642804ce4c80899f4d1237c96e71247b81cf425054378c8d6ed85d50ba445411ae0e5b23c6d94c31bd84d17fd908b3f35e20a6700cb04e83957f6926b56021ee210cd124bf8a3c6de0d78eed2d106a354c6154015c366ee49d88d6a71db3c73fde36347f6e3180edb383b81d40bc4beaf607a313c47ca2986d842abe8df01145a9d1d8bdf69ab74763f7aef4de571dc11a2f0b200e06b72d42d5fda489d67dbc4b6738dee9880b1b3099acbbf10ae1259741af1334131727dd2ae40d0db58f40230ad5b63549a60c45457b28f86ecd0b29edae4456f7eba5d1671f8f96019f4cb4d2750f07472fef50e0386064f7fb9a44ff07740d507fc9c1858354b7fa508755e4c5de5968df71af946c9aac08aa8862ae064", "81b09fe23e0bf029faeda5d6608fa8c5aa23fe2f2b759fbdc675bc7d15218312251e2ea5423783d14ce87fea1821f760a3ff29baf3e717a988e776a4a7a32bf9063d2b15b183e0d2c3637b3a1027209b3bc467e535cc9057862abaaab3176ac5ae4c97accc3870bfffe4ea26af55393b9e7fc15846b61b625717dcbdecd1857f8ed5d86cc0432c88768cd57afaa677705c7da80c79eadca4da2c0e7ce373c9762397d035f1df4ae009b08d570f1a5f225f4c3c1f60a57a9a009903b6dac9e0f4f6bbdfc1beae3a25c78dc4ad5a0b62a8557a5613801ecd0a7ed029292e24055e5b37be29165b3de9c3a85d842e79745e5cf231d03438dd1b358964dd795f108cd65ea6dac9169fa4b79ba5270abc3ecb455d1b023594516c294f9685799bf2f350731fb1fa2b88ab47c6c4b64b82218503d35947454c164bda7d7dd30f78338fa5a1d0a3cb8e5ecc984664d9623f1c484a4564cf4efa7a3df831b5d76363b7a1c7f91a59b5f26d6f9d9ca34c3ab2b8c6514283099f67e5c7a9baf88ded363b81852e18d069f18cfc86de8c7304f4b611", "a9d4c44e89562f9d780b9f91bdccd4e5858e6a5570d9d126d558cfe3bb75853f7a568d89d1ccb2da41cd8182b91417f18270067ba59971c3c3f1486a80dd1c330b051f7df4208ea63b19749612b8ed60cdc6b65a05bd1d9cdaf75efd07df9879806ed6cc9f2d807f4493f91772c2dd5e82f3deef516aca43ac913180bbfb6638c816d84d52624b862e2b9630bdde7c9043d16f86d6174d9d38f060751bea6e3838984f24d0923306335e83ed8bad3019511b6f4e9254bfe605e1ed676814a11a9cb81ab3ffe05a347876523baf627ac406b0af833e4b4eada22c1ad835f209f980f0706f5ace02c50c606b46f0c3aedc3536ad5774f1bdd2d0e11e70a45485c53218e240b4866cdadf700f724a39ac41173a529cfcd6621a6808c2107e817355043715c5ea83fed65d85b9d842eff93710dc23bb97ee3a3375e6d4023fe664f2902edc71da11ee7d81643f4946caa31b17dd12a3651fcacb3b4ee6e015199e303e1296931f3c128f61bfc3d71dfa9406", "82ebae580769c97bdf96175e246550191bf6a0eb00e4f6d3d3459b8e0dd2162b259bae7fc2594042016cf7df625b7e3f960be65242f9c02afa2149feb4722968e731e37383f9065d71c872e993e92d58d2da9d9da35c629c94e16fea542dca8da104e427c57db4bc1eda6d492d95430804f4de890a2bbfccaa6193473a5284e6bcce6bf38b7f2716a49c5f1dfdb2f7960cf46159337587638e06c64d053668f0d8c3809029d13d80dbc700fbe486743d1670305f3b77bf403a3f68226a2b3162ad22a484da065318836dc40dd92a1058696ee1fe81605901e86886c8a2df89fd22e742069c7f235c7e8a651c2412b99e26fb464c8c39d1a21531ba77550fdfdcfc27c392c56373a7b23101236325c87873457064b40b5b067dd9aa01b6140b626d2e3f6d092f87da798d166d2b1a833772971b8de334a6b602d87633a1fa3c44a8f0a63696e87ba1be6e44091e2afac1"];
    let expected_proof_no_header = ["af9f8bb6e659cbd6675b5b0d199de2d62bbc1fc94f5281043a7055e8832994982700610fd5c408fac6e289ad36aa0e638d6a5754e6c1ef95400d62f4dd2e7e342f7cb246631b4b523dfe983ba40a009e3e575f7e6f10f7124693477701d197948d1630da4ec6eee88e6aa21b915c7239ce8315386733857583f1dcfe70fb5a77dd4a47c928502e78fd7072ce873c169f6277f128a9494b1cf9a0f03bfd79a0581f75751491d38b3b494f22ec928963444f5c542bc53fe60a1fb876cbbb2a7d523f58d5fdd8a05d7797d35ad14da4220025ebf6b6032cd43037500cae2bd529fce5816f3649708cf2cedb7c6e0703aa4548045048824a2e15f41f81bb82d20de5997d794d6568be00d345a79713926c9824af9adfaade52eeb528dbf0af26e7e3640b1096a3ac2d0e123716b588dcf4176b9341552289208e818ddab01008d851efd457b1c91c74c45b96f6e7afb9cd146651497c5dc26d2688ca8253e6f3f80d528cdd5aca91ffecce349dfe87466593623b85548ced0878b59fbcfe0022889972926206df9ea8b9d1c22df4c540fd516ccf678fe076152d1ec94ebc6b0f5734e406708a3f13950a26e6c639ff95b35a6b8f1589a5d798ae7e0414a25457a899d0338036250e1e32498ab6b64f32ac2825e00e2c36d24670668c7002201fe292a1673144c9fb5fdb2fea3feed76e8969", "809a5f589efcb4bf231e5c85fa4ae580cebabf5b3089b1cf5a0ff71ab7656390c12de8110ca6d720d4940515c52ecf9d96bc473166e0e164036fac0c7d351379a83d777321e35f6fc41c6b81ef0f461c1bd49b70606a792949a35762791402dbb4e34c3707cd106a9dec17bedfe815f658a666c9ec1dce70dfba8df2dd89dd51f6daeaea6dd8d9c33c2ea4faa8fc2a2955982d997b24c694247368f4aaf75ed102a78d07e3a9ea460a4ef79b115b77d412dd171ca574ff98eee7353f27467668d3086b8311a10128dcc9e6e46d316b1f01d02accb650fc0b7a446d44b68ea3b61625f9c5173584864abf4e60667442d221705cda1753c0e5ebbd7f04a459d4e85778b7bd15889e85d66cef3fe6a3dd9712f97dfd68842509c7f4eb004a5e5f1c0e8b23c5d0503399f8d4dc99cb5cd8f65bc6ad76851d1700b3a51074f30057d17ec96fcb34e3b31f52574da7633028f33b07764f5efedfc09cda0b034a0db88298a9174b74a191bbd16aa7c76f36e9323ad87194fa6cdab01ee4b09cb1ad8f210d3e5b5d75bb3ec4534ef58c8f28952e1727268657727a346b2705902d40eaf973b3e9b30df467387f793f32ec7c5d670f233fd6e22e473e3b9e693313902ab59d7e9cce19afd63bebd5f456b1abc96f", "a921f7300c15c6f3bbeaa22304fa516e93cbecf1d837bc180956e2e3839df4b60bac5701765fad40d5ee366cb1bf4db791cc16702ee72dede9d867995dabe9c1d1770e12cacd76d08950869bacff73ef44086cc5efcd086f13ad84acaf0e5477a0e5413fd4b07c36f48fb366564e1dbf682c8c9c263185be4570e3057b8322a9fe86b77c8d8bf37a7d64073491d75adf65b2984cad416cff3e669e565f1fb59a6dca921d42cc5a8eeedda2a9ab2afdba5cad5bdad1d87b3cc548a543d2f029bf95539695b5a75c83600ec1c13deecae80c7d694c0a48261452bd3cebbc5debbb7ed59da0cdc6d72f2f9b7b1106451520621f3b40a47b44c23097881f73e99cee75b82e8e7a4d4065803d123f92c763f268975e1e95917a39f3dd83fb7eddffc0fe6c8fa15df42ee5c9eda95f880dbbd2579ad7b898a4941a55de2fab16eb2b984a295f1063b1e37a9e1ed9d865f7a1c6124eeb8373d51e402b7ab3b1b51675036d45717301f0ef9c1a2fbbd1ce9858c2066bd3a6e1e00c0da469337701515e36c5f89873eaddf1e43b2b2f4d67596a9627fe76779744612fa8662db3f8b17484a08befc28ba0adecb8876cc52ab25bd2", "ad57537d3744223e149cf478345cda62592124f648a3ad96e6a070bedf4541c0bbfd18f49d84875566254223c45da2cd8608c3796646b93581ea07573a145e0dca0b508a41b442194e2720e8cdbf232ee84906b939089ed29770088f31ae7cc88b751198d9816d3b77d2381fb8accd64693d2ea9cd7c96dd15dc950cc8f353ac1d474185ea3aa1197d51aa48a16a024206e39b8e4a01dd5c239c80a18d261620b17acb67879404714ad9571d88664a8044c21e20f3d5d4499f00dea7b809acc8b72d0329468260ab987e52e9ee5246c76903e569a18b7ab5842341408869651c12c83663c1d76b1c8b67e402d5bd3791174048857a0934358ffb4fa5b8f9899d70098c87847b895084db385e4a60ffa21e89b9858d260385b2c62c4eab662071eafedfc817d151f05300774d635a04a66f506aafc9ad9fe326940bff6b04e54599dc95474ad7682d79aea1a37df4f3e90d3cc9a9ceedda8f7ceadc8727bd5f95edf04d3459ea956ca4255f2e944ec0c05956e38941cd03a528e08412127bf6cd5976b95ae25ecbf95c321aa2fd8d31ec", "a1aebb51e62417691101f22b2b31490fe702460bb209d295ddf7593a71dd28ccf615000580cdfe1ad95654dd1d890252a86cff57a0ceda9241c9dd8d53a9eb2b664183b1a4e8e83f2d59129f7067add3a8c5644f3ec154ba0990bd6ec4c0565ca8f67ef625798f4de0d63128907a75c2364fb7c01755a3b5dfebadffbd015ac8e45b190db63e64e47b7e689078fdcf2461fee016057b94026de43d2a87e494d2c981a0689df948a2cf9650c80f9263c34c721386f41330d3fb6e2dbda9473e2d8f09d6f1aa47de67ae409edf5c148e7b607fe57b45add8436d72736f5aa5ace46e3ac9b6d272415ef6997dc5ad2909315f486a097d0fc46d6d060e94dfae86af612158fa7ec428d8ea5c29fe5bf9974a3c4e23748fd11707d3ce1dfbfdc3b52f1818696344f12a75d5f710470a407236110e98d88569cafa2949e06ab8f221b230afe257e0ff687bcc0ee4cfdbeb6a630969b8f5fb110f508fa866ee49f743b63b0141b13357d0c070af64c573ff0799", "b9716bd828d0f3ade500710951fb0636207cf1619505477a8190eaba97c6af7983f9976022674361940ae08340766d448160bb92b7ff0f3a1a2174275d38237d0abdf1fad14761157e7e0fb6858c27f3d2d81a95b5bb198cd1a0b4915331bde399dae52a037724c572ec44552562bd6eae65d41574b90aedf2c4aa510293f344d95bd38eda9baa72134d00bf516b76eb25f3b5a0ed943e4579595742d5cb59a797aeb74f6c9c636c1f946294e4ede3ef381363462caec5b4649d603896af87b8683cd225948c8a2b8391ff9bb69053f802bf3c8a723348898adebf848bc4e8b5be05068e011eaf288f11b080e9c976263bfe88b4d5602c6e4f8175a8dafacb783ff01eda039504622b3712753cd9807e6b89065dcac897a82a85d1f42cb42f70d3d990eb05fdd8d1489ae617409328cf6fbc2914f914ee829bc4502e0cf17e62902e72e0227a99f03dbf04c86c8a3b12"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert_eq!(
        signature_with_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                &generators,
                &messages
            )
            .unwrap(),
        true
    );

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert_eq!(
            signature_no_header
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof including a header and no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_with_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    Some(TEST_HEADER),
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_no_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages,
                        None
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices,
                None
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
