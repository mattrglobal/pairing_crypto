use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, B_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), z_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, B_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), z^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(192, get_proof_size(0));
    assert_eq!(224, get_proof_size(1));
    assert_eq!(256, get_proof_size(2));
    assert_eq!(288, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["b373d617fef73f41808a9f53b455b9f16fa02e7955da5a193a0f9846b145db54c25f5602ca749f1009a5e9ff17236dd6a742d9a091eaf4a34733f1ffef17e406a2cb886dd135816efd0ab7efab6eceeb40647069b52cc6de10c4f044bb9b9fd81e1e2e654d8f7696cabcc7c38f7d88a366f3d70c3952a006906f200c639a78f62adafaf31b3532cff55a9977f2a85ee23cd8a9186d80e11375dbd82a71010f6d66099e7fbad71b94fc18c8e2cea900ed2ec0c2eb34830e14e343764d1154e9eb2c00f12b7983e6defcea6825fc03f7c01d620a4f9ce306543f07a840b1282cdd5f16182b1f13425c2eeb88d973a14bc9716c55e9f6e9b83d68adb8d866218e5d120ea7fdb9ad5e8a5127be6276270fe63f52c9bd118c7fe10473787bb4b525a05421036e88051ed33ca64dfc641d51c52fd79e2fcf42b2b038577f3b57abe38e03fddfb646ca4e6ee7a1781ef6a4f54d0201b38137f0ffd4e757ac54b4f8e75702e59914a96f6e72e379ca4a6df93c41e9117ef5c95cb033bc798c785053756b", "915787f448cb7d201b31912caa96b67508c70f9631d81c0a9aa35f249551559071b33d8c6d93b6fa3361e3fb16ef0d2da08a734ff6503534ab26f0489c183199e825903d4ed3a93f7a43c8313ef98ded285acfa58cd8f3ec736624313e7cbdbc565b8ebaa677b3cb96c0083e42fcb8fabe5c5a7f8eaa5d5b791a0fa2e80be61b2b5b342a23af6983e54566f39dc7f4ed615558c1e7b876e2820c5d23de3cc6b26661274a04c7fdf99b0446094ef20f65b5ec1ba5513e132d4cd1cc8b4c7bc442692527186112943b2b6596c669c2dce6c2286e22bc6166682aa3654a54d689b148cc95db87d47d3a8a7b7dec7c48dc06272f180c6dc1c887ba9fbc4dbce9504c6328240266cd0956e200352b0061c42682e04aad158b45c5804798f56376d1e24416c9282c256f0ac719d872a26835970c7ae00f883eed809cbb9adfac8970944ad5f49862399c2454b691781f34b0c44d4272330e99e6bc8419ecd262a2a981", "89dee11d37848c226056cde2f6d4ed39a0c77e243cece843cef704578e0e894ef5cdc05b6f0288f4421131e88ca2ebdf8b128c91a5962913adc29cbca3933feb54b834dc493f4752575b71375a6e095cb16925edb8bc2aee1b5422bd41868df50105565f1e4ff2ff7c929537ffe9110672850131d92755b97ab7584ebe66c68c2f1c60bd1bd7555d720ea22fdf768cf4f9b9b453c48a5fb4c9c156494bdffed1038939591236951c149634afe48eee45a144e90c042b049ffc496721697cddb25bb7f1af608c6c1837fc7d197173db8c5ccb1c46b102a5cfe572a24771ed0288642ca75835d19d5383a6030bde37749421cc70863967084b552a3eca898f32684fbd4b1be766aa8d260c3e787e68fd514075da96e731acb0635f33d88e5385b51056c01bfee98719ba656eac65c03af94c101e91487a9659eb4b90ce82567694", "a0b73b08b51eb354faccd2837a15eda2cb9940346f4ea8f81a510eaaf625317eb5328960310e08527b01e6d07bcd7117948cb011312c6d223768653cd09e35ea399ae7ac97b148209ded9487174d6498c6b14ab1dbfb8fe703b33851bb5a37ab04e0bf8668dfe1b1bf412a54c44be7c3b1a3580df70abc626c4a117c0a4917812f6ecef196925afa72ed8b3eca281fd18ec8dba65bd0006ddd3bd396c83611701f1ad04998a2f16025fe123e9ea6269f68dc32070e8d58d1310c500305165cfa548541a0f44546849bb75485df390c4d99d05d6c97599dec8ef9e038377c126d06fcde5e7d839675038e1e65ef565a41b014aa34e69ef84b8290dbe6d9c94c58365bebe2e0e836e71c52e5ca4d7457a3196da8d11f989081c4fc3fbd9445b585", "8f00931e4de788739ab795beb67024ed6f7604f2904418079c50b7d8e24f0e63eed1f4c370554c537d0b45c6e259bfa7815620badf3e8e353317f00fc68d1273acdd4b3290805854e021f42d2d2129d40bac91ceb4f4963ee93adfb98cba9ef96ca579e266bb31e20acc0e24f524ff9278620dde40636639c0cc524e1bf528d94d78ef796c95faaf8d7a8415c9efad068f658a343586463ce5b863435e008e2f42ba24a54b4fcd0d4923a0e3c0774bc2c324cb34133f8acfb33d17da9964ebc52c2f5c9ad9e8ea890f827cdb3fc9171122cb01951c73c3c67fe185071f624258356adeef50ccc60ab9dc15d0515be70f11d429f0471b5c30ded1e44be4982047", "b589e4084b4ed84554cccfaa44cc602255f877a2b80d041e2726c28a3438c8ed4e7a72f006cd36979003c774eccdad9b87869f3e9fd4bf805265e5b2f45aad8ccc517a9fb8e284826f1a8effcd769ead78e817d3cee1f09e31b0807a802abb1a64c462ea148355ed9e984a7109bd457e9614632a057ede6b44c4eab9ecf87cab52735aa35a3813f00a6131e13bc37f7539a5b860279e689e9356668d4fff1c6360b4a393df03b7d056fd365a88caa6e0d960484435c857fef8682ab247bee5821349cfa4806b43fe34fe29bce93b3e1d0122527a2355917ca797c973f37d6726"],
        ["a40340e81a842b889f8bbc875fdcee448a16dc5743dc8cd2fd67587e89543d56134ff349bcfa9c5ac251b6118205ab21b67333c8c3f078d54a2af69bb6e4b3789c5aad2fffe880015be8ca0eabda32896b48d7d941f452749353e97cc7a8f8f95aaaedf13ec2a94acd582bbca6ecda2f4ccd1e0028d83c138c1c8c36cbb03cd71eecd752f5e2ba285d71fa6f057d88409d52c270d3050b638fc51d7c063187af4431547dd00f1052b58ea46996bd2a207907153c24856184ede496f8b3421fb5716b72a4229141b3b8ed6c95c82d463ffa1a92ae5e68b202dc0462ae997b7d8c1a18eb1c01299222440a71f318d544853fafab8eb9fa9c3822896c50dfe7738b697299d0dfe5090543e5b51c7b0451210da5e863d9165dea596697cace7a18d34bdf5e5eeef9a33c4659edbe177ead1b98015ad9c3271959275c2f512c08b585707d09ba13151c94bf61572202c7be17ed145211fd0498f4e7084970311a9c3960dd6372991588f4bfeb6b4cdaa0093ccba4ea49f1e0b7bd1295da32cd6b1f09", "aa28335eb1882baa13b1f54aa5def26cbf122fcfa8d755f78821722b10ef5eb67220647be103c22b653654ea71b5d427b1bbe772e36194ff68f1f1f407b5a84fb16bb5aa49be427abbb32b744e0665b3244c533432bdbae4ee11e8affe45db8550e01894d9cc40dce747d57a4ba8d17e56fe4afb6be50bee6f9aa4702b661302708c6bc24657834f682ef5edb34f6261d3e4a1b1579cab82a9fc0dcd0bffad5211d944029c867733347de7aa9d09ddfce5c543a4f97222b05e84bb76aff55e326e1e4305c1db4333a292bc16937508cd856712d64694f37ee03534b88a3eda556707b1626ebd25c80f9319ebea4e76bfbd657ab119984a5a4ecddc29a7dcbb3c1980128727b53511f265c96d0f5c7891e9ef7527a5714006991547971818455f1e5862620a11b6ebba9ec776c1a6bc1799b3a13f1a7e6993867df7f1d873c8064b598bb184ac55a14c43dcd281a1388c85a4e7edc96205e0eef2c967d89c5766", "abe9afb1aed0eb80cce5aa6b12773c122337259ea42dd83ffda6dcc4e67d99e5bd9a163405e5fbe9be6297be5b18dbe78c248c9f75a5c768377bb798923401b0bd695d9d6a235c9506b8e8af5823376fa84829665eafb73a748cf8ca144fcb2942f36a777225ee961633a6daf923f082da1a4e28df075547b0e2b7bb15fd8d1c1ea2d703e2fbe03dbd5c91f2f0e166b186fec24e981ea4e3428afbc97d87cb8a2bebc107e7ef0b89e84dd7d43ea84dd77b87e08cdeb922de19fd468b0720669818cf81e5f746322459203ba3252e0f4b341666c3ae0a2b7ef994a34833b1081e1862bf2bfd1daa146b92149b1ebda4bd765c2c24c35c2c7fd24159ce4af4a2330a64b16baf31e048d08713895dbcb12e5a1a96594dc5c3313a4f129279cc18f519a54a575fef5f6e0420f009ffe8542cc631e375fd8ee15c1f48e4cb4561bf7b", "834379760f58c20abacfabf93713cc8f7a9a8d7cebcf627f30df4b55ba16bcbf288e9280f04eb997f8fe969be365d5d9ad09312c1ef617f61aef1e0ae970e9566b9b71a70a35671a612f55c1ca6cc48cd91f9ac8d21d7125666ff366741acf8b271f64a4db359b655ae31b1f4add5c383b7eed3c70d1779e7d5908e5fc50a52e34cd2e3e89a094137211c5a9b5781ae38bcafed9907cbedabc3fb020915c39ab632c26020942d6c988894b4706ac6a2758950cf99f1810b7732e07afce288dcc0aa2fbc9c42e67c38217bf721a857b9775146ad1ca9ea9b5e20218ea3b329df3430aaa08e660bbec0e9d94235c8e6189fbff8db0755a0fc49d0028d1ec13c3df457b38af7313454a0abff69049671590ac186e70c08790497a64f7c4322920c2", "aa3b3fa34fa61781edea8755a194f42a557fd5c34c12c5424466d7fe662fbe772d373dc7eccfff4446cd89fbd05ac70f960f371eaaad82410e8e856bb52342c674482df9a6d993f82126696ecc3cbd3fcc7160753682e6eeb31baa1b6f51611c5a25b59b5308b8c8a07b7e69dca8a98e8bca129f52521a68cec2d107279a13b762c800da002207aca98e12226095220169e0df0a84e8b19c872259d7cf7900953c95e91007499c67078f87265e8aab9d54156181ec2953cc412ef3db4a0e1a305df58517f431be96eece7e2f3b69967dce27a69ac74a219d890d46688029ccdc2575cb23ec5f571792b5ae4af1e700835cf5a7a5cb0d8fcfbb9073f3be3b50b1", "871bb9f46c25f21b447b86adbdd164de3e2953d37814a6ae93144dd2d29f72fee026e5c782249cffa984bd6f3986a71489778cfb989933bb4985b09fb916a8625fd3c016d62a24f0dd07fda22f64e8f8f0e3913b794f6b71a9bdb78e02ff6e09063eecd95bcac3567eac73163781c804f2cce408bfb12d757b7f68e97ac380d3535c7ae3579242d84dbb6d7cc92f99852f709ae74c7f120227fb42c3993cbf725debdeae0484777e396c5bd25b94064cd4879e57d36c592f6ee90ee282e7ee8f64588b7b2742817feafcc3508ef0e2cd1ae00b489ac53f4fbeecde52108e8eb5"],
        ["a19722b94792bbe626cd66362c2f247482b9fcc11454cfaeb0c5d442e65d98bededeabd76787037b962bf96c3117077da1c1beae69c775044c4182c58302fc57ddbace6d3196fbc0064356ba1f89c5c6c1070a05f94eb43763c23f658dc0a59e0b6972e9ddb2fd3febf64014cf7ba9821383345f6c49408ebcf5c18e6645718e5acd0dd231edb35f2298fda614159e1bda76f63813eca8b693973d573068049952b6fd62eb0533251add885cfaf1b3d16a6e9c281738090be610727df70b77c403f006806308f1e25450f69e06542ef0f3e5a60b3e38759105ebc35818aa30026bc6a51e4683b8be0a20be0f7e59323b034909d3dc5c826aebc3af5ddd919d9d6baf423ba83cba8ddbd34e770837ba19a313b52a95f99da19c376e44331865af535845bcd5c0d5d4288e42c8c04329691a0658a50fe780cae5bae31e7cbe84833c24ed0bae022b8944d31f4d9c061c65a9a86b441e51241ee329d735db68d6d92f2269c4f2ad7f828b9f87426d70d3b8fcebb1e972cb1c3de4930afa871cf4de", "8c4e684cf01b1bf23f29dffceca2fade305499e4f6e0cb6521f7c91c3ab6c682006dc8957a825d5ffddb33f9aa16d01e999ab49ac1e77bf32b889fd65fe8eacad20d18e7f9ad201474bb45da8d7279292d79d054cab632ac37ad6f35d45ec2ae7023bf4af6ab31d8f662f440f0888ab564884aa03fc4b950873347235c536e34369d46c4edf7ffc0075998ddaf1852f4ba9da43b05bd231f8a7b730fe91cec1935bc1c5ff1e7c41bc42f8af25adc99dca155bb816dbbe0ec79ceeabfde42a55d14f8f5c838900296597c6d5ab44d17c361bbca5cc8a5e70a47663c4d0684a44872d2a7939f94be7aee26adddd79b97116be9fb3bf4dc4c7ce91bdef697906e4c5af15bc9de26d37042155a59011cc4c6cc4182a741725fddfcec02082768cb052e78d25e2ebd0df2832a7a2dafa0469a497d0eaf69830c6aa1727aa36abb129100b07c8dbe69508d7b7ea8f003bc020394533309d24ee3fcb49c79f5145fa7aa", "acf99c3e1aa19d7bade862a2a7ca7505b9ca7a7849c0eebacfac097a09547bbdcf7a4969700726d82e35af0e3f2351219036b08ae86169a5faffb1b28de7caa0430b7af1e3a8375d0b14f8d85b1a24b77c40d2634cca8d517a3c7c62810fe2512fe8e487f8a9302fbffd1b201c9b4268a2b08980ec17049fe6f373ef304d3a59114f09c4d6b6f00504634b36c0f499ba55329bdfcd7bc7b4fedf6b20e1314c8623351ebd7db30bcdc59c185882c18998fd56185099a8b74fd9af449ed7b30eba3f7b39c33921a865f08d6a2aa5efeafede30e41255b68749a49c3511713c65af40a07d32fc4339dbd9ef52905c6cd5b4ffd1e627ffb0702790f5eb0cbafb1e280bd5315d80fdfe88739a9e67da120588718efe9fb7e7bf4a037988582cbcb5593b2d703684fe3bede86d173a3e199bf6da3dc70efce154fa15d58c0293c4d701", "81d046298de249680179c5ce41cf44c2141db09fa928ecf45beb880ad9e5d2310cd8578c1cb89560a5697ae05ce9db2991bfc024425afd98f531ed0cfd45b24f38ce27b92bb62d9a46b456909ca70350b0ce02a55959fcedf6bce72e34320c05646271173bed4b31f276edb8b3d3248ab46530b36b464bb9bea9b8289a58c6302595ac978c54b84cf5c0a56df97b73f71379d821d3d303b1ec748b31023b5e00500063f148754e8010293b431ecaa6130019b7b381af71371295e0dab7e135aa042acf9c4ef347569b90c3f09a077ee3e3d92eb9684fc444ca0f90950fd7ff2057781fc87d2423c708801b465128c7d6752fbbeb5e9913b9805491ca3477e5224f574a9062e7fb872df962ffb1e3bf13a818e808bf1dd14363678f124486ef81", "900d36954e153c569f5da4437fbf8c274cd89f9cc79e65ec7fa24e3c50c49e1dde8a9fe37d4e47b6468bf9effcbe82dd8d8785b715a2bdfc821366e3d8ba2b72395bc8edbe03a5a4cfc021c1aa97cd9f27e697e1b9d9ec1d55ea8827bdd53a8903deb6dc52548c7092e331ecec2fa611577249a0cd0ad8f26c7f5683e154a6085c53c55bd3428201083343b216db5b84daf6394ffd3d49d0903197e2285e94f5046f2b8d6a30f1f22e43aeacc51a8685fbf15f154b4f8747a5eb485a408396dc2b62041d5dbf915615ae1ee2b821ce95639ee1ce3987b29733614eb714e999a64e52dd88d83c3859cd0faaf1785805dfe0bf77561dab18f81edffb460bd1c9bf", "b6f659079948eebec47c802688d0c7ffb98278435d0c2d8fa8c2f18a05d7c17a274ab5652d0839582758526df62e751d8f677947f585b2c5d8df839536e72684d5588611ca7f85c69b639bcd71422efbc890d4a71d1e178114fd252a0d8d8cd6605d6332d48421d43bb2df295e9334e25e5acff408626b21d8a79e8dfdf851360a02457d6518986084d4be0511ed03731ce95afede50b565ca6136e3e89f5c824ee82509d48f3cd32b5aa2581a863875d7bb495501039cd443f9bcfad5575ef905e6862351669efb91c3f9e2c015fe02e4fadd72ff796f87607f65825d4c4f97"],
        ["99af25b97c52d25776500cbd7ea9538d6e12b7cc654a798944a49a686889433d9764dc603cc6ce22384cf51c26ece0a8a3dfc8880861e117bae47b97c5e38a131b13ee5727b2cd11165435740b8fdd4eff1f8c9c7564ccf17fb5110d872712fc0d1ff4ebd44b52617ec9aecec2986ac71293db70f41daac3f44549bc803a06702afdac088643de6072daeffd6af13f105160ba2b2efb0d359bafebc1db8a723071ebeeec6ecdca094b46707c6e52250e043fb344c51529df9b59bc3fc4791d7c1b5b4d3392ec7123c457022a701f60336f90f0f47aa1380c7d886f19e07dea5f66bc4463aaf86391f2138a2224d1666657060fe57df5621f526ed9487a6c049372f67555c0d363abaeaa054b845c439ffae035200ab57e9dd7f2c84f57adb73213ce4d609400e47043141ab73c3bea8980fa149a95be02fcbfab599eb95a147a379a3e9c07050112982d2d1aaed31ab2aa206bd4daf7123ca946a3beda47ca4b0f0de69aa0ec4fe018d2fd862910e12e7cbafe710cb2dd4131f41b546fc18864", "95e2fd079b6921c6ffad1a3cb4829ed667c79d58793a5334876ccd254f1ba1684b124c29b160c3549111ec059d924cdaaa9e58fadf6ec86719de049c9935406c52dc7f793c510a02e6f37531a68b119072f18df623bba7db77ff0204e107ba1a670c7c87d7ea6ff822f6c55c8ba8b6769a042ccf1a160cd5075262bfb5d4f64072b3d9ea8224d4ef297eae1b1dc40ea3da0f82cc2ea899582011c27ec79f847262ec0444741812c58b9f117499d33110823d17b83fa0c155d425f255a12531ae164d3d0677f33f4fdda1903eec413ace14c535d03a1bdd5c8df6d340f8521004453c969b14ecc303980499791d55534b56425b436330a1d37200598a0e6c76256670a2706393331eb3d5e0e65a95ad96feef77a7bbbb90f60fb7814abf32f5cd07757a39713875e1dffaefd7c824657aceb8c20ecb16913843160bb28a20070f64b492abfc3feb1013c3a89f1030f8cd3278169a78bdda667f8fa030e6d77267", "a4067a8e526864382e69b75fdd14790677a877b123c6946f249b8ee21a027cd42fb01e40864a98fbdeede9c7b5c8e5fcaea862d4d17729bd4123907e15e917cf94e0beb5de56c94a5132adda6df44eeddc5d7fc3318571d490187da39d59037f6bc27ea30d3ef4ba71af73d74e5de1c8944619d0a206aaae80a77ec149755df70fbc50273bb9a7d40a42eade57e44f2fd06a34a019d03ca0e1228411e383262f2065a30297a1ad4b5e40576e7dfdcb9c456273c515203266a678d8d78ae00e1c0aef62f01bba1fc01a44bc15012b1dd41e4d5247051d24953215f2783370aaff42e2e0050cba416c837e94c9e8a531dd2559915d8cdfd7ad3b3b1c206ff9cd045377326752e7fb385eaa1a88b60882205091c8f6c40d41859f18aace3d3dc7a27053822e337edc31bb5646f0ac3b7ffcb751e59c2e24de784876801d5c5957c7", "a770750e9abd34b2deb536d6aea15a6e5a045fbb31e50fff8392d4126b5c7b057fb019c2753bb593493c0b3316dc6982af0e6c1164b0d4a5ca53287d8185404db9cc3fe73c09c94c5d8f69af379d6b0a8f69dc3c25e5ad839f543e7c40c1d30461eac4cdf9ac424f534dafec88003b7e30ad175eca443988e6a9938e532c9ad5314179d781733055b831dab4663fb69fb24b80df1d46ae7627ba091dc4aae97238ba8380eb04853e10b3d9b3afe217fdc525243990c0692124742d9d5b8253352e02b7bdae28a5ad30e041c7d2e4102b77718dff73522be7746b9b0be9604de7307f1405fcb9e31894d039f7dee335591565b6ad8fc41756b322a0c1b384a8a61c7a63ce64f42d0ed16881cce4c5bafaca77a2dd1050ddfc83c2e510b61b5f47", "8f665a8eebb7584f8ba80f47fa5df961c5b091e9f9edc5223f71338e43c0ca558744750b84ba56d254558d77c86f21aa8ae61a5d5fe692416ed6fbe426d6800d7b18fd7679ad21874211896fd464d322830e965dd45e26b64183424d51fd603f686e42278ef85f1541940b39e4891478f9e7f9504894b749b2e3e4defbbc32ba620a21020b8553dee8f489824f342ac35055329ddf1f55355ca4d7384c7f6c8d5e25893660910a12c6a633fcfe7817e1436d4eb39f1ed3fb07b9cd52900bd31d4cface524a01caa71c175e0aa7f4b6caa47be6e45d3072a1ea21bc3d7c512163270e823c0f27284d12d514a2a5e09c1c98e0ecb67249dd3521c63d2b0699b02d", "adea2abd7795e6c9056a48fb3eab4e8d669307cf8c0e6cd45ad0246a4fd43614d35f8cd24bb70852778b9339d0c78c41b3b5ab94b10dc88c12abe4d0a38429607f81bcedce0665587c810f7d6e48322eea5202c5b95dfc982712341184d605df559690039a458a64246a088228859d3c0089d7aed8e9d6c53d6f47f8ddec57c33a5b814aa5b8069522f4ae1bd5ab6f44451410b5b4bb9790ea17aa6874f953e03269c22c23e92bb1269b36d77e6fdcdf685aa19ba8f893e53747fa39ace8b6782c3c4310e35e057b9b86db2a66abb430c09da73d564e4f71d77c91c09dae76f5"],
        ["8c23c2635c61a26ecf8157a9c9e9f85e9f0147f7e03503bd3142ef48e7733d8732d2e95c458bcd898685fc8092e807a7acde7c3e40ce5e237f3a661a60df6754e2ddb5a07553f65640fce58ced996cf1a6ec8cb1b22c5b0014a6feacf6838bbd5056667ac19325a1ceafeb2c5a07817a4193a4d3fa99d9360be52f26cfd15ae471a07bb769926292785a229588fa9c0fd55b616e7d58f77e1b73b9a6d5535ca611dd71bdac2cb8fa8f3cb07f7329ac0e7eb3c2831628d3461e75308458ac64f01c7935d2763ee2dc2a837bb3408a5f1f488cb8397a0d591dfff52df1f8a2d6862ef32867a4e8569dd093331242965e2b8bf71a37b173cfa7a5333ebe11578e7d1ce63fd0d2bac95ebbba3bb3a329271cf142f02cb1fa1351c035957b381bc7dc194b66ab869441f436af6c95b8e6ec068b46f7b69eedfe11fe28c98b33aa664360bf5b805b21f56d50df5549456b19ea542d00d36200cdc8a0631c1cf7666c99611fce80c7c0bcbafd106cd57cad33e189ee90f304c28a82832ac03851b8e0b0", "80c1054992a261a200bc4aeae926c3b9488cff4e341657458028a5dcf29e5adb16c9cdffbd002e7a77f976ff5e4fd4129679aeb93e69420db0e517e26d409f57708ef3ee45066001d6d179afcced0b5b53791e32ee3ba7e6c8e6987b4b52d05166bca316e74dadca392e5ee20377cc9c5980b9a7b688ce96ea34b2145ddd6d8d2435e384b041d7cb45908f9ae187b368eaf98ba807e3f6c0dcaca6444966535f0d49e95cbb72f330e8440b9711252e618edd8cc2ec2f3248728aa7f92c60b7c81947282bb480b4c6cb10401af05cafa4404c58b6e925c046c1f266ccb178e81b045858270835f149d7bff802fa7fb0276b59f239e4f3b0ee8bf205a41f4194da4372d7fc4d29408c29c06c4c92e7297c808cc20b67e4b65431332d9cfbfbdc652fd6b4c95363cb07b5804cbdd80cc76beadd8fc3737b1a0ed3b2c03dd13b0ff55b865da0853a7f6bf24e4437099cba06400f063de83e15f20ffc368e237ad482", "8e523ef1b84a9bec9ff18ebbe2cbd6a63d2f7fd4fb5f25c113586d90d3f8ec3d91d3c93b26380d3be3b3321c3fee04f1b86184f5edeb8efd67ff57db41033010b09692ae4a163443293bea2d3eb7124e3d75ae3303c967d4522a9dcbe3f7f081709316641523ec94d7f1a4fc1bbf7581f589fb3e5457788b7536926c1ce3eeb34f80a775e926089d8214efc80804d87f9f9f4f9a703222ce83d7937ea703150b6fef74458e82cb07d0b0dd6170f29ba3d930343ae6920b71b3c5f09efa81320d6ab742d780fdb16e0fa3818a635594bdaf0084cea67d271c81d33675035d70291c4f15f3615320438bcfe482397373d60b7e0b166d4b21853a9d549488e0fa7d3c94b05bd7bb9dd4f10ba4865f9d8de7288f05849b77a0f12a68c701c3b840e3292baa6a5e23736a8de3d257ee2c18729e52297c8526f9a6d989a3ec687c1057", "96ea25a818305586285434fe9668580873d8bec33728a50379b64d118fb19f7c5d4a92d95f208a873b69524893151818865e8a20748cb4f6bc0b437929e07dd7d6576a8de07a6497de643164bd57d67b2333aa1eb269de2d0c4bd64065292c7d66e4fa2b782d654c8f39065161364a6abd133767633a571dc424e6dc672f9c0a485be570970ea66100e7cd15c81a10f1400505f7ccaa7f106acd4a710b7b7f40685a3917a7d9ca18e442b81f592ebf8ff17a36c235381aee45f629f1b449f9b4478d88414e78a2c080836af4bfef53dce3b131518ab36f8154d95c6575e2d79350a57956d61a2da0267d7b053dc179e887b1311a7a21228951afca6a2bd64b15676cf19cb4c448eef81c5a4bc9ae140a451c174c162ee02f3b2158bb39156586", "a59cfe95a2db194b8606c176286c456c3cb3bb8869997027a1dc732471b8974f309cd99ad3ddc2c821f9b3272ac5da558f03d3c8cbb3aabb6c8d3db8d12edaf0508222b79dbc8e10adbff339e9e9161fda1223feb437992c1d089eb611917e99439f3894301a4a2a859a3e29e1d2efd181a13768a43dbb457015d6931aee6b780de83cdf9cbacde198f353101ac11c0087b8c8ed73aa826afb888f175fb7741826b765160e000787a531e44fceb898a402e8baa2046696c6bf95676d6f5d96f2503542dad184d6ec612e1e2bca4aba7c26d35a08af16f786b1e043a41eb65026498ebdf2c96639819c9b52f9885098b940623e783e9b1c0156646f3953768a78", "afbff23e5ae9a3f040c884c1e6a3454556eacea9f516d702458024c3ce7812051ca4592dd505324d0b06592bf775fe3d89a8de161d86862457d2387983124e4b895c3087dec626f339046bad7d89a55235f08e756fae4b49c3fed45c88aa53e54ab946978d05298cbb36749608cae2852333943681f16a202fc43a7892f499fe222d9dbe640bd5baac3d6302153a2c11ee7ec2b800feeffc97dd870a9b9e6d5457515dcd440151c2c5f3de7379c83188e65c5e73271a4daa49352c31df30f54a25efe8acb3da8f51a4eba47aff84c8c2333ef43d9955b4a8fd35674cb3d3254e"],
        ["8008510112d3d464204c3bfb68d3b0c5d2b0fb08b1db46eae46c3ea07fab3c27412610f99e35fa998beeeb1dd73e135f81f8f5107503197eb3c615d6fdeb935ca4dd53e621795edcb4a0bff00bfca621dd509edf04a065a72756223f8dd62ddc03b8170958e421445a56867dd3a14f4e1ad13023882f0cd3bbd2aea5dc94949b7338655fa4974d162e81bd7d2425c8777b4f3183c20d5171c08db88f06d54b0f466a875f8d0ff6d654627c20b0d4652b7f6bf9ca3d267dbdccbd83fe1415bf7247fb84b3e71df3659bd0dcd9e668d8b855921c45092ccae3bb84f1dd2aab93a803e4e9fe64338515f2c9f15f702d055542a68244b270064f902562157a7fed000a638690d4b4b4411ae7c7fea393b0a7bd720fcc7361ce066b2e1c65a2d57add32d660bf129decf42bd07b5d36b1a3491aab8ac93300cbdf93c243da42e143eb6cfee6777dc333f7c145c5533d2a0eba463c1a9b4c50d90b4f264d4ae4cef13f2139a5aff753ae753b05f297560b014d6cf363b924f424ecae11914069a08381", "a3bf1b64b05b4d6eb216d20c5c8ac8a184b854fedf8caf4013df11d76e4c999d4329f8dac6a7ba5761a7ebaf11e5c9858e5467a4ae240bc287fd276f9418b2dfbf852c5cccfee953a59609439abdf3714fdd58b1223a845451d172cd2a21a9053052c2a2db2e8d7704b73b24a273270fd93fd770e49254b94d7b5697cda7262a316a14dab4652c14640f62a618280bdb584aeee27e978e94a457ca0eebc052076b7c652c1d4c9185dd92776c813382e7bb60a5b7ae7a0b9ac488586fba8d66da2e4b471a030c8374f2ebe02c3b58286d24b4dc7fbe7b09e89d6ba0a646046f7a6b323b2568b6d9c6866a939fbff9bb129b0aa53cef569027ba1158a7bc90d9f56de6c5ce4337b0d8b684a101d78f07b22c5cab7261045b9974a08a68ba15ff8b6f1bc55a0ad2343a088bcc14bb62565131cdf4893976fe560a0b64c53d5a7bab2a9816a6a93cb377cd618384f55471bd614173376e24aa8d984b9ff9306c6bed", "b1f970b0f2bcc40e405cdc5772f75569dc304c8937424b98851b16ba2bd87878feabf2f474f80f537cdc140d09b7332cb682f56868774567c016d0258bc6d371ff14aae77fd35a4aff1db2be3b812bdb05ddd93fac82ed6a801c3c7b6c4313fb6dffd323cc2e43ad74dace45cd4469c89c3694767ebbc58e6839528c858fc6854a89e78e4b11def63385a2ab1a28221202f2c1967393225b0882212a4c83d48a4d816d696d922679114e237fd18b0b59d57e3cc39d318189afd581854bc0e37556bae334c179cad9a5367c8f67ededeb74e15d9d46ebd46e7383b5f26084a85426c9f174314f25573a415cf74a6e735258817291757a986a74913860ebfbe90803590572a6a935dd0a090fc161b7f237eea18c5e0253b0c01713ddef637e9ada6569bc701705b2823e0f40c60e4976aaa924b03da2774cef411ca033636d5370", "999fafd87cf311aa524e8ad79d95b74391ce39a2488cf2e6752c04e667b2985de231631309e5b834baee79a12be49567ac120d3f92dcd9fadc7a8cde1b5989a61115d8a50d77c1f1ed84033c9f90b000d9e917c8da15a38ba625ba5a7b64809c059a01d6497732ebe2ea7e80184e6d7cd6279f6cb4fdd0c667fe3b5a5fa47162388b14b476e5ddfdc0b523124872ac1b2da49e05f1c5cebbb18dd7371ae706cb1af4a814ecb91edec7ac03db84e3d444b020202acbb5207246c5de8860aca1fd6b80bf7504cdd1361dd9ef3f1132d7a9ce87637cd70ae889564dce2fa119b6ca33169b83efd00f03ef131cb151c195a5a2713a0a3222f2b75e7de2c936448e336862b01cb57accddd2bf2a214278272aba6b419e2a1c7bbb8585ded8c8cc9026", "994756a9bb7f477b4e80a18ca15d0f5614e4aa0a37ef19be454ea9c97c612a0fe2ca89edeedce09e34cfc7c75afef0b98df036d64eb9b572b079c547c9c1900f7f6d3aee3821972842a8a51b9f69a80512cced6057438b4aa3df0f7c32c058d464a1c9b6a5e971231ba194bb1596fb4e36b9808bfd4576c65a071663b02a66ca15222382d8ab100cc7ac9ff72c1cc06cc28d61f031e92504462f3aa27f8bfc2a62d50b233460fa8bbad78e2fad836173fc78c5fcf7b4355b58e70bd7bfa4e5e2545111ef8ec17ad32682138d4faf3eaf26f37b26930938c5589ccacea71d43de70fb1a2e68b82f585bc3c46dfe76a0d0c2580b7dd069cca96cb901e4e882ae90", "a537221e1f3df175acef4af57c71887a2d9a79385e6846c28fa0ef6866d74a591516c6491274c45dbdde5b11d6e89897ac8b9cbc0b3295a1b5bf22f61abba739aaa94c3653fb3a7ce5b7c9b3e21a56fbd4159b562a7163c37d13b9eb0833fec71ae410f956ab884e3cb4caedf416d9f38028265f57c435ebe03653dc8960e79530947a05ffcfee63a46550d4f7dd229a448603ec850c16d3f3d4cc5dc60f6ed7656ca09248041af0fc5b42488314bbdf7e8bc4a70c53279c7724beb7c171ef830ad8764283fda56dd1f20ed1c613ca3a0bd336635dabc435d078d3e7c1bdd76a"],
        ["b35c0b9537aa1cd1b8f19507ae54b6e48c531842f6eeae948629e6438136d7f41f992ce44a87445d4c57e4ba9fe2c5ac816a2532fcf1acf0abbd9e0f66c8c20925991eac5ef3cc329de1427bd25b11470cacf034e4281fc16c91e38994327c832a3939b5bac703c37babd9356f51b083fde540c0ab44e8d60905ed1091fc174538a9a160199c3ef55a4c9a1e35fd29188367442b7e9c07fb7337edc0623d3b5d59c10d00e3ab57c761f56090efc830396193863c056be9158198cfdf6dc303fb6673a51648d749cad83cea6c2b15bbf163636bca18a5ca50bb46665817aaa3ed5ba732e80425313ed457a40d82e0c9f39e72518362a041e6a223e172bf20cdbc6cef7be82f37c76262b8ec758991aa9fdf7890dde80aad6189d854eec48dfdfc421ba231032aba6b9b1a7ee2072155c15e81f7bfcdd2ba2dfef61bcf3cee027f55b552022ebdfded382c16e3b679e952a5624892193733da43fc5f3fe1905ba56bc746aa601eca1d0564982341150daaffe529c89b590662dbdc130d3298de29", "a11ee9d9d19b249f16f31d1400037b86e2742d31bc691bc6f80d1328d5710e990e33294f296e58dbeca1488248d937b4a327591261fa4eabf95e4d08eef1c9fe1f237faa1338e9ae12898dd9a6549cf651d392ecf514a8083388846db80c5aec5058719f90c3361cb87bf1bd142dab47aee9bc3e92d6e6d4708c0227a52337a16fd946202d5310e48403b65833a701aff4d75962be5e91acc136c5cfd5c218544f1cae010fcc3d28d1b0c97be3aec643418ee3047fbecb1b1c23fcfc137d09065b1c220dcdba8082251d88c4f7d9dd6bfe983fb33333b5fbd14ef7da132ff2503ba40a1a458f6e83f02eca4c63abdbee622621ac38b0e51cf9772f8526944b2455d50c896656baf968222347dbc4babe3f86e86d9cbeb80929bb2156e30ff36a2d8fd6398ce8d805ce7dd6153b5389f4d01f2e2172f12aa601cd7814794d56570d75153b84b06bc2293c969758101f0055e40d6f45a927f5f38e79a1c310b24e", "8bcf46a00d47e97f64c402a36f21f1102e2c1679006ef463c2f730df88443fdff414954e7825615cf193d69d0f13307099fd22ba37c0da9179a16b7b19443a4ce8983beea838f393fddccca21a683deffadf21e0c8a48b75c2824be9b6719e1e68d249d46d096848c25e5245b42bd03aa1abcb6d8352d7bfc9a3bb1fdceb8eec291c7ae2a28f6f05838ba8175728ac1fd840d6d919d15f05cc9fdb44b820a7cb06c23c7764d695ae449bfaac54cff8199553a9aae795e99721f77780e9a5d9653501442cdd98de4e89ead2a95dbd51aa13cff1075d4bbb82d14a6bd6defef16408f4adf9a540341d51c7f63c2afb3e2023488daf100bf244badb2d0469d6186210f1d75cc1c47b6d8f24905bfe9320833901080673d393184ea4d6bcb17ac32b38fc0faf77ae2e0d84ef90dad3a577c5f0741b5ea1934ea089e6d4689f0161c8", "b48c3ef5270c3cf2789e12f67d9e07b29de3ac35f381d32d7c277e7018ecdcb1e5e58580c8002bc67a1ae963e0d7e3afab27da1b546b71f1caed58aa24f1034bde517ac4384294cfd78eb189eb059e099aced0b6a386f64b053c8419562f40605040773a770f01199ca7f0cb311b52d2292b3425d57d1e091db131d04f78afab35ad8d0aa37d79cc76e1d7560a34ef5b8c54895e301a504df096ec43ca88347c56a1771e089b0b3df7c7d14bf67a94af11428a2d3535d75a8b35bde870248d5e4b7de674778edeed8838eed7b563842eff477bdb51040868e3affea930c73114212395e1a3fcf8bc1cbbbae653f1984bc1643973f26a262464f32507a4046aed6f7d909afef64cd27f14c64da51e56ee60737245258381405913ff23bed9de15", "a2e0eae988d4d6d7f2d9eae3a59eacbc9820bdcbc77373c5d015a3d2f7a67ff1026fbb76aaacdf4c4143395f8a1787c390a08da7821f8160b443feccd8bddb08c1c6e00b45f293bca89136dc1108599eec216fc53971735877db6ebb1cc0bdfc40c9b5a12ea7e8f8e1517c14e5983a6d74c3079ad19ecc02766038652c8297ad0d666e8ac916574e5b4ee8ffb98d8d60c9e2002794f70af6d84c68a83cef069f04400d319247ad1fa75471fdf0bf5aedf17d103f049b43700646dd9483589b60310118c85cb7b9ba61c098748795abace705b060e5b9dbe94078348c24327a692436e53deb55273af626ae38ba38417589c7534721fb64fb1acb85027824f810", "833d94776f1656ba2465a415a176935d075d1b0cc52cffccc44093b85cafdbab8c0339d557f6478f88c945f136659d9ba055fa14a487368c0136a183b4ed846fbcb41e52ebce256200bf1366fc84e7590e7c1c869c04b0fa23c16d5807c1633a207842a99189d71174c03f1af7ead170fbcbe77455defac503c966b0e6f4b7ed299cf6b894eafc904f368d8dccbdd7bbd36dbbc87fd1ec0a4f88830b295ec3b165eea14e16955809a357273e1cf8cc6c469712efafceff442f07ec5ff97cd78e280556185e36c9430952554b48a0344ceef941662fceb750bb7e5b59b479d32a"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs,
                    None
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["92f26d4ff475b43ecc9526b3b6a319a524e2ac38e9d737697266fcf3a6f339f1c3fa69cc0b005abfcb584a946d9d075caeb074edb3e7debe6b2222019602d53b7949dbdbe9208ecb8b18bb3d921f386b42d00adf674ec91f3fdd986d9cd7a10b2fc96a42a4c76eab606abd9054822bf2640851a3baaa1ef62ed586f97ae839816b8550dfc3da00a599980556e5e30c8b14f4e6b56ba526728276a15148ae26a30f3e91476f21e3920429427a6f32137cca1b4823d9e57f99dcb79314cf83445c2f8fb6b21614a9f79b48debc0baf6ae60cf28f7e85829b9836f3fbef70e7cbd12d502b333b0bf79cd35a4b96028677f91c961fb8f67f1e3161fb7ce1daa4bb3c246b459de3d5281f5fba03e7f48bf0939997ce91e0d502973e2d75473e920fb6359026e275b410d0ccdb4553253a4e0eaa84a0747c98347874f5dfae875a60bb214ae32ea1f60fbe1d9ded455085a27fba2dccd3327f098d7b854d95e1217a1f60dd6cf65f8c0201463aefaea62712c70120cee864beecd7cf0c77541aab92dd", "8131d19a767fb5056548136a1fd2d287d14f86764c02161a9149edd3d8596cc42f1a84008927d1a0823023f24cb0a427808422d3ebabc360d7a3e08774f8909c682bfb549ab3d99d3e867321ce9939a0f4d38957111cecbbef1ea2c000cb86f02c318806b88ead32155260d5c887e6ac1bdd49e46c12f0a28763dac30b377ec730170cad301e97b97413042e3441b43c9866246d093edb238d6c359893af6e1f19de643ea2697f13b477d97beeae301bb0cbf461b4232516baa7ec64d266a9b948de9d3835580aa7480a6e42b53967926ac2257bd2e480cba013ca98e0fdd1ad38e1d2ab4219db3b0b1341634e379863a57ded70c6d427f301c533015a545307463c12039c870596e9f9576ca86d397ed4a79eaabbca35abbf6317195a6288c85fa13a86d80242dcbdf84d0e5a4b098990bf1e844dd65be80dcb82294c9d15bc64cd57eec060695158758db6e427be0b44633273ea18f26f15f2f966b7a5f2a3", "a2f0d1264e1edbd93a71802c3aa6c4be38fbc105335260f649db96c6ad13e885f36a07df6c6cb957e687ceefc905d184afc5a95c4754ddb41aa4883805c57e1af2b5e98844167d2f71840deee767362c741ba45cc3282ee3a55a28e4b74dcf7448fc19e05d7244143a9f70c1315780fa3a068d6b72ccb4fa5ba459c0807b004f0d4e2f5409d35c25ae58ff2ce7ed9e043d6899e1e0a698a24ad90b5e798a68205593425bec8fc1e789a70de0f6c81e666ab794d378e11a6426438e0ea477844e01ef2d328131314be5a385b45cad8c2ea41fdb6e8d672dc3d82bce90b7429ede48b360209fee8107d844cfaf3dc8cbb35c5bf7cc4cdc439f69723a301aeba4794e664832b8e9986f139eeb152bb90c9fea37c7fe6a286fda2c7a1bfea4f2dc344e048300ca3103b833a8369ea4cdf793892c8abff78772f1df648ebbcdcd181f", "861d27ccc9a8681b0eb5da82f3b3552b8482486bfc872f90e85aa3cbcf92a094a33e1c5bc897ab44075496a69664e3a883703e56571de2a926aae6a12115aa7db1e7b19f5d29291cfdaf693966c603a81e7eccb91a1b8e53d4eb189f6811935a05e46e973d1a1de11ca91bbe85b856cb0ef5da7755370187e66659e97c52f36f6c14bdd6f4a3067b41204a8162bdfda0e8c58c7705d39c361ebb946bc724ca7816837137b891efbccda85a5db164c87ceda6298d321cdf80b447df615856922938e9f08f48f96216d843232eae8efda9ae76cf185d20da72be1cd00fe181cb162d85d7c39c52041dc2c6a711335a60eb804b736aeb357933a7991e6014232c4b69312f8d3b42cc823faf9eac45fa42e00ed9b9b2bb15d2d7db85e9be62492c9e", "ae4a8b41421f54e02abda72aae9651439bd76ea92998e1e6af0e0a2cc78609233dc2964377daec049cc9cb0ac9450e63a544c17b36af32811ac53918b2ba20d764a4e51ddd8897bb608ae34dcfa968e083d4b03aa5b6f2f1002596aa6aa4733b2be59aa67794653e5259be763eb702854734ba9aaf1f2f9a55675efb9e30ee3a10a824a1bf217f81e9d098a548bfcfa0a1d0d1c9915771518cf0da1874f3f3574ab457a156a0a525cc751f2c28543301d4cfcfc52cf0fb0584bbcc9d6eed1dd42aba1b84dde420b3dc63993a8618d322670326df76ca9f35a24088d800b7c17821a12aaacf9ee1946902246a662951643dc9fbd4eb2956b5fbd1b8aeae0eaf51", "ad3217bfaa1a5420a81b64437bc3f797b75b51d8d3782cf8c136d77f29be6bdc7045e51cb32a65be34a77967792971ceb9edb7d24c7780f3b2a3d22683665034a646bd5dc6f18c81ebf65f3f63448de3b66b493e6d5a3e154d951db89459f3aa6fbd3f4315cb8809312ecf6e4570c4151901ca6aa0ec0b47c3379344af73ff851f2895c8d86a41565c716390316ad28a9f7d6bdd19dfbb4c848982fcc73ad032638f2298ff2c0728e3bae3c284d7b6cb584578d16e8a409ce468b53f6adda61937d9b417b6f3fc2fa9d3a6d6d3b8c5ddbf28e847887dce343eab1cc1d8543a7e"];
    let expected_proof_no_header = ["8cf1234a49cbdde9b13b8d89dd8b75e2be3831f4ac537f0d2a84c7c55b9a1676f46a13afce6ad52bcc5f9817803ff3658e73a0ab0c1b29e420ad6edfc21ea95efa65b5c335631b475899cc522c36a82f2355890d0a32479829ee55b948400de503575e5f60c2b7c9f6281aa50a898c29da0162aacabec9c0385356304be5f6603ae8cce80b500eb71d1df0f6079790dd959d19770fcbeac7a3a2ccbaf50077b8180e061760359d5fb6c51b9ac02b20e08d429c6af2232be8dbeabea99d282f2e26f53ba32d2412a6ca838e752ed20099d5bd9333bf77554302e15a79fb61cf6c36a9c97ea75f98d438babf35676400fd9718ef8a5439df935bdf0ed693d7210947acb07996a34023c18bee16abca2c91dfe1980a18c20e0cc2f0b511811e27110d7751a2b7d176a0adf43a2e548c62f17689a409cf1f206b432620f017ed3ab8081fc0952278cd15f4f8e10ba366c89252280ec03362c38e99d128bcea20fa450bb1496289ca5433e45302924e36484b01d437a651ec730375d5ff68d8ca89ab", "97d6f5ee055ddf6d561d2dd3a7b555232d8df14c95a72c947a51ad564bddbc9175e022d8da6c05357c1f7b262a7bcb28b9dcabc592943a47896a234a533be1091f08f932a2f5ce1e1a81f7d70e4694561325c7d594b8cc5c087c1a0ef734d61c645a7b3cf24d33b850b6e3827da34b6fe731fff363174a3b16b4d0655711ca9170f862805420d4b5229c7cb909866251057549b971623c68a6ec9a1c6dbf39b12717ccc28dfdbdb1b13663bd4205b54adc297c27446b8ce7bebfbcaa837cd3d664e9ddcee9bde064e1e2718df71a87ed9a318ad7a3aaf77cb389cfefb0c1abeb232d8675f144513a6997c8c3a00951c08e438863a22e6e2d7c62e47dd11a26a7488bf95694829171f404ebde21bd05e0b5b91b73083adf85586cc83dcbe1882e5476ffb45b0611785f0a91424e82671a9a03c75ea22951840be5cad67e27239d1f1386456a2c98bef629533ec06cebca4d700588ce43170f1ab77867e57e1143", "a1ee766dc82084428c72a03d741ff8ee0f143c7980b6e226cf52cafb5ce9513bd2352ed38f03848efad2fe4fdf7edb358de9302f2f898b7f94cbf1ae4572b1acc0e7fabe18753ed5ed7f4e82494beaa830cd9e45ed9affc60fefdd08417c6b264141ec4dc6ae70ae1e4d242450f7a06392a8ce1c9ac7d219fc6e0712505961dd29367b40236bd93e8cca155c8c7195fdd0e06b5624beb003c3dfe86211cdead10f63774d3942df5f083b572163699b6f808db0c4b46c54d74bd587382d6ba4ee2f56800f30c5d2561b4e674b8e93eadb807dfbaf1a6c9aef43521d0fdab252d167a35b85c47716700cb0c349ed687c3abe567ea7cbb0da88ad1bc1c1e1c8733d025ad02e73be498aea4d235b138c7af89780b52ec9c202f0472f2f3dd81cbc155750986f561283aac1d241791c591592ca97d15e41b960821cdfd535f77a7f23", "906ed6487211839754a896434819a8ad22ec743d289c786b663b3fd6fd2ff9fe6a67ecfec2a6e6cf71950a04c45ec1f694bdadebcbf7cb86b8e827ab036812343aa160d4719d1444a1df34bad72ec4899fb743f8afdd3ff6901173f12e96af2132a45f6c87122433926e0d17ccfeb53468b08be87dd157109d9bc11df76b69573d9b1213bfbaf3fb6117b566833b7f111adbb0260931e8601bf15bec19abb8497314786707dea192d0c1916cca9b8972cda8be6c786b7109d169f015fbb825a52cfe817ab40e70bc502ebb881dbcaf921708bb5dda7a677acac2b7c0dd87e6d34700ae676343a974994860834f25a49f97b65f36ba7ea12c5ee94b9304898375658bc9d2d33bbf82108791a80ed2d175c78a552abd06eff91c5bf8955f8f761f", "aee2e6243d5ab897cc574487e86f1e5b9894605900e285e12ceb9342c0815e0869b3bf06559f99b85250b2c60287079aa4bc1dadd374bed2af67928c543397a3c26d6d7bead31eb2339bf787d7c84eec03cfcf8d49cd5753e2a6ce47bb660dbb22c62efe94dcf615b3ba8e642320d089ffa807b6612aa8d1b0e8bac1943abd50451539c32586a3c91e28783655f1a4899d4aa2c560b39d02668ce411efec83a339f93c5a3dbc355e676cb042fc60155ef44455a13205da79e0a2b50d82ff1fbf0d2dbfa8fd1dd75986f030d80d4077352108f6967fb36a82e276c43696b000980067fec193ee938fa4d0c04acd0ef1bc1ef7a2f03d4c6fbe5eb5270b04b1bfef", "99a7f802017fafdf75b58279b38cccf256bf8eed848a1123e45720f5d3ae60d6855ad20f7c42ce7d4128b471e2c5474ab7d3048519962d37495bad4d9cb063c1dc97646beecb6b5889770562e79fbd9713667999ce46e72c67fecc83c831c2ec02369ba04acc3c2238ed9bfde523bb0197c88b41a1726c5f7f8986c4bfa1331c208436a4d09be4705e572e815e1578dd789719e664a0cb39f6d27b69c2d8c08d2272aa23b3ee9f053868e42922d1526fb60ce42a37cfaeb2f98f74a9b1f7be7546ce9c4936e5e067a963b0d4da18c64de29df858fb702dd149af41b22bc4aee1"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof with header but no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices,
            None
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let z_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        c,
        r2_hat,
        z_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_bar.to_affine().to_compressed().as_ref(),
        b_bar.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        z_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let z_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        c,
        r2_hat,
        z_hat,
        m_hat_list,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
