use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["b373d617fef73f41808a9f53b455b9f16fa02e7955da5a193a0f9846b145db54c25f5602ca749f1009a5e9ff17236dd6a742d9a091eaf4a34733f1ffef17e406a2cb886dd135816efd0ab7efab6eceeb40647069b52cc6de10c4f044bb9b9fd882c16a2750309e6dc84f997ffdfb0d0ee68c813723645d41ad00a1a5dfa6e882e6259efac8b78e84530a3dddc41c933c68a7485011cdc3cb5327e7e1f4f1f89fd56efa067479ee50194022224989ee243ae97d120bf3883633be548dc60fe83727dbad50e0bf1d7e6b3312eb505927884727ddb8481df5042602e94519e0b8b3e387c7d879fb4c8592bdb28356045f4865dfc18751666c996cd79fa76794835a0b1e463bb4b7a7fca101bf796a525f9137ab07056af89b5b5f524a80cab0ec9d8339f43c16545a73379f238b30005fe34940fc5b1b0789aa93561df349816b8df61363db7d4d0c2b299b0bed18977e9f5bf83b5217020cf8c1209289265de4135f923f6f31a14af8da5e65e45e9b2c7709bdaaa8088db943b1fdb36f931bbc77cc1e57783b148b8e4cb9a3e07f567b8548c68e24b190480082094d98b5e198f9a70ad0c6e43b3e22c3278f89f79142f6015e20a3d23e26ea240cc24bda229f68bf5442b7c9a9b19dff41777a4ded63ef25ac0f4d5690ad16e55a14fcc2bf5ea8d3766265dfc051c7d37505c932bef553", "8e6368a26394898d0c07a28356edba84e6cbe81f832d4722f42d5771745f8eec2e342062caba723cb443ca86df6268fc9909a863ba9f31ea650446bbcee9f12417f72863b04d65b86982d62ad8f05940339a983474f3b0ab93df2ac8e3887033aa6b6721e02d34ea1156f32853153f97f5077bab716464169e3a62d12e5aa2f35e6aa1e9941a522920f65702b6ca487666838a648fde9cb03c5af6e6de8c975848ea8e5300a5bc14eefb04cf81e489765ec840d183f793ce11ae13b7f7468c4225ec65024ff7e85fb7ba02374c43079e67aa3a3f26d4b809a7dcf23f8b43abc6a579415775da8749cac00783760ad33a5039ab6983de97b542820b2bc6d22ef8d7ded7ac87119ca4ba1f875f0c009401589372df5285c1d3dfa5461968550493247dd81f2f3457e609e405b112a9e3da073a11f70238c4e0d1257c25d493444ddd202a1086f8d8a91f06d7a97c79e726669c0860769ba6f9e3d456fbcbe3dadec175d8d806929c8e77fcad01b2c7f73b1b9c8d9fcc81a63c5ea9834bd6203965f57ee1ebbc921305f03689e164c5b0f31e7955926ef514845062d102e394976e73fbbcdcbcdf017724b7704a709bd549275e7649f43f016f90596fc12ed6be6aa86d36f13fa64d06c5f5ebac06dd32a1", "ad63ef2905136d8e1790a8db7cf6756f98d259329392a86c2627fc00249ed21db9dc35de9f6888982e88c9d12865c29ca9294d3adff43974d25643fc28ff1fb1b9e2ffc90a0c99d518ae69f9546bbd1db187b0c8f74d408d3c7855f6ff740a33b3a3dad0b2f9b3aca1dc0aeda2434ee5155bd814722747264f6347d1463517231238b428de05ca1f600bb350b88c5fc4319b71ea295844cb4e086291869a1d10475ff71d02b69cc4f43ee4cf235126b44fd6a28c86fea6e525764eb88a8cbabdafa79634ac6fbb9ea0d268c25169de6f4e88e76849f42a96ccbabb9e095a9eca7a046d401a98eb1b6ba193826c1312d74cb7b0b6f01ada93776ff9f948899b33e250cd71126acd3d0881c5bae9cadf191f518344e1664e85b59f9a1cb03e40ba3102f9b072dd43b5af990c6c02d66713733ebb016e4d18787d00bf15889fcc6bae9fba75454008bf6fb78325852c04b85784d222a59c60c5dd2c6bd967cbb78f2242fbf2d2932684f975316ef038b9f700fde1560afb6bd806d3b46849f4bd5769e860c30cb16cd69977af4ff27794250f3d6a6c0368d8440131ed717624d00ae7c5cb024c1d9bdf2aaf8ee4db31eb42", "b5946058e84ce268b4ac250d2c59d9365e3ea9d9b6b138fb4dd35354e36104528549faf8971ee6a5ba9467516b04914eb0910ee515f0734961126c9608476b60b5b4a019891bde6584f49b682b2eea9069d7ba7766c89bc867a21fa22adf65d68dabd9763e59d777d6e589d1634eb57872a3a72a853e08f9195367f01a19a51694c05a3e2fd1dbb85d385da2cd7bc96a002e7167f7814b63a2405ba53925d5766cf0a5ddda25e5fab74a52711cd149026b8f395c4944a417dc68843f89175cfae9b6ca1128a0b1ffe03d218f1e3b1eb66250793591f1007842676133592ce73faf9902dcf639fa739331e7d592ed5d51443350f48d415594e94fb1245267e84268c9984f947ba769cc5bf39fd135c1d9331cf681bfa48e002fefe0564a7492de75cd63a6bf561149a1d95eee14511bfd5baf8d2ffcabdd0b560e4c289193ace19357a175f4b61ce74b75d3b8dda0ebb55e81f4c79cf18ebbb287fdc2969cf9a67210685233f78ade8546eb347a205e1e452de1bac0663b8d5b097c933f1afc9194858655328a32d3a5ea4a4adf97e628", "aa77c2e6e9c8be43e3c612132a881462817b01bf06f77892eddc4f6528deb4b95f42cd8e5b92ce6982960d31ec0b276db8378c4cda9633b43e7e79528aaa74afad4969dbe3c694ffc022ed9e1516f0d47ca9d3b9ea53e15aa415e035e8a99a2b84e04b1318d082a554e90c52b23e5c974af9b7d6720a1a5c790f218e33b8d738e6c1db4f9db565cd3b3cee6874aba1db29670bdfb07adc10a7ab7bd90d09a4e4ee4da6ffb410190a17f72cc95b49786e6be8799383ab3ca9ee9d393da7ce8f01edfd7079fa055999aac0ba645409230a1fa609967b14e7bd664bc0f4cc926af8ebec61bad68ba967d4003d6d6411143967df45e5a6439994501210a74b448709babd65641d73bde2ef7b02e72740198312db23d7fdc69332f93421958625e38275e0a951293f82eff8da6126ede7b7334b8c678c5fbb2497e48f5427b9e546033de2928e9a819ea699a6228dd561dd916609a5e1d753293870ecd8e49c1206d75de693c0443ca30a6f68551487dca10f", "b3690d8ae0f8601fe151186d2995c6cf2241c4c5b8aa10e441100774bdbb9ddd5dcf53cd142f805d668a4c7d2b089abd87ab5b177f4bce2f34adec8a4445a6a9922fc73aa2e56a91fa7f1c9d69caf041d19f4bb02bd83194cecfaa9eb972bb9c887336ff57326c1863007451508494f428bd339ef5c4e4daaf51cd59575ccda03aa1c079b86b0fea10abd2ababd2f1e829c2e1618ededf51ae01d96ce01cca8e0b6bf768c183fef0ab6ac0b64c459d0d36f2e50a26d83601da7a583c498d548bf6c72f5698b943e78f93d3c8a1df324f6f523bec0a41bf684855082fb92e3a285f4293c299978d85cb597c54f868703f26703c0f2f61b5b1f7732f3e6a5de985666d27dbc610dcc7acaafd8cb3adcf582e0168f0c92d333eff470a959f1ea4f19630ee659169d0f01a4e09a19e7bfd6a50ed63e0c78e7d8c6c1ce7ec22eaa0633593e82a4b30f9c69e252236126379b7"],
        ["b26f31a8171132d2d38c68168762cb71bfbd3cbadd831d5c775aeac41f7b240c86d138bbf25c636f4df6dd9144c56292814cae7172ea042c6f49b4336d31ecae67591459a0305f274ca08e0cf7a089447e4ed7afe5f145c8958cc68d90d4a6ff92fa8a7158c9a8fb1504096383a9bab11e38bb4d45d30373a10c89f491f0d39eedc3cedc860743585940ce5cb72faf5c4345e9a91f8d10418e7d85cde9c0ef9f8b436e7004082a652fe3843613b09049419bbcc9aae8f91a60c2db0046018eabc3b1a39a67f4e3377c12da917913a8cf29e02217dc76ec07902f0520c0ecf93bdbc04409cd4de991e7476f5e92457e3554e6b86909cac6140a3fa00ecbb55c8affd13d8e6460e31bfda3f025f36de76f035151ea393ae1242e4f13184decd45f025ad580afc13194125b4dd2818d014b50c65634686197e003cf994a7d9187b7f0206f85e8d8dfa05dd8bb062ec39a9767fa0a4c8edbc5ab971adb3f392b1b2ab38af41f35b6392a65eb568fa730380471db0690667d390381077ffe003f8738454c40a93167d6760519780ebc29fc6d42277f07abec5533f27f02312a5598dbbb638de4607097383fa923680a3339c81499e6f882eca54e18fb00da69f4a49f403387df3dcf1ad75e3b5f140596cd375bdd915e85b4163f91caa758d38633cf704f731a313041480949a3ecb4a26d64", "aa3b3fa34fa61781edea8755a194f42a557fd5c34c12c5424466d7fe662fbe772d373dc7eccfff4446cd89fbd05ac70f960f371eaaad82410e8e856bb52342c674482df9a6d993f82126696ecc3cbd3fcc7160753682e6eeb31baa1b6f51611c8f32a7bcc913e2222e6709e48e06c9f684569a5f5880d5212f2c6113862586d0dd5d735b73a067d58c2149c1cd21db551b130a490e4b5f5b9262b6a3742c0af43fe32543540b81f23815b7f112e9c69c597cb6fb9a5d958ec47c22d35a7b5ce10798f5c470eae45fb0045d173c0edd9c0aa25f7acc7fcca3424e08a01f3ffe52a821cfb76c855fbfa178689803e30acb36cbbed182a8819ed0c405de1ccb742ae546b946f5e7ffb6d3721b57e198b7401afdeb13194e3142b98edf46e22c079ce10231230d7a9f1fc7c689b8c65c61c42140f0991530807e547fa067224e37879e923faaacf0eba1f00471e2f65bff1023098777eaab51aa95deed5015a0a5a640258d02f507719fb28db7011b9169536ebfbabdc704eb9ff21f17239e9c92cd8eda4ee90c0b3380778595fe357c0046069fda352af4ebeae263aefe0a7ac51ea1a89addf90ba8006868e0d04f6f794071d4feedb15b394b3c809c8f40d7da0c02a90bfb49df647aa82a68a94f6bfae0", "a3b5f0f1e5831213c82d24a31e4fb7bc42148a7a923b3b8fcec3465e11c9e0d3efbe08a2c6b80cebebb1b3f04fbab451b16e1493d722eeba48ef178f06d9218415aebf1379a0fa65711c734ed8f24c421cfa638fa64f4cd66a4fda41725186e1b0983deffdacee550071e60ce8043d4d6cbdf822d7ad2e90d2aa5e30aa17bf43b843ce15fe5aff15ea79b9c566a315d9517d50d2399b30adf375f4168a8b762cf4f3a4918c31ff56c7004db4f5f90b6501263d76ec7fe9ac10d94e76bab7be8d60f1192cb5527f3b09b7f1d04f894d35478d241dfd12911516c1f304713bd1bc4be4c6b85df13d00d5b4c4fb24eeeddf0f882f470cc8fcf40e1a58beff4c5ab25db240c7674bfcdfdb3755f69dba948b28cfc0361ba33316d80be131ec46353b1b1f177e9d7875468f760df495b898fd5b4fca8bdabaefd03320267841d7b40bb91a3c0d64a2692a77e006cbd711bf7a107edf001b4adb4d7823313310c14e72adc58dccb397cc10f3f8c93a604f01654a391dde1ec26b2ce92e82957263be4c135e53471dbe07d7c58ac01575af46a63b556b52797e47a0b50690b93df817d1da0b0d5998e9d24266b71766c9ff16ff", "829bb2ec1ad334c899763b9a30af86579222cb59da1e2955beef87b251dbd2cc8cd7c3efe701dacf9848d0128dd3326193e23feacff40e184e9555e4fe5e9f098e8f357486c9eec10bc1d1e3c5bc34def3130d6696e6f8a5e2ef3e765b8bb0e09344afa3a4b2461d7c6f666141971a05e66b76d95485639d4ddfeb4807497487c17cfa4f8ff858f9a0486793f9b3e07234ddc365d35f2d890c2807e6f34ca11427fc08dbdff1d733d5e3c837b86b4d31264df98de59afdc67df3914d2f02989dfc0ada826e4a43bd9800baf7b4a84bd556229ad54d9c5df95d33a169f6a6704efa017a3db5b21834a542f3a281feb9144dd6c80e086b2996aa312ed3354f07f895cd8dad4eaefc70c833479d933a9f9d50ebeac532ad7cb7d651abc924cdc13db397533024da3fbef2ba800b303548fe66171c742363a572107bbb75daf712de308ba9590dd76394cdf614880e9f19ea69c39c63eeefb69ac5a8891777f49c228a6552eeab9b0eafb033e39832ab75f22f0eed911a4a8b3af752fd65703fd47ab4a1229d76d979ced9b0470581c4845c", "a7ca28668c0b8161c0e0018bec9f7b46133968de1a69468633cfe1e7836282158677888f0a9feb712de4acd6b54dca6f8bd83a8acdd103664514d19c825b068d34c24a33bf9f818e2f2b0bc3130b72d0aa6f347a70e9d3cfb6ba56c38f6428fba5b20fa500c839a00fbebdd9800bd98177c7cf8f87ac04551da65258cb702ebe90979619a90363435bad9c79b7bb6f9f6fb4ee14e96d72c93aa6ccf4e4cf0ebead2dc2c92fb84939795af396aad0b7db6cb61f5b05a87814d2f1a6f352d323e8563eb5f6d79f4289d054ca10ce5985c32ff9aa20aac42636928c8745bd69f8ee6810290806eef87b66deb383533ecaa0513140bf75ffec03774bfdd084471c6576dae0a1af7b178e9de46ad5795bf4c115fb30a04c6f7b8a1453edc96923c1ebca7c3188d0eafd1569a343ed3a0a006f099048961cc8e9e0058c457b7f11ae66eaec839154ce4b5c2edeb57246adde3a2bee032f87ed31a05d7c6e62b7d6972dac11e5c2d13049bc51bb37aa410b7c4b", "8e713e4a22188991c0423ee19917ee32323a5785cc5baceb01934e305393f8f757bb0f90455cd69679072bf5d23bfe588c2cbdc37bae1e80e48ce54b7188f3f8c599ee708c5c1a69c0044a060e8fc5340b41d26c90bcf9e550bd67e70c084bed94f4e817bbadc864e30e88ed4432570348f1be2a518136162d28c2a91ec727fb76bc7b8b3cfac57d52c159c4ee5a71cc16c58ef5c8d9fdeaf01d0de60ab3a4a2cb2cf162c861c720c3c8ed993b280197211e26c48dc3f8fd088d6ff08ce5047f414451cea69182b9cb4ac29b4d944d4b14f297e7e5b3937f66ff4aba5fc505f9bb5d8662f02db06943befcfe6893c7a84c96bc90f6934a6bf305105d2e0bc77eb497e73ded78fc71efe38de35ca100d458e96bf7cdcd5a022a66c103818bfb6343692699c32286b2d355e57099a38afb20a52687aa7cb48ad67fde1ea5141ec221e1c55525ab6c48ecacc306ff1d6196"],
        ["8fe88b8d35c4af8a5447a83688b46a295851402060248f3bf0c05c13e11fdbb670635c4fa47a09789297963a92cdc8ac86ea36620e6aa5ba91fc659e7d2b679e52cb22e0cb7d248b1814df66d32addc976ff6282ef4137983f4047025194a007a2b20ba63cdb0082dcd7b0d83427f42ba486992b458c018b3777f3a94df439b7d658489524b6673bd4670fe8afc89fbf1228e83f115836c86b900f007b4aa309186ee5515983f612b462e9333ef4e94e26988aee90996c1b50be0fbdd0faf0f1f8eb5d7c794a7532e4ce29b28fe2ed943e60538b24e2b0659ac31fd803434980b935507e2a62212c0cb3f0af77252d5a2f2aeef445cff8d3de1d509964bd48f9517d2cb25e78cdcd49a3c51ad3af5c832f7ccb48394f8bb5274e6ea4b5fdcf37459ad0959e48af2bf71fd66bea9ea7b836569b9960fff0164dfa43cc4f0867b61b1ed7ee57876297ba6f63fabdd545e151b930c3d878956be41671dc3c4c187252948cc42c493ee995f39a2f709b215a43164855731b97cc404240099deb533f29753324bf9c1d641fa68761b54629b769179019a280d9995c75a1de44daae0902a801bd3aa25a937041b46ce7c564326112633f20131a989a9cfc66243824ef471edbabcedcaa0f498b876b1ecfc180208bf0cfea5c83612211f2b95a6eca079ea0cf966fd2c7b2d38f266b96790c0e", "8959b54bf0bcae922616c08da3fb66e1afa13e710fb64708a0dc159778cf0591dd514b7f5d649eab28ed4e2c85bf1a04a90c76c9e573dac4679122d72e39807257630f70ee79b0aa454ce50cd3e0f30626d2f6862fffddcad16f6a489916f6e7b21729cc0c7058ee0db2132cadf17d95721725d63f266ffa9aa775b6aa5d7e787e22ccdcb9f14bba9259be933742eb3747c762e041e2d2e1fb34cd3adf78200236c558decb9157293977455078d094755babcd1a3e2dc96c8382583613f6ed1bed08f5990ad34bf75382069df3be40905cf212db3062dcf546c79754b5dabd663d462b1c8fa51bf6f7d5a916e38d153c5ac7a1b2d4714083c82d07532c6f1b2d6e02fbdbc883dd8bab7a1817e64284511b61c99bede9eb7b655ba4b6f18d93d2402bc3b8058ed08d2b51c009f51c18124279b9a194bb7f3702e3e5e032a27ad740729d4f43574067fb0a36d735d0ee033e53f1c698f897acbfb52c126366d636f53a0c8953ea7a8507376e1ce7b28d0701d7f72693b5e8be30726a6382821b00f5705256aaf74b618ff7a2e286ac1dad48ee355e1124df876bc7c7886106f1cf90379661c48d362904b31be738ea60d63afce1fe48fcfb28c1242a142836f4b00338a58e17b2983b8b5eb19ad15649a3", "8f48b8f119651f2d2749c2cc4bb9073af2b9812e2691a3d85a1acdb5ecbaaf6d315b24dffc4c24353d8fc87230a3804097c07c79f65ef84d0b8d4770859c9999c43c05f1c9ef4870f2a04b94ae6dd1c0a342439215b65b49b17820a95907a7dab02429de2ae7c651baf0bed0c3d5d30bab51aea98afe42d86405078e7407ae23a818f87bc9a5cd5f5b0da904f1a6b06c6fd9ced9468d94232f03a7aa4a3a39150662c2032a882c13271e28d9a8b82a030b1a88950e5c388aead10303f0a47d591740e2d78537d614c6051ddcae9d355c01143609484cc36a59ffeae6ab193ae481b19ad2c0f2a7cbf73d97f7e43cec434a3df54a537ee8324c3bc2ce3edc1d941d77b304888da0b71a03dd74279304296836c80b9deffbffbdc6d92fe499f8c8a54e75e5722e0742ba96c2738a13e5003c8e9cd2f263e21c04b4702bba053f13548eade2f0929d5cd88e2787d64b32e03dfc09d7260d42c88a2c55288012c39fbe67e2a582f0f37f94b9975d314c7e8720d9c28c8daa4b7663900b2c3d0341dd1db064a04b34737c81305af7d492300557bd2876c98c1203312e1107bcb9895f638ec4752b219f53710885062cf71f26", "b162a4826d856b19d5eeeb124cd513800a7b5d9baae94ada66d0abc4f48832126bad600428fc06ced663aa44fa7abdab8be254814e470d7e9ab337ae47718112614c15791b1963133da99df7d7a16b268dbeb46144b056e4f0b5a44db15d821e835f86cba1c488d145c8c718a53116ce2a782822a88c336bc5e68a1c6bc04961f58d2bad2de487f8d8ad20150c038f2263f758326a87289783695bf45222d2113797c853397f6e521939d95096a81aa854a65406a30dac5cdad6ab63017eff927c5af3bbf06a2b4b9b489481651ec1555f0e9c9ca4811b31be5eb965767084f233476f4b83b2a518e298056018a23db657b64e9881809c41136f957ac13fbb4dae4100cf93e93ffacd4a52131754e1f24cb231b9e6de5b4c6e889f5a6dda8128bff56a8aa033af886a245de6a86c3ea25b0c2ca99b5d87ca309b5bea892dae4f8074b8ce3deafa805f96580ae0554ec172296a10045fccc79cadf6fe115381964fa6c3a29af78498be78f03b281a3b97437eb64437b090120fb846b3afac40fd92730e902f1c65810741ed456864e655", "8bca6a0559074be1943fef18e37ec8718b6d685988a6284f2f4dda5e2af1759cc83098cc62c847df361ffd3137eb40ea99f2e0033312c8fa5b5fcc95c5a904ec624b716ba42f2b7eaac84f223cbca05e77928b9f91451e9740e1d264ef0a5c50b0499e6ccc032ee515f6e83ff17aff0965e788b5a8376dd5bb72634dfd1accdbf855a8d7b8fe55a389a33c5a7173387873e60a6480fc776bca54270db198df4aa07a716a94a8948b2d1800baadbc782203b9a8fe473f2b18e8001e3df3ce5fdf130ecf3930d54592f94ffadd48def10d4846defe92b25a67bf5f5adb2288a14b669576ee4fc21cf429a3737b555dcc711a81812ab94eea58d9bf0e39fb982cc547d1b25d8499eb3faec7666af4333e4721f93d4f3bec41a880a88bd06262878b55e8f2e3687c73a3e6b2dc764777b6755c86e79b43f4063b04405b7a894c375b4dca6510faba8631d606626693454a424027009d69a2473bb85272de3f1e6f4167b284d07e87f77e9142f4e4fca1bb32", "b07b15fc41e736526197c382d548483550685a5c2a9d1fa14f89ba144c83fc023672512c9d712ec31d0385abb0a30b70a969d32f008e3edcc64957cd9028fb169dd5f61e2c422d313ca7f25639dc2ed276a031d120940c10841317b1b3ae8f2da05283008a8fa4585357698ca0361e689dcccacc0d0bf8e98220067a469adaea6283cb7e1f06f44365e6f93e104484742dd3d693f2ae57a3d0fd325303f1ab94a956bcd81174a1bb79fbfef29374cdfe461f18c6fa02c783dc3d2016f715ad6743447c71bda2ac3972929bcaa2775bee3d0a37d43bb2295d39fb05ab8f6be8fa8ea6834bcbd6aeb534af386186891b075ca32a0b04d316de424c020059a08c6739b408f6cdd7317bfa44a4f070da1a3e6901607754beb032aea1d5430554944fb7da0901413e16586482213963e536186e6fc1e15fc074f494eb7b68b694d067ea465e86ab163571deb27b310c813d26"],
        ["80314c14bb017ca39ad2a6c5170163bc6d44aa66de3247d1d90c21f7ea40713387037f9292dfb253f61bd2033b660268b0175f03ded086a219b5bc6ee9e599955620c59cf32339cd19101efb9c3e938253440347f5087005cd0c8d7a4cc547b8ac1efba99870f8f2852ae0ee8347cbcb34df07041fa5abbc9ffb655087de750c14b2fcfb5bc33462c1bf6a002ccae2655fb7742adfe2059c5e4cdc2eca5399178afc1edc46b9b9401404acd5ed19d6e54332c99587671ba69626acf47329a72002b26fcb3db2516b3f043a4afb08d69161995a58ae347c40aa21b19abe4a3ac7b2f3fa6fe8dc5b68e65633fccd4874964cca1040d50587f209c3ef201da52a852b8b6c3a62bfc4cae52326d8f9d8caf7498f56511758108dac697b0f5642d21443c742c887b4934819420bae8454f01b1fe7d3e1906e9a1943b8b63bd1daef32b489cdd53d539a3af1b3a04b8d247a17578f57fcfe0a4ea0090a7a7c163ba41f8f4b41a12ca01db136b62f2402e4730471e7564c6c695339a28f952373b7fe184e0e8b7612f2ca21e1c0fc33f66b8a61370bc0d31e9021b05d4c0038d96f8f692ca06282323ea795409837ab62278a9022eb0566743fefa1346981c3db95607d7d14040faa0f9e37422db393f01886420fd8e971a6c2a9cf7d375e81b164241f440c3d733cdbcbdff57da0c6f9ae0e16", "b982a6b7a1eff28d616fe3a8eb521083f23e8c7bf3887601329c2bbce49af85a9f8bd13da8c5652a126da568149f5696998f468b873f6594363e799996f7cf4b6eb49c801079f31ca8cda1dd5421b220a80f655a73af39329c71a15a2975946d8e0a7324d18c39c2138cf75eb9fc362705bfe10a5948b841beb75061b35d2fee845f792539917c968ff496c597945ad116aebc46a95bc4dfc309e36206615ecb9070885110a50cb5a3d7381876bfcaeb6891b0898ae62a1269fafb60ca7c47a03d320536246f8f91f1613e8185a28d3e0bdfad0c3c017353ad702bca41b436f6211af007286ce0917f19760fed7167ef54d6b55748d812aa41ef9f701559758d7c9cb95f2e7586ebd4ec191c826dbae70f6f69998462de884e9dd44573aa12d11b384eaec4151c4e8840f1a83bf25d8e11c3ce5e80632357317c6baf3bd029a844f4603614c4bb10a5bb66018b4b0fa258b0a612072d0f3656a06632eaa853853829ac02dc765dd441ea3abc4a34d704221ef98a29170128dc4e9aa0bb903312e1ac62352c85f4efbe16d917129839bb0c43183234ead61f082b201bcbe44ad6dcf19ca5122e40f7004c2b3a8be7f5895c23de4027477b480f877cf218599317d6aa2ea7984f01038e6fc911fded48b2", "9531f15359e90f5eee546ff48278bc99e02f5f81f78e2753c42f2213757e8b79d04de150676cdf6924e9820aa178ef6d8a9d4a0bf2ab7d5de64b2a1e1235e29fbc7a9c97c95eddf23894700785f226de52d1fbeb2864a4fdb06440041ce8b213b9dcb5e143e92f4a8095477930a610fad5eb7d2ab2a8c798fe8fe70fa530abdce216b66cd462b3b7bafe64b507b4557f3340e34f8edeb2400d6d8701a98c2911e9f5ad9b141921554bdd6464ed472f596829e3e82aabdece03eabc1e11306d89afb0db86f93198840c5cf9761192dce36621eb5cd3b7d064b456dab9508fe8ae98a8e04befef987e3be873aa5cdde8cb1df6b990d0f9ce039ecdbecc79afc7ae62fab93f574c604741ebd7cd6e9bce4263908ee71d1da8278e5ce516eeeab36109ab18a391039a99086c883fb9608947052a7db02d6d0f7a0f2525f0d2216ad1c2d6729d2f7449ec25ded9a3e87ff3d45468140d476da60e1fdfe729eccac5bada5532b91604000cf55306684adf608561fdbfec5e5761a0c36e6a5f2d344ce1ac7be74a0b099f0ac09599d57b6ce0a155a5887459488501e768164ea1dfad4d6a058b40d431e2b56e4246c977b467ce", "b59509b13f221cbad901cde1734a150096d66fa1cdc48bda94449267fe4c23d12f0b40c9a09a99eaff2acc7f4cb069e586ac9cb8308e658db0df60da40429cb6c1b471d2349951c4f8aae8210daa8488243165963701b93821fd6d88a1c1c123ae3e691746a3648df0e62564c67d195c10fd38511ac9084cccf48ef5f79c0b37f34018f03e4b7a53c93f200decdd87691bcbc72ca7b524ba48a8a3403546f9ea1ecda77761450ea203d01e08a033514e2ec185e6be2cbb364558fab8d8a798c05864507a86799f0b131785f27536447f4cc3255ac784e963f670abf38aeff7dc4a13d96925d0093738e21aee00537cea0a33d0326039b19499365f6e29c74562a9c37ae6bd393d5b81b87d330f1be4141af5692104e0f06d7281a4b84527e4fbcab9d14592b7e08d28dd705bfddb3bb0627787d874acd9d6665d61c7ffeb41650f0a5894ddcb0f711cb248193ef598663f71b4d1aaa554960178d907e2fc9522fef822bb495bf8d0e60eb9fa381d7cfd5b4b677fc18a9cfbe023c1e69b761b5bee9a06859443cd81cf83a29123d2d334", "a4d826e76cac24003c3183396bae94adfb2cfe0e2417683bb0a6c54618d1bbfdc87a38d276593505609e26192e277b71a6f927ffce663a43d4f89215af1dd88921ce391e5d4df7d9fdfc34c6eb19a29e5b7f23ef1bc838d8e8f25d86cba3fb6992ab9425bc6fc083344891b86dc3540b8ab074927c3fff6275440d061be97df904eb707e524b0e8d68232b075270f1da0ff6acbc582a790bf1a9b13982520c76d898c2c23d77eb3cb80cfac72154cc744ce4845a2afc3f816e14325f177b96977acaf9a7a653008234636bf64e1685801d45ea243971d70f8e49c560f5a109b186646f1857305105fe737c7622ba095b142702128b13e201b81c68b9f075eb538c670ab4d5e84d6d74062302b7afbee643fb6a613832be4b48d8a01ea2313469c5320ed65462a3dc55a58a6ac26fc96c64a9ca6fae04052fd7f071aba125c4604856c73003adf890802323cf9fc63ff858802d9a7930f14dc27bb071a120611884c16f665d1d6540789867e827c61695", "ac1ce0a9d45308419552b49fb1662f13539aaad83a4e8b9f78182d82dbee80d65169aa109a78da3e3702ca9969808b428b50aa988869d68b28be1a307d12f48f6122b51ebda90abe5f020ef57b35e1a47db34a5207b674aa3257713a9e633c28a166bc43dae8b511b7a3573a069f759b430a0303299dc72b2b4c54dd0e77b724184accea8d857d24cbf09d069225860a48aff447fe726984d1240f265b8674c5f635ab0ce292d92e9c52b63c6bf0f17b003b5124e9e9c28fa73a0de498a39313bd848316589704942de98d8a7e6ad3d1377410606637fc08e9c8ce4a7b80e8f0eb1a86e14eac0ccd05e30fa61e38aa126e66ebb45086404fd20393c961f6e9dc935a9dcd75e5c4bdd9e2b42fb62a47561240b78f2e5f84616e2cf6f6421658d0f8937a09616dc94736f22d408ed8e7ca720d680d7041dd346d1fae9d2102d68c71660a989207404aefebf925a15fc6c1"],
        ["95e33994b18557739980e8beba360158c32c599054e889d891b80ad42ee547e247bf563182e67725b6bca54e462772ddb96cbbafb4c6548058d99ab0d0389a15265bd4e8816dbae0ca2b5f94b9e5e14288c13b7fdd16fc04fa364053a487d735adc6a6f8b27299bf769fd447ddebddc937a190baca3706e832cb98d500ea2981c065e083782ff4a7b64f6544984e391a6e248d271bac9372b407223a8051ad4fff0aca0d87776cd72640eecdf7ddfc0a105425f03cba3e74cbef5dbe5b5eb14c3edba00801188ae69d3c1a1f3a9d872208a534de3c8fe0c510822660fcb93bfae536fa34cac5336ffff605703ecea1de4f2589a0164cef21492fda522046720018e782e47b963efd27dc79fc9bce6ad64a19e7971f9e76561c8c294cce7ac6c6b8496e0de739ca8f20983dc5e5c8ac9536669c34983e25caf432a220786613e7f1a078fe7cc27f921b15acb3e3b7d06d60c988625e68a7c9e51fdf7aeefadf7d8d342b267d3c81e694e1c1f1e8a5da0b02bdc6476da368952bbaafb286dd72aff7022566f047ab8a6923b4bffa4a9aee46451b62c448e4546e9e0877a758bfd88952c0166cec2eed0f477fabb55721ad1eae64b45689a20cf135e6c29532d09ed96dfd53f0d4a01f14a33d380439c7ab01c57f0ed1879980d58ab1b7a9b03d6f7487b5b3f9a2340522e453149db8cb45", "8ffce56fccf4015c1e89a05759d2bac133344170ba757628d7a301cd0612e03e2873279ac54a5458a632b7fa9e1ce82895bd6b393cc20da6efbd11884c8b96aa8af9ea37591226252146eb7e03357ce381edbef2579309aec10cbf2618574761a30d52d3bbd729a16be6ede293b8ff9c3e1d7695fd54db4ba45ca345073406df1ff5b7bdcacee64cc11b9b511970f07757090b52ce6c9afef03fcf40693844d300f6efeb18494b2d9910ec36f767d6b13aa6e94a26b5f273cf3ff2dee8d7baa9b7968f807249acb00bb88d87c37e1faa5c2895121c5b42dedd965cdb3a6dd5c305b4e779bb0c2f9b2c6113054474c42925eb89e68fc8e9f7a369fb89b2afba534f904f360c3061386498cd9e5e73d47251f9be1d992130e5ea6867625e6422efe3e20c85aa4b8d55c73efa978fcf9edc26bb65e3e0b52b9163d678c42d2734c83f4d6de5d7b595929b0252e6b0c78e9336ead0e584dbb9473af71793dc4d9cf8acf0374a64fea5b130224d39e900f3e36dbb61f26443420f9159f482ad615c22171637b79e6c0e1ace28c5ca0a19fe2909b891de3e482fcbd5e6cc338e3d554f7a92308db1ccbccfba4614e4ce397f6e2f4b5698c8c8626a199c4035781085d59f0fa54368d7dd665b3c16cddf4ac8c4", "b6ed3722fb4c281ecfcb9a5f40651f05242c546db9e4a45c77f0f5ae8b72f3c41f017635940ca29b644e7579288490edb1d12bb7d57ba006b436e9721b7358f5391c8e0fad20e755ea7c890780c1c20e503e46f2e9d74957078a7d71c15f476e8f78f3b413acecc02f911ad9b93c0a5afaad7254a326799a5ecee28bf38008c0923371ec7840f17c6e31133e7b138c3b35f36869485ccf5f36d84981c315034fa1f407c7a25bd616dbff9916137a7d906ce55d4936fd1705a8626cf5a53f6e8168f0e3a0719f628cae19b307e356d3ba1fdd370520bd414dc415de7fc68a94b3c6787ec2ef86f46b215dd5e5f879844a52b15660c0c296b9798c127171780771143762fe51585fd348239873e0e459ca5620f6e3ee535674a0525af7eb340100e24a85c24264669f9e5caebea4efad8d5a1f234b4fea7bd8913974cc4ebaa1efb667a6eb34818a0fd3f730818fd47a62065c6bee57b5cd3991f6d968004f1dafa48f0ae9c878c2dbc10fdeeb3e2ccfd06f3ce8e9f7e94a149a01785c35f12cc49b8fffbe580b2f35b3047ca9e63a29f6159e6962ca567739819d203376879497eb6745bc17c5f6b24c854bf2f2d45610", "8912d6284cbade964f15cbcec7bec7c12cea81982afd3c7d5f1e8155a09377c45d3fd1bfdd94af450e8532507328b1cbb9cb34d2e77d82f26ff160e33f53e0b6e3d4a8397d9d6f946e6090d0c2a3215f25c3a7eb15f43def1a630ef2ed4ddb648db86a8a6025d8c8e189b9e8aeaea2a1afefbb0b70544e129c12eb0398aa42b24586abce20ccd88215aafe48d1bef23b0c644ac8af5e314910254ad5d5ea67a22cdf16514d14969c210c5540093b41a06e2d135b0c890cc219b29e671bcaf4b10e33243612e2c6a64f2b02eedd7bcb214320a7d3c10a93bd022ad68e414542d7d2f1c7f9f46ead2d6763fa13e19816ce066bbd8fea03eed7c4ed021ba352825f4b42010abee16b31c535050f35582d0866a2c4160b68d21c0abd4c4a0e4e42a5daf90cfae0423b120a3516e0ff3498f32096b1ef76077e436c17ae3c3ed6708408665bfcf7a73532055c1664864958c9400a5693e8c7ce49848ab64090271d9485860c57667a07f5bf946c239501a1517320c1d05ce5f698fec3db0d51867138992c14cea79e82c9379e220c65e02dbb", "8fd08a71556e981f225dd1ba9e41c3cad810308c40deade8188240e06d1b0cbe24d9c4070ca2c8a862c1f48852ea20aa8b81379b0e48d040ffcfdde21fe5715f20de28faac09f5901a1168d6477b32c46b50bc552c00128eae1c70016447bdfe93eafa938fc24e39a98687a9b4958e02aec0f1997f906fd2393640efa2d9156d596bdadec2495e44bd9f8edcbb5b257313d10b7071aaa1e50e97552ccbd73b4aa3ff57d2d4ad0d9f3d3fa2a8408d96cc5450f0136cfd5e38cd984ef898a2bd262922329246c9b9b1a75cb91a00a038f6557db898b5675043b245b6e7f9e901364873b8881849b78644d88359b901410351a7ac33c02425a8cd1cca860e708ef666b7426d8f9fc81b6fbcf913d1bc5116021aace92e05d2c700b6ddfdbeab7cf93f3c8d7a26717dbdf459d3d62142f10d62c2e6ff5345d7e02fe5b0c5fd5d5dee6cab28e828ac99b944c74532040a685d64b28c8f4ebe3128c479cac09fe1d9785b669a6b68b13f7c0b7786a13d224b44", "9480a524f803284007b647c03e9f2134f1b18b1405b6f4e8e363c5359297fb152e1bbed73e62ba0db489dc85e1d67e34af652df4300a8f0497c668025f358d8b7a77641246cf600631b117198ce53b4088bc6729fa9095d28be7ae6870e6f9a081937aac288037ebe236722f356fba878f8423bf43af1fc91d7ed1e9ef0df068d208944364299d3e992711d399d47d6943b71d8ed2149b06009c8bd064c935d068269af7b41306adbfb2c92c9800745c20d91b13a17608a1c991e84beb65c0d2088c4d830d81d616d37a9918aa69fb9e6d08449e9dafb42079ad241de99f94193bbb517cc2b7bacd8528092398a9a8aa6478fcc1f7bdb1a80b850558a8d74221e70cd64ea2b7d25f7fe7e9874462152a5dcd9fd273a6fb684833205535ba5b298ff6721b36d553000aeb4f967bdb5a2209a2263070e891df650ecfe0c171c2d4d77f9fa9cb26eb85370ec13d4e040b80"],
        ["98ea296fcfb9f57b57b7a133c2d62f4fa0081fee711d43de5a53d8ffe460a5bae596cedb2a2229f7d6c45b81e309f0b2849ce6a3d0397f6d1a85f55aa82695a8dd18b06f28c0c0dffe147d43fd5add26dd769eef59166a52680ff2545a56a174b28bcdaf7509405a12a3770bfc7ce260f5ff33e5a067fe53843ed34db71c8aaae46ca92a5470e11cb3cd8b3df9caa3d4435be470d7e21d3118aeaf8e3a4dd8a40605d4841cdce9833ddd2ddaa0f3f72a60eaa009135647e654098c05f52e5bc9bb53e8c247b879ec682cb869cdd6836802495f6cbb1e367e09f9276eea33b17b97d2479520fac3cea622a24d4c629dac08cea142c1ae18d75c9d5643fd014964d3de371f216c958192048d1b1f76488f4dff33fa99ee43a217abd16acdb5e336408262cf64251436e3e60c82e4e972e81bbe9534c286f6996a1cd09edda9e8bc0d8306eb22460918bb7362d1588e5008388bae20795fa68752f79bdb74af41ff0a613c337b537560f4e915ecbd1e0d1f1d031a7a90c9ca875cb8235a0b8a8ee6116a0000da57916cf08392d2bec9f4b30b4a7802d7e5c4396f1382fb3610f28065ccf604969889181ce3e9418ea1426b2e0541d8b7fffc38d07c9f6884171f015b9407e5e971463ab77b29b6323533c35e84a2e9d08407999b0c37bc429ec7084754a66f02e7e4b03c7b385c695f6938", "97d015a41e4b4920eaba440538cc189590c7ef12a099fda16160c01a2d32a324a1d919d24fcb14e7ce3584b97a6046cab00e8fa0f9bd25a7bf69b670b918c98bab855253e089cee5ce1b1094b24204f6a74c8795960b87417fc30d34f35c51718ab5fce038afc3d082fab918af72e99dcc90e6e44546813517677db920eecf50cc0a2549827656ab9f6f479106ae9ec66abcbc6c71bb1d8ef6d9d73966a6964dd755f5344dcebee2f09bef07edb940a73d74940c669d5d1e87fde5cdc1dbabd82161601b7ad3b32139e92159c1fd4f473f91248c9a01f44af4aba95c52e066ad1b12775a9c8e1d9b1d34f7a143c334b15e5b31add39d65d0eca86a40741d8f54ffd192aaaf88d63e1cc134592393476a68360c6923d14c0c95ce76e0b244e89916173624b6a4946a3dce6e2b91fc3611050e06ad946ad81353e72ba80731cf32def73ae5cec90a744b0c9597227575451f810305efbfc2ddcad8ab2540ba1d08a5735d15567a7c9fad49bad8d7854c260701bd0bb85529194938d39a5d2efe2938cb142cc78694274720a40386637ffa343635f9d4ed2e0df8e5c2b8b4ede49abfe794559de8243a57ec0895df8c630b431c2097328b4e99ca447f1c577fa0d0e978e45403bc69d5a1fdacca837fdf5d", "88ffb566dce9a2fd29ed2fa8bf0e5e9a898d0a3698b908cf83b7e4530a283772940c880a645505d08120768e82c4bf8e8f652203515d9b5ca8920e92898bd4203e3306796a77ce385ee7eb8bb52567d84121cef16b9dffe49c6b5bd422ee5847811c4d7646d108a27760e92fc7697763d2f2538993be5f0b2b633dca8a876ce301235d5347e5a4bb60cb035e8c0b9143186644c611f4fc0c379f282acd2e2417cb52c5d2ed446150f78c6d0bf9b61ede4f04f8f11c4149c87ec4ea1f0a0d5dc03193d69ab19777914a3e5255a294f46356b108698f05b30be017bd903ecab2f5d3bfbc9dda249dca72afa44dcb975b22696809343662342e9e9a923d2b501fe9628634a86192c20fa576ff04bab15a271cf9c96cc3458808d14c721cf3c1a592cd29e81eb5f2a9c6719eea1951952d582bb2b7ac17eaab4c88039f3e5e8c5fdbc0fba49e5eff60f5db7242950ced03f5627cb90e157e14629abcea3d49c94a6f76893cea5ed802e4b9c71e0195ceddc164c74fe417939b1abc0ddd712fb611b9372569f3b0a19476ec58c0b649b4a16a7193c4b5aaec8d821335d666c1597a90106cfdbb3e61a51cf63775518310f969", "9841289c5b6373dec4aff2c79276b8519463d103e96090ba3c5e0cce03033460b14d4dca229a760170bf160af3e67876a54a91a8f68d756b73d2c7b243dfb35e44fb9f2488f1f4f6b02644e61e895d63af261a0858a530966d5277bd345b0355a9333d0292fb49f71be2221231d488a5ae8a533297bbfe1f04f864f9e90460a6a4a3370fbd3a90882e830cec94d987a76f6f8142de38b18ff3bb72f6c102ef43fa3082f0a79f37e8a2e8057cb6a553ca1679ff2d08117a0a82f6ac4b3bc56f1829ce326348e01205e1adcf2245f4d5a90669712177e2c1dcadc8fc00f2a144df924526382d7cab498770872227dbac87565b8800e113d00940ab249c12a65dced1ae9f4b3fa14d0692be694bda8cf13661c4d48a35c97099e9ee729cc633dc0bc0888ddea8efe28b7094918f2d1a55d9395412ede0fa78d67cd342ba03e1236154719c3388e382bd0fd5f73b7deb39860e060c3cba424e40e66c110ac7eb8b18f5ee281b3b9ba3efa5a815173f47fe756e3d64dfba89909ee17f8a4682f5ff82f68cb5b1f281a86572960c5afce031b8", "a0c9eaa6496ce11894ce387d477f28253ff6401dfef68022ace2c7549c9bc087409629c7cb124199f4adf298cbbc117ba1a2c585fcf59380a7038264a05a897442d470db52c72440cc34d8a67663dfed64f3a6c3db32465c838b952b2e41778485bbf7d3d51e4df481969f4549cfea3ac283291ac3fb028850cd3d951b67c3bdf02be0a3c4ca96d484b8a76ab48ad54439565fb340d63f48c2a25b4d510cb3d150826b9c4b06d3ae62cdb98f19668beb6ad431aab01bba6f7e428f7bade5e1060a5ce7a0228ea195dd65d847d22deb09608b6e8522fbabcb1dbab9a9c4556a37f02a4c7e259370a95365b723c6ddc2c21af4f4a81c167758f49289ab79b3105b3b1d52e0edeaa558593920f2495e23f211e5dc2d971b688666c7459db045fb07148721797cf21f62558cec884e1ff4d6717b9b5b611e95ad6c5ee442e3dc2e058ffbdbb6866bcee27de72aac84bc3d9335de8a7a95395d042b3d220f9765be02c46721209a54c6aeee33dd7538318f6f", "8ef3bf9f28c9d7093b5cba0f0f3b18787bee36f1d9d857c127a93b82466eedb33a49ce4ebaffeb57b71fcd9428ad643a850bc12f5225654691753ae3a30bcdc0b95e3e63719bd137b7ad8de62f6233ac2f581ff2e963dbdf846d45f812b0348f95196c947ff2422aef3568eec07a4cf66e3043f86f9e42803eda091e0a8b537d87a3b2f6bab4dbfa3952a6cc52dff89e10c03cbfb06f11a607bff92ebad1ce6d1f5738d76d65fb94b30bbaa78cae72935d039dd375c49b4eeed65e5614402ab4bae1c4d1d2e343ac3b7e3eee83ade99324a4ba9a98bf940db03544c906d6a3e7f27338c9144d8672d83ee5e6d0b9db72004b6bcbd71424bed6c24e620ef42fe8c047c1a9695f8b2986e7d5b37abd3c92432da0d9fd73424e5ed77f0b6a47e5a1813b9e2214ee5449079899319daf51f329e7b06dba721ecaf57550ddd5621dd3b1ff1ad5d57b76484321bd0336a8dd7b"],
        ["8066a25cc30427a07b980097a7154e5aea926faf6a02296f353ad75c98e2184701b3df3d190a74e7d3874decf2b08d398814d34c3bdb4f3b8829d12adda250d6089927a1715f082c96c97abdeda4fea02a7ed364fd5d6b3579fa2808d5dab4d0a9c6f095de725decda9066c87f4fe9b8899be6068c884632205e9b8185af220a1b8cef0e7389ef6307c3d3bc91f384c81a283d5126d7e642ec029a1585faf71bd312aeec6e2d4e00bd03993decb3706242fd314e64edd6e4d4173755a2e156f631f3c50c84d4b23ea4906e0ff2d98f7520ecdc00cf54118b0cc2cd178dc556c64c6acb42ee1a58c0cb1f1f77a61b80074ecca75ca41e9a4547be64ba28c42d969b3eb1a1594fe4e91d301294fabde02c3fde954e7fc5643c0c0c975550441c4d169be5d2734c5c3e4cf706fc22bf3fe1050e387c85cd350bb25864697206f2cb2f7598bf5f5e3c7434946a8ba9e7c34141975f2929cf50a7b3440d391997084152ad8f600d3af9a290e94ffe9314d13f3196d8fcd4bd74b687511307ebc13c2b98e211e7e9db30922a414b56340b45cc3d070abe8de1b65f04768a2cc3d288ad2740a7716c188ff99201f1b617acaab32ea7a73bbc8303fb98ff5a51f5244aa57506dbc56259f7fb806eff88cfce572a17841691c8744cd58c6c84464e1837a3458606860aed26503564d400d7195017", "874908c63db7604d750e2eaf91f2fd83b14e1d665ad22adbc6044f0d62dc09b72f0e3bcd53681d9f27e55d5c16a5af85b35118a6614163fe9e16f2902f1284795462f0a39f13fa9f82bc8c2e336e6cd78529f068e1083029ef715fcc83fecfcda6fb23e03d3eddaed7f9e7e0729819f258b5f73dd8be01e6c07e986af7636562f780c32f9b4da618a576e11b5d1e40520cefac01ae68e4a362f69e278dd208eba0a9a38a7d6578103e30e64cf0b26fb756f375c2c30a9dc290f72ceee88f6ab593abc3f802a10e064970f888a625ff570d4c6e9e58b4971e2a83a92b72c96dd60b5b2f84917a7d5081b0c792abe30b3721e2b225a1b0ea3b7c155b519bce6a91aea0cfb8eab9083eb4ae76bebe0fec03439a1dcb8125b0ee87b19770db12a4c78067dcdd20a0e323b0c6316e9c76b4d411fbe2cf9c85e2ebb06e14b7d5ebc5165634e9c9a816455649c70d17ff2968176e4a8fe5def181228fbd66898fdfc3be7eaa5eda436e543fa94e71fbbaf16afe0a5385361bdb698f413deadaec19612669409a3be0fe1686499ca5853443601924cbe8884b37a375a00dcc86542095568d31a35f7ce020a9e0f7ea0063939526569d53380f86f0c35c0faa7ad2946b00a9b811f4d47528dddf7f5d299285a7f1", "aa3505ab918550ec9cb98bcb5667022092c0e70b94d4b992e62fe42746eb76aa49e9fb4c7308a2e655115d5aa833943da8a1858afb0cfc5c3278bc4e6aef059198f6d1501edcc44da313c9f0dd84384994fd8b0cc3352f5366624c07437dffd3881926a1dc8bca22d3b598068a4d3086740e421407a677baddd0c4f8c92cac0fd0614aecd76d0abb55f78a30a7661cd94edc6ce60e463bea9cf941335e1daccd0f680af01c1a5d202399c37118ba08d465b1101e511c19e87c7458e59f5942fff62292d614fb421f397225fe5ded99113e773c75e4bbdb93b3ddd456a90f96d217ba0d0ea28a20b5b782357c2d9ce08a4617b226137792beca56b3243f70cfd40c47e993a8ed2839cc21f2c03b9ad0724b73cdd3889d5f433a67d3f49b16b8993134328ef81e98946fb119fed90affc866220d09b0cf732f459e9a2252e38272af3429dda9d83e9ff4a1d33e85557e9d0b26248490eea943abbbb507353eb7c340bbf1094788e9ab6ada2045115a7d7b2595900559df0dc75bae744093f91229eb348991210cd315aeeee082e0765de91f7f73d79bf9ad22941cbe7ee13c5123284513a4b9de1f3788c7deb4b1c6ac8a", "b88063a585429345c21405b00714dc4f994b588320ac48763322ca0b5b51a1ecda0445a0ee637d221acf93974d405b8ab7453527bc8db2e5c1fbbc58ca5221d90fdaa4c321b15b8d479ca0f9a55582e83128f08b44be113ad7e8a068531ef1d489b3f5a44acf43778e039879faab460b4610cb594628766dd8e84ca2dd73a0cf4cd5bfda57b1d40bd480db5b77914b084342495018cb80b6477d67541d6fbb6e3222be9726aa508968fb366ed7f94fcf4fb2ee2e9dcf906c57af47be4018e9cc27e97ea12964f292b594cd01a5018f1c282369a2c24a9924f9fb9061c08f5dd5047eea6d15eb9d0581b920072dddae975d068ee99e297dd2741b651188f7e5144a35e048df04f10502591b1656d60fe83977e807df8dcb210a7653e96e091f3e81174548bc8291a8057d13b6d751439f166ac50e6ccf7ebfa19caa03ef66cbe64555aab265e52f11f5255ccc40be77a304a4706005e3620e1277166bc42488cfc6301119153cba0e41d038a873f2662c39ee087528d020569a13a900645fd7d33f657e2406881104eea6594b12d42364", "8741d97832c7bfbae55910e9b21cdfd5eb3384df74826cbb886fb994359bf44e538172fd680b8a9b0b0dcac36883d0ce9208e2d8db9ce0584d3a8278828ad2c11dc2fd650bc09763bc5e7a101b31fc626f2c3826d3ed6c24f76525cd4093616898bb881d90c5923370a100829597ebaa2eab5a95b84a6b9d6034e3dd6bc496cf64ae9bca8403b7d33a846293472a495963f78458d5fc58618d2e9bf13bd029142add7a0edd7b9cfa28ba0d94855903df4f1a8d8dc843c3171dbff0904fe6285f00199d12fe8af6d60a9dfa04d85b7c6c05a43bc14a4c9e1210f52cc20c2f29c7aae1ae3ea49e051b84906d50b5721c0a6dede03611faef05d31c0397483a65be00bb981f24204c1422efa83c5b032a0c13f52c0a6fd1829d646b4dd03c71379259da0ba7993577c3cb31ffe1ab9a5e1b35a231fb434e34f312f327c187369e61b9f3d197ab4478f2e7f58d6cf93db0cb208d819b171930d067680a5f625f5e3be7eccfcc5d930558cf088dc1acb02a70", "881af5cd1aa586ae64ded7df623f5dc3026464b9cf8533db41d9052eb45473a58ef657abce31353016027d0d1b535d8d943e59f1d07a05e5848287a95fb538e87e3f16ec979e044ae544738ec7ad63950ec13fde90c94075746e91696ffaf71a819cdc54946718e927929faf90cd010ea43f4922738dc8526587b593b60dfe8a4d949a496ae8f80e368e0cccdc1fb14b69a0dd2b79b887a31663615bfe83c936fb94b887a2d777a74f00de24cead9db344142b1b6a18bbd80abb34626d0502da389141b933f9bb96e1bfa1e5d938785b5938d711ad83bca9ccd8a41b31664f02281528ca906eec3d663d28c1d1bb6cbd426bbaf57b86370cf66bd360b1800c1e9e494f870760035f7f88fc9f562b551f351181d4d17fc5e64f82bf9fb199c3ccf468554e5b437aac84433ee8dc4869a605a92b0ef051eb480d6b7c263155d07f958587a10774fa9628fc4c5ddb42e6bd"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs,
                    None
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["92f26d4ff475b43ecc9526b3b6a319a524e2ac38e9d737697266fcf3a6f339f1c3fa69cc0b005abfcb584a946d9d075caeb074edb3e7debe6b2222019602d53b7949dbdbe9208ecb8b18bb3d921f386b42d00adf674ec91f3fdd986d9cd7a10b80fd1efe1b939d0c91de6cd22d792ce5a06daf2f9a86d216e9aef704eaa5a839a000e3df586c5491b64342bc88c814002a4f9b5530866788e02e4ad3e72171b3adf1fde7dfb21b748b4b90159b48e144131e4ebb3035406658096f41b3fa21d20bf46352cb0e5595d7dfbd450ed036be3785432e5ebf78dd023b0bbb31b52657a163c8072269ab5c153fe6485b5ce596523904c499292480d633da03ef9c4ad75c24148e095b8103c0280824e5a3ad896ec9226c87ce6400acdb14c4fe79331b771e3925721f85c73b7a66d2859a170e5156245f220d9600554e8fb5a13aff1a16dcc0e1d04bf3fc6feaab8cf868862201d7967855d4443754911b5c80776143cfdd504b7b465e1fc4f86a931a21a49313269653d93caa4f437c752a7959e6eb87e23204768e1eff2cc42f08f104ed366a51f52a7d6275c3661a65fb12929affadc6c95e6423407c759978f056cf36e1286a0bd23dd52fc147a6ecde3eedec006507ab1cf5c575d06049a58cf70eb4f2060c9ca46c1b0e8775960c62976c856767d6085ba0458f9a7cbb851910736599", "b5830976781767a4f79995148c43336c84ac532648471156a29a18ca3bfc0a7a7da48795e6f437b607bc9bff0c516d61b8a3cc3a41d74d75b9b1d0e3d3cb57dd241be01ebfc9bfe128e923605ec10d9b030cb23d044c0a6d57379e425d54fddc90bbc3d5c4698a3d9e0fa346d50f4d5cc5088685418256eea0eb22ee7e35e71c535cf64f36304bcd05cae3037cb6253d5fb8723a041fb0a87e3dca5a3291416ba44c6fe5401a85717cf7201bd41f3fdf4215e3e70341c409978ca2d6932ae60ee4cd5a51ef3b22cf60dc500d5ef751cf589cbc2e94bcc0808374c223a42e2bce55cae1d748a7f768950032a9ce46e0fa64eb8538705c1ec45ce6996f3b2f5f1b227b7721730a505bc14df97cc78bd14b612f8be7aea7d722f2935c9afc47c5f792dca026928668d244b8450fec2efb8d1983bc814ab6457ee77700ba87e4a98385c624a9fc7a576b1a876fd600ea24c61b2dc6c6a7d96267dbfacd143a85f3542ffca76a7a5732a6ad8364d647a03bbd10cf6c6c12bf9fe01c3867e3af916d94acc3bfd67b5be81d913a680bc41288d153492155237f1a1a016cea1d3d3d573bbdb3ac65e2845bbffb914c107f70bbe13214875ee7a051f5ce39621b6cc69e9be347f07cddf1e385c45a3ce2fd586612", "b8253305169fbd5a0ac7a843e87b0a1f7f82d16a0ea23c8212d9983fc9e5b8955a5bed95abfd661869ba0f4a0b5ff00f806b9036a5be3782e938a581ad051bc42c610f2bf06837192d44758b63c8d10e3edbd441d7b3fd0c5e06051b7b2123c08d855fd60551d5003038186af607c8db5c121053bac06256e0b3aa5ef152b1c5a9108ea070241750cea57ddd1598cc526f55da468a5cf2d07eb4c5eeec156279005f33be86743de3db50fa403d9914734f26830f9ea8b7a674652f03c6b7772505aed5d020e9a4915dee133ab8a15b750a4fbb67e1797c1ee673fe3e5c2ad6c47c9b8c8d1c5981dc5bd9e339682d3dec0d6205c330aaa78e3c89a01e65feb1ed9202716bea4f595f86526a50d12f7003242832124a492c7f61e618aaeee8eb5971375520d2d6828d192ed664f9becdb527bca5a82a2e144f12f331b5bebd9bfb2529fc9b44ea707e75c8ca725f67d37840d83a14bcb34c4a189b7f5c22a966e6741fd564b8fccb28446a31c710f6288839f93637c8491d479e9069953d90d53bc31b2755d7c2cd2455ca847b3eadc6c35245be0bba3fe6cde219dc421c636363b903e5f9f1d34da9d0192e480b636c64", "a56c470f89f6ec3da1eead3bb46b90bce38eb43f1699b042468f5a51fe404da268c9bc1dd96e2094f19aa658943cbc4aaa5694da37d35f8a0de9e8dedbe6e21283972fcd13ea9bf854d9c96d4f0fdf0c313b169175b4665118d7ae7e1304377eb8f67eec0c5105d2d2e02bf947f7e1675d319909e08023756d19f30a3527e1a3513dcfe9cb7bcbf6bf888f3fd071cba40d6b808df4e0592f346972b41bd0d80a67924e744d5481ff9b751ad65065637c253eeb399cdef950fded866194a9e1a6625de040244fbb809a59a196f1d4823b2d4efc201788b0f91350ab668db03a0ae61cf2fa45e7fc06be5de7add62996f807c877240a4b812be01e37ed8ab15eefc98ffe1e3235b0618abf0a032c897c34636227e7ee9a43789de359da668c1ce85c63e1ac402f1cf96a10f38feb0f677b0c3229deff40fc3b47ef0b5e2cb854688e2dfeb5017eb5182d8b971f4a964cb33ef98527b50db928b2675f2df6e1c1c9f0cc57d9697c4930921f236d02656e43120c661545a35c7258d0db6dc9a28784dbbf10a1896710289f653dca01ae42b3", "b1a49f5fdb5f29e958b94e9a98eba9ccaadf6eb2217890bb73adf57b23078a39c3ac4b5fec17c601e645ecc02c972cc7b28a96ebbf2cbafe6f25bd7aff5bb24fe1db484f71f69c66dbde4fdbae696a384169361b13d66d2acdb8c92a5b9e86ec91c1f6d06ec936df4d2dcd4a7cc8b5239498c92bbc4ab73ae5c52b5f3359df7e58cd14c3a7b0e2e9130cfd5842b111c554736792348e0ba45fc9fee6cf9fa2106c699c28ee35563bb5234ac3d8f83cc05c2dde31ef463c047551d602b58e6c6b5be88fa1ea67f508278140c885a229dc47d15accdaf4eb11d8a317bf23e0a55b167c726c34b3ca4ababeb923d6dab36651da38ab967d0a849ec5a24b8f30aab242d9a2f49d9cf29cee36bcc17acffda5556873ccf6c126491d1567594d6f926d00a97c24ba2d4e8ccac1d3ec74017bf229cc40ee7a0e94be63fa1ffc61d29530724dd88a6096cab93b313f2018627f9e73d9956497f31c7f168a573648a27d2a0906d1014217ae26be964c8df409954a", "909b4ce0433dda9c73d8ec0ded15c4ff9840377c3c6d2682cb01bf228a1be340b234e088b35581b3e4c82b593cb7e2a08aaa1915a596bee1b4934b40855f57e0342b6d1a7a142789864f04ff150b630db718d9e0c109a84f81a51898a1f279afb8ce7c30d856ea3510ff945911a71c1e825c0763ee5633dec6a0f058e7438e77af4a1768e95ef793672880b80e9d53d92366b28df14e5f040f39a2c375b65d39f7b79f327e0a8233d07436f6cd6799533bde4ff44111ca31bc43fdd16d3fb39c7a442be8a95062e59653f029c91a411672222efdf3bd89e3e8dabd70951d10433be2b0d9119e9f307995102c099ca4b333d810fc489cc721671c0659557500a4c46e8aa43498ab428bdae4163afe706e32deb4a0fb979081faef7358d521fa0e3458a59fb63e6bd2e76422dcbee1d031374da7f165d7cca3d784db64f494259bcd914e834f6025d18a410bce19de937e"];
    let expected_proof_no_header = ["97603b49704c2dee3561df69eeff89a56b5e6f051b87da83a5646dff60b0f2919ff30b2c1008e94220f0eabeab394f559070601448151db05a151c621fb8eb6c6296989ef3f159871bc5d56e936ff369386de36c51b17d6edddb844107003ed9b82508c85e09bd53729e00aba413ab4d89bedba5eb15f716c7fa32cfc09babc6cb65c221854d65873dafe797d5169125151e68b93f8e20f57fa6e20d5d4197e102f46944b6c1a962c472f693f1a861da3277c177c837b5796aea51364948e11ed5312fb7ec78919d847e4a7bdd440b7729e800d173d401e837530b5ad39f31df9b049bbff6147d442a4f77fb4af2f08f41e0aaddac7f254ca376503895c5afbbe6080bc9277abf6ea909aec34295fbb44012de05e6b92cef280b0898626afa8b8625f009b49b6bde7a0b9ec8345ab8560be11efc42374324c7b08e1666a6e0a7daf3e56bfc814bfa16f4dc7bf30b431207934a3d233bc6af0e4026d7db6b881def8a1c5d49a2cbeacdc20a5593b36d5327112773528c2ac354a57b8cd0608327f3889732d02929c219455d1dfd4223481d68d8a71584189ea01b11e8443a5afc62c0178b3e78751b0a28b882cfc439300ef730619c20106c2830303f33c4d8399956bbaae4ffd4c3ae26024993247b26101f992e83c88685797381f20ab6b57230d2e8897c5eb05dfca7a87bcfd54f8d", "b43b297868a6215679d381abc62144ed845f786ce5e9fdf8feb5986e977c9083b230e5589d18d5b8dd522d6180763fe0b6ca9a827844da417b82be90ea9f0dbea6ea7c915b79106c3defa0169b95f1de5f0cc2270a997242de31eddfa04fa846ad7fd661836ce998d78a416551929f21cb1cc2c3011f7e56c174a0349a7dae1e264e8c620eff648c0e070a6dc140d90a5ffb5cd0ad75bbc2a736cede5cb2a6386ca3e99e7e7b269d49a232ae7a43bdf068eb070cf7d3a186aaff3453bf9730263f897aa1f970baea093e7acb3024afb94a286d04727462ab4494f188940639c85673c49f9ebe739d627225b43030ed094bcc8d358dd196f8320953025c99d73126cf6f0a804df85dd4f5ecbffcd8a9cd44165da34fb611c2cbf67599229d9d8447ef96ae10cadf6c669a0da844a9d0b371ceb92f8bab01a052ed5c2a48228147f8b7888f738814aac9138ade5d4492162f98bf6778fbfb32d3352ac145130718e66a53357dcb1bb8e15a5faa0970cde8330f4d86bd574067f581e7c090e1e504862ec7b0851835987ede27b347367c03330d73ed09bf69f19064bc5d1a7338a1b4c2b45f8a98ee55f17f353d748a42114f896277b8a8f3220dbdb5ea6fecaa6239375cb4d518f7d303f7b11b160a9774", "b9e1cb0021dd2b596142245b184cf852289e07d3e53e5d700900c3a1cda9ed01876eb7547485adbbcd6f7cd245035c728d58b952fc0eaf152c0fd32e675259caf4fb3f84f7f75bb21f21bbc4a05964de825b1310fce676715547e6e57ea81297ab841c74688bc7a5d8d55bbfc5cfdf9a21379578ba2dcba5bd7b60d4563ebccb31b9f55b4febf5c0e1080499449a1f3f2e12414b13754173f58d4160ed1bfe6589e3246d44a6f408b5d7e3f120c8fbb002a1a61842e62f84daff3473f6fc2624ab24d4d524bce95d25736241c22555c2718c4ed8498abe39a3fd0f42d0830acac5867877430a5f2e9323154a5dba771f326637f43c9e45be9106f95adcb3e2700d5d118df9f2937186545b6684b703c26d6f908abacf2dc0fa5add5e60205cc498e19b9a1923570f732fc20e85183c7f08e6f8beb1117a58bc610d62416b904d9829b5e0af5d72a294ea1da227a34adb6ec3c290561cade59de59ff4881642703a72fc4981c748d00470e5b58d3528d3474ee3a2550f1fa9e8c77165863c40e6b81fd86426b119eb828d4f7b0844038422e587918ad190b5e00505401cd4d990c7b67cb527a462d2968e5ebb84bdfcb5", "b6761178c7625cc6d1a52fe06f1cf59390cb4048bfaff410e28ce4a7c94324f3b72314de39e3e9e66f2942c646519098aa900f1778b9cf28f04110989b9543ace67e301ed98ce231e3067ce0523f1c90896091a127fcd17c10c6b5608da0d50eb76bd7a1ba01d3328bde56c032557b2d2936a556720c1a7416d0e40611374c1b965ab22c863e1979fbe613bc8fead2fc2e653fca60cf8fab84fd49890ac5c4164adc7227dcf439ea93cba42a35c9c7215264f5d914712154c9fc6017f01f0a24f064e92a002c06c95b7a6fa342a01e03244b88cb50a21386320cd490a5f044cf81c630d25bdc1fcfdccdc65639a61bec4324eb9fc1e6cf695485697ab47ec31e4bb3994a8bb65bbdc521aaaad8d93a6c11613153a24441f556d156ee0a4ec1fb2276cbfa9af38606c1d3896704dae5e65123bdb184f5b773d41d51cd9c51b1463f3079a7d8611bd1c931bc191935edaa52d67140df3779f0ea3710bdc7114a109616ed28053de0078fd617573fee925a1a362acfef94e1056b1058f9e76339abd7b677781c4b1f19d08aaa6453e1da39", "a76b6e9b560008e3c92c82dfa5ceb9d3835c2356c1fbc9acf1808b29a880fe5005b8bab96a45aeadf140b346bab01e4d863f9cd6be5b2ada330571108bc121e018f0041cdf504f885e5bcc348e30f2acbf9156573972172eb483452d6377ed5b99ec189461e230f629545399839d17d87280e94b7137274f17abe7e238243bea8056551b7db3de5df640e7b8b76db8804b957247d6719d5b0784dbbb51e7bddf2a8d12b95aac086feff83721983db98e477c25eb0a083fab77899af5e3ddbe9b9d906fcea812054b372fb3a1c91ff73855273ca9749b469911aa9e475ba90a308803e7df06c4c6f22543b835aa7377434e38fdacf775e30c4269b39ee7d941d1f6015b64baa49017261e3163233d8eba360c1f75e8f03682128492764bfe51684ad44c79d5d97ff6d6bdca0dd78545ea57649d9e8438c6d6e535cc40f61160643db31ff8b7dda8d06af1067789faa6011424ec54e9271a66b5bdc403806efeec4c8c70f9a356c26bf16f90307d3b3dfe", "85bec9a4256f7decbcd714b0dd62619a18e65f261b65a1c951eea3ebb6f2226435eead4090c68b2b6e400c309b141cae8f332a1bc5e4b89611c2cc7c91928d867ffa828c18bf8b9e5950413686eb1818c10db1df5ef0107d88d3b4dd19b2ec24a19f7f6795a01b6f07737010640d712e484fa2489de34aab031fc97815b3c1fcaa108552446e9311d689427db5dd484c07ebca168c9adefc2fefe3998a79b935cf6c73de2e5a649070c204c9bf8af4a35d0363049b5ca4f50bbba87977cb57bc04a999bf7c0df05e205f767f969331390eb8c733613f136970fa5decc67923c2adb145cc5698412d208eb04d0009e66436d3372c76d8b053a1ed19ad83f0be2254122e4e04df6f6db7f4979c5288f5790795001caadbc3984162b9035e78034ed5f0dc59d43ea4718ec4f29c59ecb76c684a11e4f1733c1e38d2c2516400993f01d25cba7f9b24ca353a6c370983483d"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof including a header and no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices,
            None
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
