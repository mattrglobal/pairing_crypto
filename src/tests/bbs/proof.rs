use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, B_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), z_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, B_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), z^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(192, get_proof_size(0));
    assert_eq!(224, get_proof_size(1));
    assert_eq!(256, get_proof_size(2));
    assert_eq!(288, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["a64e8839be76f9594f98224e56127f5a67756c64e14ef863cae3cb3ebd98f7f4c51aa1957267b504cd0b8536b92e40998beebb0fc08b85f986f9be1cc6d0a1510314c19fdeec73481367a9846ea283b0f6fcb8d03730accafe3cea79da5484b45e6efd2599955c9bd4093e509898c1aaaabcddf8acb5bce08048558d922f7f054a57d8231191b687bf70ba8e1ea96183b8183dfa649313f011db293efd6780922204eb7aa5a7a399293b94bf5648d915feade85abfdde3e14a72c8ff4a52069f49d8e81a1c2aa114ab543cf2e8619b30c502a8018793b51133ef1206e98030e1584de0823ea725d24a061d74d58b6de8f8f354f5ef8c8129ea99cebdd0c14fd943ca0ecc19570b538cf27d76ada065d740b7c0d54cbc0eef3584b2905fb08421210a081d452940766f92504efdb9a084c2674eb4c7368960801bbe98cf233e455ac1520659d9759554949891c507b5847b8572c22b24579ad5cc990b659be2d12d9bcaa6da91329487e2ee796033f6158a268c7e0996b631fc94fe952d209203", "a1e0b6aae0a0558c38b86e374229b4a2712020fe7cc52418960e33f3b6ef5aab5d373c0d82ca3d7a97362cb48eaf7304a3dc44f423aa55c8dd547c2bda4d4f5f16def90cc2c03a2c288f00eab7eb9e56cae82739a17149874b954b0a51e3b08f389c232df58cc8740667ff7b99dec0f5d04845cc1174bec464a3a83719128bc02158bf7e7465a226cc10a320bd295e6f5b4c9cd603de51786f844b5605c25c4a3661dfa4f13c20ab8e63c035594ec088d24dda1ec434c1375923eb22cc4746645c363621d7b02a1b8a9614f4ad5bab56a7ffd3b850b2efdd928b08e32890f70739544fcea58fa34863893662b7d0f52003d0ff937cc5460f0ff82ca36c14f49b31fa3345538514f5f4bb8db5e51f2b790b49b651ebb247463fcc694003da57f245f75b69d8f8d34f1ffb4b7c545dc0cb08a0ee1eebd56e1ba7f79b7d47491cc15e8309b1c3a85a76a37b814a33bccd5144c3dc59636a44e34f8535e9f503797b", "a7e4ff56b33cb31171ae1f6841bd681dff771a10402139a9dee32f9bcd1f3ff4e77f745bd8ec6b81eeeb1262f71e6d748fa931fb9ba4e14ced093c737380f60092478ef1998ba71aa4688d294956a96a7f5595f5a931e096f3f4e6e3bad18ee31386a103063db86ae242d833981dc62085dc155e933ff514341a01fb10ca5ba535504e30f764486e36dc22f87043b851e789f329daa0dfbe5510af1225d1ee0b19cad8aa2d568a4ac3deb6664b4c289538f9e3e8d7185776a387aadefa14b4763ee99952f3ccf7fa4a46a0dc4ad5b3e22e76ae43233154d25c7ad42b4fc2fe9d5b45c244b6dbf1ea9ef5c1fc47b2650779e9c1be8e7a3d92ab275a91a765200b2a1ce1183a0d1f3449a0ceeacbc897f5c8c1c15bb4581cf664e8b3e4fed85ef45c24f9dd65fb5969518e7c3fe85b15d0ef1ec02b18ed9d4e3ba018c933391b77", "80824cf70bacc7120dbd54a4e9a9af7ff27fd797c84bb5d3fa097036c519b1a97598fedc65350ffe6d13987a3514ff5e98df29bf124e00591b884c0447e7b327e862e880a89c4a7d5c78ec0a16b7fe5425945e2ce9e690dd16d8d563e1c26953504a2ff9319036f8b432738a1e7f530edd58612ee7a31ea26e236d8ee77d77f22c04d693c2a38d205cea56f899fe78018312c5f910049cb2c7284b054d6dd4156a5a31f27a6f692c414c09aa9f23ce3d0d685fb298366f4120895e8d9397f93e1ecff70e6e76fc8b97c96e98d85d130d9f2ce3fa29bc84d65c2011d03e58d9c63dafc5144ffe800e67f52d7ee95b5c067255b88f06b95b3e3c758d5fd59127b440be2a19e2df0056ef6e57ba26612b16cebafb8f50700bd852b8b87019ff8e9f", "971c03ba2fd0788ed5c8982fe31a7d9580083ac062ce2ce73d372d32646340e47be74b8432a089c95971df1769b90bc5a8bf575aef2d9fa893c2f69a0ed868f15e0784669912ec9c227961826ff988162d1f8659ef7b6b65911fb9410eef2bb033813312a6bf512900f7052d5b3850c3fcb79a7405d986b75484bf22e4f18d6e1d8979fbf0c4d4a9a0909e2e97710ddce7bb8215119cf6e24b23f2f22a7dc9556cb04d0a7e17784f9a3aab805990145fada4c8a37df5b01cbb18c46d1d568cf462f976fd104ec1d3d29c504c447107762471d6509f2d8d58da6be47d50e037e90cd835d704c0bebd6c400c43ba4f76ae57f99c538a0a460d3ed4a6317754393e", "b548eedbb2859895771cb6f044984e711361a6051d3651a56123e2c453609e103d30de9144ffe24e68c642d8630fcf51b5c43e252574184960a2dbf35e6f04f155b1452c2f58bbc4c9d12f1d5d3b7310c9f03d800e80241998e6a66a0bd903cd621dfff88de36acebfd04f849978050f3f8e48c0e427f6bdf5278d8844c95595246841110404d330e15a3b4a9e478a914446aa99eebe00eacbc9f450a5f41d3601f432caa807a6a1e123aeb5da6e9c1a14acd50c07600dffdb1622e802f124891f675ba2d04cfa3470ce074d7664d01d583c3744f6ab3c60c9b4f139bf9ca8fa"],
        ["8831a6bd87f39670bdffdcf5ce10365fd1e0e773a4556ba0951dc71056bac1db4d3dfc814ad660d9c6d8199e2e1f32598cdda8690e3fc0660aebc4e786579bcb180d4e85ec8fc07b67f6e2d68933e017de396b29094673b651b3af7aa102a4bf65db142342f9fa5a51d16e3c68a536620a9bf83fad28f582b1cea8770a96d83f371af63f739f0d479626120866d2fdf10d700458892719306363e2bf66e505625dd478484c9a1db7e11bf022cd8f0baafcb619913254a839148b7ee72026e5280f1b34c4126b6eaf5d93545e847c3dcbb5da2b8b707230959e9819e3c90dcdff07e423e2249752926aa60f2a2305a095cd25f3bc02bb1f4ab4f252e2e24c54e420cdd0c6640f8aa7d278d0762eef680b252817a7ed7efa07644a8ca7fabce7e4445261fb3b74b6202f1534e76692a54fca1d2bb620ec4bb89e6a75335c1985fe4068c06513dadb0078aae16af23bd39c52f9c44121fc670d45ab656f59b073cf31cc3d2175b3fed2da240782b15cc7917b90efb1c6449b541228716f8966bf25", "8840c31ac309238acb357308d42840abc9fccdb79d6d633e29552521d91a8983c92ac6f4c106f7b8b234b588333938e18fb3678ed16b2bb02c1b3266b874a9b6ccee03ba06f33b2e79b02e37c86dca717625a6907e9569de257f623b0872302b0ecac59b96a23e6f90da4a9b09eed0377cfb2c36b0ce7e573c90f264b06c21f836331aacdc87895634925005d10cb6809699be3ba444abd27cfa9108a30002e85f648734e4b8fa5a4eadcd1b2018034d655c124b1625acd2ef015d23aca9b9da1dd74dbb4e853fbb0f686ec60e7eff67e58cda00faf128958964fa67e8c9cedb19f54872312ca5990841d15bb4fc0bdb36e371c8900b67ac3a3d2f8e99764029456554aae4b1fb6028ce871f01d54ca1588b3b9519ffa922e389ff1e301938c854182477de71f226f60820f755fc29d7a3b200c053c59f072706038c334d5eb841cdf2f58c446bdcb820c344b5e6c65e73d3c2b60f5c206ae4c9397be50672e9", "a73cd11647f4230fa296c5df203425bf4fdfb5a8ef1d2972e7295f98005c266e9e83a1566c05f88f848577889929c7b28e27e5299ccba8dd7078aa185331e76517c4f53ca1cdfecc75bddbf4642aa2808d8d879a66e88abe7e447518ce80a5e82fcd8a8c41f6b2e85f6dd4c05f81eaf9341175ca5d7dea88193ab139a90b608a57aa02c9f5c585cf88350ea77fd1f49fc695c988de239c121dd8c34a22572aa32f9fcc0151b2cd40eaa95f13b63a220b47f157431fdbd3d83fa52fa0e4ca65581510534ab320c96d684ff6691858c3d13dbc8344d10e0b22a7f3e705101cc42b1930ea7b5d8875018c99742cd38af9a7314a6fc57abbe757f6a6b2b492c859b2180a7dc2f42521dfa9e877e334743c101466dae10859776223d197b34236ad823a269ae82fbd92cd80c8acd29e6f841e911b780193c74c171316a183bd15c450", "88767f795fb525b2ade56b869fc556652724524daf69d8d3bf11ec2f29255f024e1dcf3ecf3b5fe3c33247b65d94a7559619af6c211c362fd57cc5a2df9015bfa7ae635c0b0557b0623401a9fe6122528df4d15f48a05083ea74073ebfee220e17ab157314765ca1a0bc975ca8e05d647f7f4a423be4792750c0205258eaa5547391562b21a31cab368d2133afca6566b5c32f797173051159430a77b6c2d0642255456bad0825b7adbe2981ad07896be3b23f3656554be8ea12147ce2ed3f7e5ce35488e646ed449d60d32406deb805aa8bccd0cc8e4f832e641428b5af0f273db75dc7f83e55042bedd4cbdae3499a3b523085df7bd6ef980650fcf14550c651c843ba4dcadeec3ab054092f2c18787b3d00f522a1f397acd065dd289e0f43", "b26a7a542712c9f6429cb5fe434ff3108daa8c4dd1058d5251ecaf450b0df3c7aa9d50135dbf6007e1cb30abde5ed7f3aacc7dfd60fbfc3c80409d668db8793a0ba1bddc1d09b6d6f3b5ff31e02603cc113e53cfcc63124774fa06ad8c6d4c2e120f2e68fe3c807d2c685b49fc358939a6fb6252dc48ac494e9d9970cc58117114f2404430f040fc2165ae77446e1f10867d84c29d0cccc01c45a244f00255284f2f2ebef77dd9bd74c5983d6d0eea2e7fc721f59ed2ce9e63ec15694f1e833f0b0fbe72b1a94a5e3b1ccec969f98c75f270c0df9f6cc80d648f120038e0fa2d1f5ecc27adef19b7f6b2c47c925850d025717787422fe569645b1b51ee746aeb", "81dd38b2f97742fa68a11ea65489746918d022b994e66ba922fc85565b33825cb79f37affd20dec98ae3e020e3b8aec48cbc15008c5ea42d4e69374867149dc4b72d9b9b4924b01931136cd55f53c1e3b1055143fbf4edb7a58fe52a54580e7210447b0730f54223061e69e277aa32593224f5c3c4f3ac8a68c940fc306233a2041492c055aa4fe266594cb088cd89d77931a80b6b92c6060608d7ef73f2fd7f690b2e197d96aca8bd370d85639f996e7b64119dbbf5fe0e61ebd3929240c0c96c7d937954a3cadd79c7cafea7c99c5b4bb34f70f23048f78aebfce5a4b729ad"],
        ["ae3e6a1ce85220a85f67c2555aa108b65d232aac50d5601b2da60483c7e9719c80a9c1613d43e2bb48a373885ce5f2bcb65c3ae8eedfc37dbd13ddc589b3978ecde453c7589773a686585fb0df44eb84fc99717d219af7b200d290cf0b7e18e2567f15df5527be4cd39a0f195f84e50dd385dd0e57cec176b22bd10629ee32d30fe6369ba6ab9855cd96552dc45144a3297a9edb98c5ba024b6aa61fa173adc96381f27ba3479bcec77fbd72bd223f012dbb0b961c1a380cf458eedf707330946a17e5c91ba53eccbbcbe85f2a7d872e284791fa4f282056bc63823fadb7956d4f3948b00212b24e42f99450445e998aac190f5fa8ee86f011973bbbf803c8c0333ec8af2827a1ba5fedb7157a181885eb9667233d1b1480fa073d5eb1e7ccfd63dbbfaa8705e35612949e165fd6ba8fdaf8714e4c82c8e2b2c93119334ea2f601708d7643f91ffeb88e926faa404a81de5725a17d0e39b11a90d100bdd606b023ba267bcf6912297c3f264192a4de1b597499dbcae18c39df52082c1758f046", "a1f1fe2f58616bf4426cb582989396d7b81aa3fd7911e42708ab9b2a5ffaaf4ee6d1a4045a5b38125ee88626ac11a6efabe08b1a60961bf15daa5f8e4d8cd4b7325d04b621d6d2a3549aa09f8d6daa8c9b3898a31a8daed2704329c0152a7ce14a9b726a351f4bb222fe75f0fa31b5cbafd99044b2f8c9c66b1626ecc35a77a76d31d52a5562ab8554a8f7ab8c314b62670f030ab3732e5e18aca0c9d53524724fa1950ead64aea27dfa1e7c7d2e90eb397b41139ea32c241c2903e3cc239c82704e28db3c93423e85a14199be6c9bf183c2542cc9cdf751225a47d88b9b968a639177286d3deeea4e163df73628cf671b5be1145de13367b2abb46a25a0a50b575e0e2a66bd793bd0023d12f6a22aed88eff5253caa2714607ff3ea75beda2644c395adbca766cb989a5d081aa33cb6d2a1c769dac713f433ec2695eaaa57175744c558b42648b268594a306c5ad39ff07beea87400f7f1438d58c213c076d6", "8c9d5dbfeca92ad188f66b9e399f9484e4cd7d3ddee35033104930eeb340da77d709efd1da5ce70621e231d9de70f9fa8a139e1fe03d064960558a1ce37ac21c25a0ac8c5c2e765a35056d611f55b5bf48aeb2ea27c0466b0680effb26b6c376229a0a116f1eb9195e5fb8f944fa745f0c2b285fd3a146e39c6140f3c85c256a739d6c64f3fd9fd5defa9226383acb82b0446f996b517ff5c11b57011faea79851ee75c860e98fa77546a277b787e0361d4fa9075a6f4841e2908c0a7ac4e0260ebf030050fa00bc8b885454439e3eda2ea2d7739e07a2ff724bd4cd820edee755417e6cb77cb3a8747b88046e6f242119ba3a5cea2c52e6164644b42f49a0d3385b9e5722aa81bb7b7e74fab2a1e59a9907305cc947a3ac5224fb1af7d49f943b82dc89933e2c53a59eb76f3a42ffeb6af8ca949f8e04185c4f1e64d63b8a98", "b3c6f268f910c457de81e2e590e19866aa3cb8f664a7a80b4ecbb92f28c60f7547c9bc2175655e9a4b0a62153d05d296924c38d9bc9938a02b666aa7cf1772ffe655354b853f00876a5a45d3e58afb22a28a1ead04b80ccdfb44dab98cef075b65d1905c39d26b24ce497abf20aff25489918e7f300b32121b59edfd14b9dafd463ced093fffd7ade71fd7e153a1132d188d81ecf2af3c71784536efa5402297385c65b8db0f5f5e4cae059ad5fc534e6f13f27e43bbf6e4e6cda3a2a2a9587a2636ef5b704fa1e2041c1c51b5a575863d6f87a691aaef4b5c6b466f9a05bad733ae8e9b39974f9432e034038e29641c0ac93dc6fa23ea333d8d074741fbd9247301f6524259a63e1cde62659d5ff5f0d8b946c220c3bc19706c1c0ab6a53c39", "accefb7282d2b62768fc49d8fa2ff5a45d395e5675ae07ad28f075b666758e1f521497a60d34baa72e07cca5508a04d5a93c71d288c9759c1632c8cd7e045884366f361d9e9e1fc102ea032864e8f836be7592f6ceaf1367974a933db473c7214087c055b2dbbdce9cc17427083750b313797b98435a331d820f65bc8310c36550292c6571bb2d2f136c3f209f3218876681229c2fcbd6fbfd04d4b7f1ed8c875b3b716dd5867b8e508f0afcfe8ecc618c6e305482ecceddb4755ce7c74f24226bc5d8fecc8a39f66bd20ff0ac69f91f4a49959fecaa272b83b00af771965121536fecf4863ff3e7d6918e093af94d353c0dc3e37907ef4347730b2e49acf211", "a5771ed20100bdbce1766ea4923e463a2895af56a853c4492b9931270e444da1e66ccaefdeb5ffe83ee78611caea2bfe90c6d1acd0a3ce734073eb525c090c067a315a7a7e6aff6e6d8d92c50a447c0a66751bd75844eed9d190ae77324467db2d66248aa33e2eb0a3e8a4462c7f86ded8b14d66c193c18c875903dce7045b093a7c4885d294ae4353fb2097ea17f64ae091bf231f52fe95518a35937a2ee4434eaf1a1632d1f27e973abdbdb9444e53cc8acfc78da556ee18478de723b0cc4e2a00537ec28254df6ddd9c8efaff2d4a77c362ecafbde323fe8fb6a75f6a0bc2"],
        ["93281420fdb359f1a56d9e4bb33dc363e2fb3e4b8bd8ce3ee64bd6449a342279efe8bf19a838b475d504e9393b9d70cdb9657a450585259d93bfe295bad4a6c026371e25508b54133e02a12d3a77a8c048248d925427d698b3b5de2ad652505d614e71328e6e505581152d6d7e7c73bf46bc04b641d2dd2256268bf7b79712935209157b53fd40ead97fe4c81c759bf5b50d66c2f1a67da1d4cc5fc62af979de0059776ed3c8f5dc93d1eb9553724b956d0ccecaba16aa2c8741b5c2553087e95b85e2b737dbf3e7c53d3d69b493f429fa32cb07f0307669403d4336847cf36726b29241859f0a4db6d497318d4028334ac7ac8714de94b13338ab7c087c314219568dab94b59075c6155fe3f6a84d040aa6c41240ae3dc13297f34fb1084f0121ae6608146d41f84483712e51a1d09db9cba0345d2821b09089e442a52bd7dc57ad776ed080373b08422e0df54eafffefca8cba0ec0513c7590504684d395623fa1bdeee30bb2175f2d1ba0b26c54d4ac0f78a33355d907c905d1b9b2e310f6", "b9b358932e08d9c2c2dad4b7ff053a0ed624a079b2926613904d858b788564e6d58dc80d2edcc880d316956ea546fd57b8326113d73f7a09a3fe80a84572813580540af67251d4c3db8d1e1cbb784e0d277773100d69068a89195b74bf62fc0013debe9c77bfe0e465e881dc9f4f444c0df9cbe43263d1a7560845141e83bc5c6919ff375ab4a5bb80eac7d914d0ae64cf79b5a36fdde5419c59f102187891a724793657b37461b5d5c2569e696d877832e171a5e8b1fa48f7ea8e4a291a01d60031c4df8dd4b50035f47bc6fc458dcee9d76ca3e42f4434b1b56b96393e18d25ca32813ce6409a5fcaed25805c2115bb98a8be4ba7428c475101aab555567f4611ddc157d67615be6040ed940ed03292cc0af55438f6c48df678d46610ca1ac3facc64532390887c2b48ba50ec543d2d10e9a6a1de8499c7b2eecfba69ba6fa12b02741ebb03966fe254629cf2d399170acc1f1ef7da04d9775f98a3e3b0286", "9210a7d917b03c845a78ac7ac4c544fac3bd5a3b2786091b2c10adef09ab73ac2df207238754c28f61839dc004bfcb1f98787c617c15c3e163877e0dc6ce3ff1aabe6917cc7d8fbddd55871deb1eb9a5ba2f3c1866ad8eec2ebdbdad70b9de306e52062dd2b9d0674d76b553c582d8a0b002c011ab6ae8920658e69081de00a3738901b691d641c9da263ff03714dc5c8accd6e4db4bc0101991904a22be60e11904ad267e481e1ccaaa6b487a5b378e27385986d38c926422a24a6edf17b0b74231c03144f408a34c07361bb5a86624e20bba8154cb9b3889b549c65012ff4552091d98fc7033711550685e2d6f6dd2c1e5faffc89f674fdd528a7b093f40892da5bb950bec5d3ec01ea724d2ceffba30ff7816701363389eeb3924825ae6384849660000da541311b3170cca5850fcadce1368d8a08d8c30cc4299b38f2316", "874796374d191f893347d33cc19ce79ace1f18694899017b5eb7f90c01f099e716084883fe8c763d1f3b525031ce8feab25abbb458c8d2cdaa87e9ad709ea7371d21b4edbe65da5afe6526395829d6885b1dae7847e947bde224811d3773b2f56ffc927fb1ebd3e7190006b9429f74ae317eb6a436dd1c64ee60b1db055a60b35395f7d6a777df73a3b254202138e4658a7a6936b8a4611480271e584e1e047f08d383d1cd650272832032d03ae845b608b6043c3d24bab5cf0571cae21f54960773ca07e684725fd0bddd4faedde9f53d610066953cf6fe97f55a3bd016914c487f13336bf81d83eea8b9f706edca6c3ceb6fdc55e4b7b961b3cda5117ea039001706bfd707bff7a4272101d8c5c542f9057b296feb83453cfa9998242aeaad", "898f0b8bfadb0fad0168da3cb491dfd190032f5f98e1fd9124595351f571598b413ccd6e0d8fda45f1f7e5bba1abeeadb6be31be5fe6e21e7413d488af70729e70f38a38b94d97465e45f1eff45a1788548f66899538de0abfe216d6bcc700c5340d9ee7f20b2ac7632eec5430b4cb7cb5ec9fe0482bb328a699eccd9c08633c1dc47cfc6804394222db90c4257ece5f3861f99ebb898f677acf2e0507d5776d567cc4af0cee60cd21ab9e7323825cddda855cd95a95756833f5e930aebdf33a058317fddcf0498bd7b1d04693a632e65e32d3cf771168e53544d0025784d13d7363311d33ccb5c50c962de83220c3d9fac25eb833a63890cd29aa0392e69f70", "965ea08bc8573a0847308ab9b6863763215ff30b34221e6b979f80bc6c934bfd0f62d54338fdaa799beb0dd520122318823e87bdd32e886486dada9a03a27ba9cf983d8e07990e6ffcfcee7d4227037bdd4fa5f28d2241f9658bada69a7e873a6061744c04019a2e6ab15d1805355362c4a80cffa25b84405bd9b3b5cb57095444abc9a8a78fe4aba465cbd6bfdc698d1a03b1f351074983fc8ec8dad3b8e5600f70737c9db8236c7d65be72aece5a348d4cbba9f5fb08500f50abc643ebfab70d30459ef26aab09c2a012993dc4305a148a178a44b15d20ea7d610a0f2e592b"],
        ["a9496bc2a766e6752994e9b1615b3e68c46182ceaa9f3300ffdd5daf1ac6a0ef7091ac333b78b861956a4b3d0fff9e78af91bee47f54121ca921c33372f3c2c0f810d4bc057eca7382808f9d37af46e56a862c943a9ab0080a5358904e7862d80abb858d9feaf4dbc4af50f614ae38212ea10ec10deb042e7f388605df95bfba01bb3dda11c72450df6a130622b0341d50ec4da00adc044a064bde3336c1c288225153917b6373e2166c0701de125ad2443e344244c01a0ed41e57ebd3ba162b3906aa7c0d1d197ea1fe70af508c48459271f0a621c6077928803381bb311d2b041f42fba767a7fc2c163f13b90168328636ee778966ccfd0fdfb797ab7a7f9207c46695c265897f6aff4530951c48a03d434fef80e5e403977d6f9014b6166865f9c9a566ec4f1374ebc57a4188075f0af1849427c47bd7a45da65506f9e15428db7ffd5be444cb2b6096fa9ba889840283bc1b4b32d4d54ca86c4ca85d59565e8bea29dc8a82e1eecea84067bafc08f8c1fb33782c8206db62cbbb9590b6ec", "846420a3f3225d2f187c5d0735ec500a3d79347fd5d89c6c534a6e8cafd7eb0cfb2bb5208ec1d6ac4bf39d91cf285cefb15ae50b455dcd91c9ac6304ba8933cbbec620840a089724f084b369230fbdeada5388889555c7e6d3b87fcbc5d49a152a3bdcb78831ae62b94da44cd7acc6b37a2f8d18fe6b22d991345330d980bdf6388e4f58d1eba4112eed81f8d8108a6d05a3eb33584b5e5e18fe97f52da70d580d0234b2c52e887a83fe19122d3b49ae7bee310383a634d9a0f69c8aa5b51aa411d1e97cc5c4396dc26b951f6bd3ada627f743ebde9e3929f42f639fd2cada8f243cbdf4f70f96411c30038c5638b30a99e475e00bb7b341c8bdeba2b1ba39e20074a77eb83c27fdd1d9bb7f68ef9f98896b4381ad1e8aded81f824f0af23d75046d14dae019521274ee1309b875eb2750edba9b83872a04a83ce4e3cea740c912cde5596b17bb35efcadd5fa48603225668af53c55b01df185229de0550fcea", "b88be4658e380932e6e4439e3a207b25ddf7af98f75bedecd20540d7942c072a48088f4be7c4c5be88870cfad5aa00b6814c0f90ed616541a4f5866b7f7e196181d3700b253cc8dda3d4746ca4b9a7826fa8ef0246a0e2ecbe7ddf7fd5ef03461039c5942c1056f744eb0a0bdecce8c082373d10b92cde607fd77a9f07f101f55eecbee35498f72481581ae9fda865c39019ecc41d37d1f19acfb8016503d4c4585d7fd1b0d05f298f53af7b7a42a0c94a42cc7c6743588baa66964c0a01728d43b0c810ddb9408e0a161e09c832e9f06335961d958d484a0b4944fba044c8c64f7d1e852fc34dd85ec475d37cee8a19575896e2e17bee760fdef43fd75839ca1b70a388cf133a601b0753ba55b181559ec045763b17ed354ab92c49fcdf845f6269041ac42c737ac345c1e25c5fae98b48c4625420a1f9547a33e9cec1819bf", "87588ed03226858fd8b4f572b2d7c2364ecb515de27de36b52ccdb2b38efebc0fdd2bb284bc3b09db20d01804d019b8da2ae3281f07786b797a8b16ab47ba1908d81c90228cbbd738c327334a6096ded3c4d44bf3a6e2240b0ea65d2d26947fd65636f650f4c8daa35a40a80272fb211277bd6e89ef7a96aa7a30db20d5af59c2b6699caf33a44a7062ce059c48ba548e845583509304d19b789edf4eb16584d6f0b399d19068bbd5d3970e74a6a85f3b672c0c93d5fc1326c3d110296687a594273f103218253fffd7af14026e690294833251e7bca325968508be0bae877656c7ac5b15562162e54dfa1ae86131ff7091ba6511a0419a184b332c0c35b207470607133542b7ed457344b9811c4c2ea02d9d793712eaf75cc0cd1372955d9c2", "ace834d2aaf49860c3e7fdeec473f916ad189faffd1dcc056e715219b28c4cf7fa79a0b2fa518f98cef3909b285d18238bcceb6b805956dc0979fefdc3eaeae7a63c7556a1168386cba7a9c16ec78c527388f151fe11abada562a0bc9834b17814395cb634f6822954118386cdac8ac2947ae5bde976c7e87bd2796311468c3825e81c5cfbed8f6a334cfbbed009c97830f36f2d1fc483039bd6476170102a351daead8d96e56a98b6ada27a84b69b84745862963a054885b7e7cbd232bc082c6c224b3531f7610f7ce1220b2d3eed2a158e961b24f8d66e12912bcfe9348b2e6ff4a939159b5e5e4943e06dd15ead9858f10ecf48ebfbdb7e2822b0666d06bb", "b1c6a5942bb12da9cb9ff02dbabc3da196d12245eb21d80badc31775bb978a951af6c29ba5898b544117a760a718bd74b6b592babc421c81618cb3df8ea0098908fcd8985900ea6b54db1331d189d788e5e7479e4ed900268fce4458e7bcf71e297b144630e8cf48cb1a6495f02fd2a38d6bb55b39690a425ecbc49768abca724fb76c3966b9aa6f35a3825e4189b44fabee3403321ddaf94bd4b472ba2dbfd34310a7181f74b5c0a058a0b6183d49da7d5640ea40e59941e15ca13a04008909060a2141d736bb1d4efe09fcd5ee115ac843e05918e45012ff6aad97aeb736f3"],
        ["99b1c8309d1485ba4b6e884be7e2e1f3db0c142750b021ecd7ade2cf2c1261fc0cf9dc4f1ab6df09ac30f9d4344a5195818deb0be5a524d67b1a2d84811a29be37afb65083c3469a42be74a607c156699842aba6c2e33785cc377f3c3ff798d92823f1a6ad1a068d81d3f6611ed4cb22c114bd30b3f195b2cf0fd86a9f0d869f46cfc27eba279edfaf3189f3ed95773b59e5d1a33710152c1f349a480cd8bb5d5c28868a63ca45d2076cb9c09ecbbc1ea14711d656e24147ef87946e8bc39ea70b58f3f627895dea19bc8c7be3e8dedcafcd3a40878900ab94d69352dd232db30d4397e88bcba7a8493b4ce0b5c744b5c40aa0d8eca6718e0d8088c1df749c9d634e3c967b7c1f6ceca4dea03810903716d80a2fcf1a70535f188aa63c1df97a0ca13215921f02969f3c19d8fc30439415f5ba1c33230c9e75d93a13cffdf4d16689b5222572e214ddd2884ca07fe08ba611c551ee6022118f8dc8545eca90733f8553cf1e1bdb9cb4c72d3ba2802f8506cf7fd11f09789a7d2af0b8e7a00957", "a0ac32a2543f8457d85eb93482fe9d0d81f19364d66829ad1abdaacd239934d058a072f618a0d6035f1312169912f696a36dc3f74b51e97b7afcb6a4d32d3dea8a7bce8c6a727277585889288d9c807b5843cd88366c8565e3112333d5155386277bd0b802c9b363a50f54b49731f87e7ea792731c7e73b01746065346272ff749ae940797cb97b9b3f138588846d618d0f5ad25babe781f493c588ccd73085e1e07a6d5aa8ae4e083dfaedba25d50ec621c3e9a2c6c8c8b02ab469abda20ad35e035d22abf06f43dee60b8344bd0010eb8315bdec472e41cf0921a04fbc81aa73be3660175a43e366b5bb84f8b99ab25331adcc5fa9bda2764beec0772a402d373cd1daf52dd5dbc7d3f560587481ce6e94a5d07f457bc327321f8f6e1a0129597f873045770e5024d3b900ff4a4b6ecca04cf7b6099630bb55687f4d9c45a233d56ba9b1201c0ac70fe65b3bda1f635be14ce93ccd96a55fd7161e4f463b62", "b752cfcb898ff23ead7032bce708a25ffb81ec4b515efabbf566bfde5f20cf05d867629d1c70f9cde84fb32db1844d1186e0757462b04d99054d8f1a2d64fd7945712fa410a57a2b2524a36e18a0222b45893eeb9ca535815d84f83253d67ecd4ff2d4d0ca03bef5fe7176a1b2275518fdfb0d66e580e7ce34dc9cfbf26370de44c213dc2edef1bd4864df64762d3ae13e3ffd7bcad2992ae03773a04109471c72134edd05b45bb18a047e3fe11ef52e4a221ff8072611e737b18855df583e4453c0667c61c6c5675a497c164f6f7e0eeac7028a11141e8b33349870bf520e930cc2853e971c622831c39832c76a652afffab200fe31f4d60705907e25b80fba3d55254f4e1a023392df92496ce92e423b1e5d8f24002e5ec619076ddb8e96851962f4205ba018f59b7ee04a2762a4bb1ad5da034bc77a160b2d284bb19880f2", "8b05aa87d3ac807e500e4a4cd12d518118eb720f43d5eb0f43316da49747b00bb69ee2ef0d4846840740b0373450dff28e35b2cd9e23671452d7170946982dbcdb24551cae2f8f1b10bf7c028e0a1fed07337481c57b16cccf4322c55da5d5764b98d05631a92b7d2cfd56be46e156f93043e66d72b38efa9d71eaad2c9812eb4e02e3f84b667d40d5053d3f703f050129f376b4523c65f49e69c5c816061029502fcb8a14439e6753bb623b7f70e608b1b7459d66547a0d88cc6a4c973bb7cd6d62d0d1664140512fbaa34cb9e61bdc19a565dc0f3c5d89e9bc87957781ab034f0bd9ed51b56a773221c33f11b48e537accae3f9ab1ed2bae1cab7cde9ab4ff55f0245bca730441c7bb7f4849b919f7b5dcb5b9153b2e9207700319edc6ee61", "84082983c6adb82f2be80c1784be574822d84bb01ba306bcbacbf241f3b39c20d4d6c0425b78c9ad436aa6c2c2b0e823af81c4297bb022fd7598fedd8c6b0225ce3ec45591b0184236cade69f3a9027337647d3c1c947e498f244400672f8b50130ee59a9fc67ec8ef75d740ae2ea3aebb0bd1e0231c025a8453c75565ee1dc641584c14e01aac8548b0ab413f49678ff1b96932a298110c4777c73bc4206b3c22832c0584334f9287fbd3dad243e7d0302b66ba414e8a78d45a072220973f99395415a50cc76ac346895f030a9d255f0e86a300789bafb3e853549eeee7a861100c8465b46aaf2955d6a591a95a9ceafbb6966f36b2d29eb2e2459b0d89c4b2", "b6065e0edb648a5157b65675091b48814cd0a6754fec52c7578be8788acdc743bf1cb90a8b3fb179f4d617419124bd138f826eea6e68fc89b691b83254d7bcc4eae837d20a58f3ef0577f92bf518ceb8170ac35cd095eb8defc17c73752c38913f3962413d14e5f66620646fc601fe5ff8eb011d8598288c4544dd9431284c0c2e115154c769504747f5334cb4ad5988734980467d40c1f53de0ea60cac4b3e813e3d284ce12be09e1254f50be98dcb0ccde66b42f256bac5f03aac4ce2b68312174f307914a5e7e23be6c8c4165beb2c8a33fdbcf43ff3efddc9fec3a4af70f"],
        ["841225f22c05ce6c751549a5cc20f555bdcaad4647c65db9ee91924a5b0ae029fb19a5593ad4c052e9987358eee4a6f786d09d0b29716df9d21454ca82bce42ed9fed9dccb4c3dbea30d39a0525b559e328bd984f53547d54af185fd452280550407318622d53e5d7d30c85ea00b642934c1f413dfd2695376a4c3feb3241b944eda9b48d2d462d4952e4f31dafd0a5e5cabcdde5fc6d5756d1eaba6a4cec08e733d9d511a325931e844d9fd19678c42b3e5e6eb127f63eca5fcb76cef929e2c35afe5c3e5125115728cb3cea17f91fa8a7f0dc7b4bf932b8158853a428a292f0b2c015555118011f912ec19d872693e3da2ba01bc87dc517fe2fd0710ef82df301ebca280b8918e1c7e1d5bf912efe9cccceb61882ea097ab636909da13622b3da8f19289a1a67e062a254e9726b44540878e4c13058dec1e6038d34ecf20742a9365f7d5740a3447546090e8e7384d438159a2ed00d39807a00cf682f7663e711601bf870ba20f1346cc45fc94e6986285851d749d202043e11c9611698ded", "877286f53c7774a01045a5c317d8de97a30658ba088b52d964e70d035490af43445db66fb9edcacfc3cf5192bbefdd94b578f63c90be6b611665f2c166b316bfab5047b515e9b7b6f01073ad181963eb44938dda7f932a644ad28c8e2991aeaa6b2a42b3ff69e9bbbacc044931d2b9b70a3a8d043a6306be5ef8b69bcf8b55e01a31e24726542d3f2eee6597715c9b3df7f4055d4f1046281e617d29ca58f19d5c69d1394b01b014cd53edaf7d550d992c76028f5b2eb8913cbb4e838af2a55f6abadc5f083c9d675e9e800406314825f1c2fae872df31df39ade424d17db91a72b360ee6c05b18fa124196501955fcc10248a59bab01f7d0aa8b7811920fa926e714a5bf417975a0196e707e904254b6ddb917759343b99eac12e75fc46c1886088ea24d2cc2a300d73631d37f8958ac4a3be7dfbaa3ddaf732d9ab32b850303c8f114490f4be04173f8fb3b194ffe0ae055cafddd637ef6a712ab4ed2ee967", "99cfccef754ad79b77c88ba792e1995667217cb020ce542a92268451269b02059b1f9c01179b37b89b117fd9730ff42a9973d038f0575aea142ff1b926f7e9f783cff6b024ecb295b3c98e5dc5fd19e99b72abc72553ed1f34b89990c36e7e556138354fb1edf8c6a71e34e3f78561c619b708415b5be99243f9ea5c6e083e2d35777ab74d51f21ce86ce9e6630e2f2419cce2b765506281ff9a74daa6d0073947f0b4a500e5fa76a51641f897090b4a530115396fcab9fc721f83a206e2e5f1254a037962235f222f78be63cb941109de42d5506d9082051409c269f1a79e981e971e4dd81ea65661caeaeaa47dc38138df2b3da7d4d05cc87551174cae6db31a75f1e6ee8a9451a15eee9e0ec627b53401aee5e9a3540c1e63277282bd9cd328828e873910d5287f995a22f182364433a6c51d234aa7ae8085fd9bfa4f948d", "87cc6aeba5332747d5c9c02690cd2b75d6393fa46aa564f1948bc6ed04a0f4b4663c0723125a5f63cb13cd4c0339b9ea8fdcc1f51fc75ab0ff8ca1b60adfb716eb996beeff56004a926412453405b1b238626bac7a95673fc3be3f311af40bd172d6965adbc6a6b49a4b596f94f4ee2613b29c2efe774a4e61ec2ef2fe4f98426f594246fc46e6154a9cec18a2b39edab877d9a8840bf7b2f19cd150796180c90aeb94b63be5f077baa0fd0a4cd99e271994778f57b38ed2ef48e329b02c4afc479fe63b104b16a44dee02d9b1e6571de8ac34d78de00148065cb17b80708758286d9197b25d57fde39ac56648db62a5f0608d8e067cb92a98d9d6df7b2f5846177ff5cf389ef582f2b7ae421ed4ac60f6e64023332c05b5da830b279bddfa8e", "ab6bff4e18fbf31a8ebf5de53427edf4604dac32e54a9399920af07cf2eedb55e33c2aa1fba3ca21de98836f5afa5d0e98d3be98eb4c61b542ba0cc789cd1934d3946a2a4fe80a229b61000c6ce6c8ffde801c707e695289fbf665caca4391162f97e3af48174a5e5ea53d5c03a37e45339fd61aac20c37d55a2ae711f3a3dfd6c0fb2c7237dced189730586ebb46ddb5d94e281e095d5503515a6194f3cef3810c430a56dcd8889ed638bf9b2da1c72932b3bbfa8c49874cd6afe38a62b349d5f8c1bc568c17857cd03d7e965b1a9f56d073fa4e3c3c3873a6342ac2159324a2786d01702090f205a60d8a601c287ca16d761525d73361ad78852e39a8cacd7", "83413eaec519719f20152d23da69f999ba432de41c043d0f956d97e78df35dfd2f8c75bbf6a81fcc47ec0de2edb983d98638d10d5747ddff78594b8c42ecc37e8c5c5d05c8f131400e05cfb000d84c8b35d675025013802d73e0803162cc58804c1e7a434f26eaeebecb7df3f884896532617c6809720d27820254bd9823215f4a2d6ad79cb65d2ebf2276203697479638c6fea04491f36178fdca0c3ace938e074185a46bd590e9708a9d7327feab2ee10a8eb8e6bf4799fafffb815879b8f320ce5f489f1ffe82a7fd6f1721c827a1682a03f51f76d18b7a165d630c464c15"]
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs,
                    None
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["8e693c5d234a8c3dde092965c33c0ae1a7b27d327acfb623cfa07ac0928563b2bf45feca43760c96054c58ad8936391ea44a25f0121833df913069338b8643bce5a0fb708c057b35723563a12b62ef5e6b62ca70cb96be95c19b61aa5c3b8e2e558df6aab2d8cd8805637bdda7add562afa4cff260c89cae350bc6d0002d8c82275da466e1436d7335eccd628d14c7bcda6ec2f524f718fdf9500c60554c18a05e273bdd730026610326f48c2dbed4569e434806648941321b57abc9365263d93c77e450a3a3f4c5d7a447e83094ad11ae7ee22c40eab5124bc47477ffa8147b0882550b1c27a429ad773a3125c60ee8b9368821958b0931e4b83dea363992fd0a0e30c8836f3cc9239b505ee593ca5e84720fdb116a4d5c94ff73dba21e91655bbd88aaf40af5853250fd09e7f2aed357e60b8d3802c73291cf1c8fb343677257206d127b62fb49339dee002448c156b668875cefd0a544eaad9da19d7e6eb628d698ca54b865aa3b786c518be9e28070757bc111418bcfc364567cd47be3bf", "948e54a256d4428f893f857de0863c47fe426933f237de78206c5b2a10d37503ee0a35651219ca3b06baf02392992559812076d0664a64109152bc2cf5985ea75b347b74f16762447b42b69b32f9bf4205bde18c8b458d1fa19dc70b4bb2bfd23532c72e2a0fab20d6b84d7c72468f84207de11bd1ee4ad30b05c0ea516074bd65986c09af68baf8f0e77daa4695ab3c7be83f035eae35568f553e54c6a259b6473b7fcc2a7a4e8ddcdbd79a7e919a80aa0fc394611b636767aa9b841b28224467b5b1adeaeca8156b291ced92bd556f7e15d39c4308361f7e542679aac467c214a165bf0c101a9bcbc3e8cb38d42e5f3ea9054ac0a1967e2853a47c65ced9dd4d78ba2a84cab5f83f76fbdb88fb279f86e2b325796e1c244c81e0236d5e47246bb5bbfc6924b4cb0a5933d343bd43b9ac94ad919a38b776c9058de52a99902d62cb4892664e7280eacd9d55d1ebad7671596c535f10a4b5d354cdd9f20a00f7", "abf9e3ca4b879ae8162f04165033ac604a9eb2c156e40aabbdbcfbb30a56c96260b7a2f2a65c9190235dd1fec6f72e4c84a4fd886e3472b315d176e5e26f73193a2fc089927c8ee92fc34981f18a8ba17ed995c9479900014989b4f5cc79e31705c6934781a04c2f3f8bc3cd06e35e56e03e4b9f5c9dd6e264ff0c4e2f7eccb81a984d18d244278780299e5d972f4d965346bc1f9552db53a5f6fc3907a3eab40f79128b6ad5a1cbcded2956b7de174a817189066a7cb84a713e1ce36504b1a501ad1541759f8776a27473e50617401f463b59fb0e28d622cdeda4ffa40b6716046f3ae33d1da65c78edac140037562d031bf3358c19663b65f685331607f58d1212b964b0deab87a1241fb76a95bbd40a3b64dc9e6f0096a2649714dbae27845f41ccd8c6b846eba3c7c25d5b81867b0f7ea09e9f7601bf1c7c5d738da8149d", "9851ce894407bbfb30bebaafec7fe8f378411748e0394c3f99939bd000d6c9b0ceece39a0fb5f53e2fdcfcb59d36ab398f54f75816599dc2d53a4f382fbdc5504787b48b57c71e7bd4ffc9c2330b0093b0e9749ff5a772bdf9212cfb08ba10bf34a31f74691706d46daa18b6ecd0da6e40137e4cf55992257b6dcfafb4ac384f6bd4e64579b6d96c176a3bc32a16b8765889b04d498b2ed1a46c2277e7b6b2e2730f6816cccc9f767061ae69bcf9091bbbe57796c4814a2a61c0911190baf6274b7cf355d7b52e0a7392e23fdcd79e4c7f8561d283fd86994b586cf53fa7179d3d7b9d896a5e0e8608d515c7e3bedcea3fdc8bf5b45c240024dfc0220f1f7044173c906baff0c075615100de9a0bc058a43f9a283c2a2fe873d8a013a5865e73", "b2e80139e872acc81c76be5df81e0d5f4bd28b78f09e5f5f436fb84e4617a99c98b767907ed0406a6983857fac5a6e20a44c25881bbec19a5fab89eb0b071d46e3416c5853d25554cf4775bf3f70569576fada63178fee90664e60ebbab5e693138f97c13af080e3d0b0dc9117a8b5cd6793c9937cf4920aa1c55bb55d20dc8a35201805a7cccafd3c7a90f10ce1675f1b07382952f197c4a4eb77b1bf6cf81e34506bbb74002485e6ef4d80cfffb7df55f5d8fb79c7313a4d2636f5deef8bed6ff2b0520ead4f487e4b176c0d3cefc930ce66901feb63f22f7d2b5305fe629f3121292fd956643c989158a2e4cd434c055ea32e52ad0a56e1e821f37315db18", "b8fd1cf13e176731e4e3991344f58345222314b82594f4cba62fe8c9e59e61d26b3d39e447d0669905094c328cd4d151b2704eb5355af44083ad85865c70551e0fa5a0e5132e9a9b6cfa692d7d29447b88316e9cc7711254cf5e44d7379975fb386f5890349480f8322f0692d71d5cc0436e564c3ffd6701f756f4662eb24cea327f5d50f6505be4389cc5b413e0dd3d635f901aa4241ae2cd63d1b30298ba673f1fe8312b5d8aabbf9a30c98ef53ad8505ae1cdee069bec2df7f3b06e5148d434b78eaf3f2ee5ca0d079ca554a3a04871a833767494b9ad852543943352f5b5"];
    let expected_proof_no_header = ["83c6356c0872316f2cc470d45d6388742eb7974700105b76c36f61f86cf5308c6bea7e040df80b16472d06c271d05cffb6c52d58f61ed4c05555f96a0139823113847c746fe53c3e36e1505c910eda994927e65c203a34989e98e6a040d81eb43060d82fbac272d1a1822a7fd5e535e7ad5fa852b76956b2b66245393ee9844227f09bfeab12362b51e06f380946c18f29baef4b3f6d399fab8a740d9ddfe464285c530e54f9ee84e7b962fb3e6848f5c7f4bdaaa7793507fd997eaffdd2df5d31d07edc1f6185b618ca28038145f59592ada508f5210c110b77d8f8708f5fb705ef3b7e820baf20fd963245dd8a228e44f50766d0811e9c346682ca6aa4821b5e7a6493e58c3b75e6648993caaa0798197e316d5105e8c81e9e17bd9261bb721cc2ca1b9239a3fb53f865ecc27a800ec47051cef94eee1524be48c7c3c110aa081b1328b2032b8494631876a3453e7187cbab817714d6b1a5b487a2199efe404e2e83784b1914cda518eeceda1b8c19f229d672f00f49fe24c930290c8d2d3b", "b28e86c401df4fba55e299d2c296ffec59485a0c638d9a9051095a66d2c6b1f9ab6228a9c8aa9f0dbfcde47a1666cd75968a22701eab37a2b95967b6706894c67692b765a8abc717e5dc9bf361e132a35b26b5396401b1515d83497e93d6d848288c3b22bfeede93e524feea1f53ae7d65311e12e9e344220c8c98e0bd78e21d2e64f4d2823efb4b1534dc5767ebe7cd523b4bff9b070dbfa9e6e9f0aa69870d2e5f805ec69c42bf8925e05d12c6c04776cda643dca4029cc9d2acab8e79f5cd4270b7483bb21921ab4d6f7929848736534aa12853cbc026ae97252dd2397cdc21a9fed4a19e2865fdcd669942aeb99731756865014da2b49f416ea7dd96fa7c161a659948a278047383535d50a207904dcdcc65a9599d8b788f9f599b2fbd2a2c0d2c6163baf67fb56db006458616edbcfe7e0a831fc93c3bd4610aa050f8bc69a781ca110ebc47a8ffbf8032311f182862e2c5a2eb25803d71fcdf40743105", "b6e2a6a7568fc7c006ca5042fce29a29637f0527eed79ab13838dcda78c23539a8564fb2b95b7154b10f04b46fe95874939e37fb3ac547e0afff350f2b15307d6240e3a3fd5ef7c1e75f15d1abe10f4c45d6c697afba6b1b8000a204715732341ddd40f73ecce39fff64155a1ba9ed78b9ff848f1b4a418144384bc4a8f5c7d836b30f36d9b44dbdc13ab688b42888ed27ff0b6ba49aae22b3cff5a01f7e48e03de5758aea282913acc3319c0c3283adca7dfbc31597b0daf233f759501a7a8c39a85da0d910fff117ea8fe8eeec1194800d9406983bd82c016c06e71fdd8aac14bf1d51b40f6ee3706ba13160a9ed09e4651eaca6a185a815588bb6bab614982dc47fc5c4caf8d87b4f4560a01547a28732d1405e346da57c07b5e283c4402322b2662b7dd04d43e45ef64dada4b6f617197584183e0dc341ec1d34b8fd0a6f", "8d5b3fbc57f4f12a35517cb0a96a77bcd8970c48dec4765debe928d7bcd128b50d5cf9c84e7551423a15fce384e9206d9281a59b3d6e2af216f2c45e85150d29732f9055707a1923f8665a6ec86beb425ec02bfa09e941ac43cd6bcc0b4e31c22d83cd60f2679f0efd0e96acda5f30e8c06b2721d4c6b65381a18751ea6e225c0956750487951eaa6aed8aca8b9973c95330081d8a5b6b4f7ed0904b063de4c83a95c3cd34f6ba99203773f7ae5860f08d372c3382d650620cf0cddfc2ef5cfb58e27d4930a8b52c90e5f33758154768910388cdbe5a9ddccb42d2aa91a6ae7732d6cbad502eb05131490c7e80bc61138810e953105471b631f5484b298cf3ab10398da346eb83c563bafb566678736b6491b182e2683fb19b644f00e79378c2", "8f1da725ec2d90ff078cdf53040fcbd0b7d01d32fca2eec98a18a0ca9c43b4b918168ab4151efe9197c5541666755c6b9192b8fa76a75d60e5e18cf1f18347857e45c5b34ec878816d5b7e04d7f45dd224ba51f1cf4465425a7dff53e24d7f7b012f3d1803e872f1615d208cf798dd1d55593d7f67ae6c6fd3f2164e16e5657d5366ad95a576a6e65531d620a3520265a165f031a5a41f7e54d3600c63f7c6e164cc576f69de20d125dc45352311a882a24a972b8f2373674a0a959eee166b182ac28cb88aed5e5c810b02f702f557f27416b83feedd88877af1db25ee04399c2879807ad996b39bbf60a36bc5ac481078169dacaf5f62cbb3ffd3ac647b5938", "8f66600e742068232fa776022a234d3e5bf7a2c7bec0bded5956fa43167a93d36ad359159d2f8997be62eaa79da7b1f9a79b703379bb989d14cdf593b95d2fe9b740124dc875fe9020e6558a050558e6033db878e8a8dedb0b68db476d6734e1408a93e633d7d9f3bd7c7bb00f1a89b8ee63a4403b0b54c328c83acd13ceed7630f403f0ef2266bf3d5043901f798e496b5c6cf5bc82f699236e98e3970e0fbc2c279b6d92e70d4bcb85b3309500fa1d9064725f65a30b341210ff370475a00a12376f29b38b37c8e626c85a18b1f58f53b1ad8486fb6bef977d6927afc36556"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof with header but no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices,
            None
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let z_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        c,
        r2_hat,
        z_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_bar.to_affine().to_compressed().as_ref(),
        b_bar.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        z_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let z_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        c,
        r2_hat,
        z_hat,
        m_hat_list,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
