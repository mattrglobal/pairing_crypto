use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, B_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r1_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))], c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)) }");
    assert_eq!(format!("{}", proof), "Proof(A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, B_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r1^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ], c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000))");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(272, get_proof_size(0));
    assert_eq!(304, get_proof_size(1));
    assert_eq!(336, get_proof_size(2));
    assert_eq!(368, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["8cfc18ad4a0f9e9521e22f7aaa5f69695629e93a58198800a07cbd5559beb14330254734ea538c306353f55ac6060af38d1c05a24b224d40fca4d36509b7ec8fb33f81a8ddaddd1244b5c70d2474d0b5b3aa199fdcaf70467ae25477f64c09eba16be43a3d823f9118771da10fccc1ac42bd5da13e25b8f3092817316d04d50ab2f14c4980f553d172713e9833066c7e2cfe6e75d72b7d81879b188ef3f8191f8bb8561988712973ebb36461bf721ae104cc1e9a8752047b996cc9f6e3bf876015225e1746456615630b1b31d120f9cf68e7170987c39c1145cedc648fe3dc3b0f240df9032d3bb797f718e8d408930936a04525a0c8c4f99938064c407cebf686382ab2e2ddf3d0d07bbd5eb63138f56ecdf1689fe54cdaba1ae55fc1689c67aa42038078cf2b6d4cabc617a6fd55465377d75e20d8cf6d42fe72bdff99deb926b43b9dc699ee43f8f02c4dcc69c2974d93d2b6e10675bcd865663bd363906b93bb1e65c2e39e3b10800344e0414c0d4245d69572bf85ca172246bb56e5d5182a731d2417b8883e3ca018fe9a6e3424192937bc7a023dbd06fa0f350d39c23638de478de79055d942f97eeee939869260d677b30e452e863abd19d37d2d1f5a3602b9417288e63c22263e4adeba3b80", "8e7ef5c2a43c4ee07d8ae49651796ab99c74496c7d8f8d22a54e273a3c970414602b24a19d06b0ba98144d3526afc35f980ccf44a8ccd9b7cc7bf60e2f4fcd7972c934e3781611c38e8c55a1af0c0c5e937ac092264d12cfe109274a1686c3f6b10d87f124c05b2aa00caab7f6f22c3b1dd3da64f4524d1f1e6261eb94093b70bc21a2cb0f17601b707467c13270c8e4682c3d270891c8f289592b16af231cbd922afd0a022ce57da44a9a6505c02dd026c3d91cbcb9d5c5b34a54e37f8b2bd30fcdf6d57f8d8c85ef241bc08e1d1ead650b2019ac465680b2887b707d0d12ed05760040ac16fbd2decdf478f941abb5591dc9476a0eda48bc1498dcb14acb230d27504e3f3722b10d374d5ee03676ee491aab5a034eb7dcc47ab4588a8fadd64137c3715ee0972f13a20df5038efcfc21aea3fee12eb17029a92d473ea9dfe8e39e3de1654fa04345a03bcae335a65f4c14a1647d6612df0f90c69c998a599b4742ab197f6bd696a2da0c82c870c7166742489954bebeaf67f9aa8b93b21c33c5e782140cc4bc3898ba9f3ba37c797104e7a2890b2433f39d10235c5c5e3aeb34b1ff4082266ac603cf760bffef7fea", "83e15099a8a1056a88c164e3d284bab1749259ec425aa0c28083a2c06f0f9a38a2b6dc23780c21dda99e77e28b1b830d8539c9a8c67a785d59cf57bbbba3895bee305eb3098af12d2ba28f78732a6481b1417c63dc9cbe8a53af7c45d6c98deca44cfb08c706a4e080546b92e0ae49fddf15874ff1005f33eafbce4219430bf03bacc87ba41b46b724e93a1c249f9389101ae6f219a868f47da56cc633a0d83383607e5f7e953dfc13c1d0b670c81f3767fc19ac83298c2e7e7367659cb573cc9e86cd93e18543cd12ddba4b640a9fcc5983af42dee16eabd85efc86f080f99ff5db3edca8a1022154235899365c18300cd695385512399e31901cb6e0689f0ce8ee6fdd820df8fdf46ffb683ef6f8494c7b6f3e9cc7add992337ecfe81d368290d7b7fa5cc45f6fda5d1acad47f927f071ea05eaa6ac61aee9f978f0766a727a2998932526a7e7f20947165f05bbadf0f494894b88af93ba347442d95f3d0376d06952d32e9ae859a2e68b5d8f5e19f0d879e5d5068f8ba1a8fc4fc2b0d92581d46b23dcf801a9b6a23cedaa02cacb6", "89b74b7119c658d6108bb8a6adba92df752ce92edd31e4ef6cec5e8ec00c45a12c5f652a777d851d4403f227e0bb134fad593c4734b36f80008cc48dd1e9ac38ee0530cf7a4d0d8f664273f149db444f689bce16796046da3dd4c1b68b5325e78b3ae11eaa1c4066f007319200b31bce2166fdf44fdbea9aff1475a493796adb034d3c3ba250bfb037e5febb2671259f67c0459e12019349a8dddddc92b19b4a3f4728dbb680e026cd1b2ee9dd59a7e137aa260bdb3247154f8516fbf0959fa8c2b2495ad0433a8bd7753f1aeccc15332bd38d979067d47e37a12f2ee911cd5661256adf9e5533b1f26a0992715c9d7d1b997231c771f1810917be1f483959fd309041d9318b125d3a79c8131fd7967b6d1de8e4d1bc39db9f800d3550835a3d78f1e9b12b2aabff3e9a396784fa67921a6a67e9d8195db46901cd585d3082fead51c57e69039713946e5fd11246a0ad58339b286ae2797d431b93a815bd82ddc7a724554eb6033d77873c6193b5fb68", "9751cadc76621e7c1b9b74aec508404da306d099ffeb794b7e026466209494e9d0ac7195b05dcdeb9e43229f3a347a0996259377aef6f23c501a3565db82a99bc545190ecde4dd55ae87dbdd25b876ffe6c99e257e63c61a73360ac04cf17a66a0176176e5ec2ebe77666d877472251af44a2636e4cbce838f19651e3479d640036b55ba0035d8ef8b228a82070c709f5e4c673b72c7948899dd489fd08cc71d5f9f07d5406baf0b3ac3574962ab0fa436b32af2a2fb183dc7434e75c69a63ff20dad437a0a2f09d1fa8b9f7ca32612832db39e3063ace97ee9c05ee4ea1fbbc82731856ad5016693912f691569a3f0431adce851a3d5398d7b2642d84fa9e038e31832715d7f7a5ce7a493be6d81be0046566d026330231a1857019683a75dd23234def21ab1c431179d37c830891951dde04029680e863a216cc035516e76f3d477d07fbd923d63e9b728554966f8d", "b61680f923c52b154a077c633066f03774e2aa558598ad4cc62d0d64ff34414a1b34d6fe654512205beb56e6acf5f8e6afc8f0c0b0e616641c90e80e4da25990a99425339fbb829429fcb0b8bfb084e2e6817cea89902b4a3f150714756adb8a96641e63c966d46e5d210675a8058024077b100cbcfc8692fed6e08bfb30f4dbb73271a6caee3ed45f987e76b9a954693a1284198152ed327e27510b0c0a601ce072fbb4c5984410a37d8638f04a757505848f6d6926ec177058d404cfd7432c022429fb82077f70251c5fb2bcdc78e7623341505badfcfb38ed547001c5064b164dfcc594e53cc7b44285797c016d1131c0e07ed37fe221f841dc2c5a00cfd8437875df4f930665745e44ba472c77680fb69a340fc60a6e6f4a9d67152c7d8ccaa9b31fb649fb457fa56c3d3e91e8fc"],
        ["872294d8fb28af82a0184e3266d8a61a498f036d45f9b73074cb124d7086ecdf95b5a87b499d99010e2a51c7008cd36493d9e18b3d9b1b15ca1e7f8611a768b140797bec604d64ec7c0dc9e8889349a8b9c06a12b721f79d0f11e627d8b27818a42ae97d4ec256744352495df97d5e63f136031e60fa627d728687bff004e22e237a152cd48ea5c91d2747b91adb37f3305a8a7ba0adfca0bfe04fd2c150248b490c848d973c9c7bc24e66c30f31346b2a5e0b84eebb7189efebff1d15711cd6cdb1d13d12bb7693918e322b9dae236269039b82d91b2081b69eff0923546a061eeb2b3c0be8f10acaacfa1a954297ee5b9a8a98679752b4014417004beb1405eeb0fb99a74fc7b93f182c919fad5c2461c755b58390d2bfb463555c8cec745c9738155083272f53d836f325f0a046b3503dcaec96d92252c851fcb9039fb50b2372d1933d66738dbe14dd38938814223c13de394467c16c3426370a133acf03688f1086bf68404fe39a89c363b4d79660a794d6021be7257fa34158cc81a3d1bac77894cb9783f4c7a77245f13d614b03baf5cf03fd3fdd1625dd0c4eb7f4cfb7b0719aa57fd9b56889e00d22d63dc168cca6e217056c1a35a806845d0dd7db22513913168e44c3cf1e6f87dc85c65a", "87176b319cda7812ac7f8f4d98845a1d7b76a2e841b1f4c2280d99ba1e3c47039471e693d575bc8cd3ac90192009aa4a84bbe70a36fe2f14ac3988a6656bbc7e1a3782808e10d29b9fab272cdec5499eecbd79e4b3e60a16ec343deaa5e9e904a3d85832b04a597948c81e656350bc533cbb6d9731ef74ce14ab58da015997693baecce20ea98ef930b9378e4ff9dcdb346c5e3f18e74be4f39decd89c72a639be5e629d5263a72d18748fd432f0cbcb344f3893764aa7fa23c5a2ff3f71860f0c55a7920f1f4bc3b42d4e98a1f86e3270b0b7332e107207ef76c4a5d4a69be47e33007c17784d3254f3aff8f861aa6f29364b6b79a55e073e544836eb81ced10bad2a61bb1fa53f91d841d7f55893dc730c2c8978b24ba864886edfd0b9e1f9047eebd0c50d4c718ba61a673b8115ba177105c062ca91d61312955f187ee135024df0532cc87d74c62482838dcdcf9529dcd7b91d087a8c3826f9792647dc29b2f4fffc2e5fbfd0dd223b12420e212e5973bb16616b33c7f9464f1eefee336d8c86e4ef680cdbaf16756350efe50d903c69eca71b9aa1b067393a6705e861228205ac9f891ce4384dc8d961ec4e89e0", "8238739eab550b4a5b83cb8804a0c6cb7ee9afd3f32184e06fbac344b38dadbdd9eef3c18c2a9cd4a63f42d64678fa76b551fd04cdf03bd1e1af8c444c3c8d18c63b6cc30bef28a0a11d9ab891952c339581c3c85355bc2f3408b4045ec8bc79a1f3052f73f12a771784183318a4254688b3021436a633dd5c24eb62d989e1de4bc52366b5ccea5b57156cf9fa31038d6e5985cd0ac2773302c6071f1f33ca2ee16241553820b2c669e6f15094a394225255a69958e55b8b4c98eaf637809408ba76af59be18781fc4a59e620807f0a627b8fd2e7b007ffd89d061aaa56af89136a46e971d078a3e49b291ab6b9dacf70682ba6b7b4b8d4017942dcc211a79ce782d57d216af9289d0f89488f42e690e712b4211777384fd24780e0ace117ccb58ccaf59c2a1fc77d6726f70312dc15b3f0055e666acd7b8e72cc4782dd7facbf98ebb9f10d452bd4172c433324ec33d002a36a3cf2b1bdff273b058734d6b678f9f676e62900e58c131d4200aa0edec54dd32cfe5f6f1e3da4cc4abd866df181fdc4650f47a62cbeffc3947a67f84f5", "91cdc043cabcaf1946a22280dd2ff362ca2016a85d122eef36f75adb4027b7ee979ecfdcbf9cbb8c2a347c59728cc0f38014c256f2bf8990df3c9f50eaa0d1e0c4b48db143647b19ebdc2498b68b0ed2c2947263436ad5d0985af22767a9afc6b1c5b39088aae2d80623179bbbec333da13690521f5b3061e3901f6b822584168f988dec855d2b23aa33c884e4b124bb296d2bb8e561436c722a4196eb024dfdddd7f31e24d5107457cf0aae9d1e5d710ad8b76499a9fd5f03cc69705edfad84785490600b2eb57ddadb040e859b8b7805e125295bbe05b7a9806ea1bf52596914c3daa560028dfafac16faef27e2470010913084e267c691dfe3515a7f38772369cf54624f2b1f70484324f19a87c542f8409d20753b9695f455504a9a7c11a2d43c5033525d1de149f6559f666d01c4610137f3feef97f76e4a131475efd5dca04df1cc5a8b090a9b166a8a5bcdf0b5fa007e7e1cdf2f1d715550503088a24c6a0cf7bf8bbd98ccc43a4b3cfb1dfa2", "a24829424ed75b5225949488399b5ff6272e7facf176ffd072d87f517fed78114a8c915782b6e75956bf66846dd272adaf78b61d3a275bfa842437fc838274c44fb6209ea45ce40039315d5ea2c15831014d4e9309884aa5bd345f2cc4dec6eba9f65cea62549523c011c2de75d7503c54d1660087b407362826ada36a51d8e67dc0ea5f9a65fca218fa3dc9e8c63c4436fc26f54a13d0b45d42a3901eda7c407e7bb4ad8724e79e6a47b442105cc0ab4fb96c3d99c32fea69b471ce0110f271380a57a4bb251910e6ae139d9ca4f08b05b6b3aba8436c643f78a96e2e02273bd1bf231ee093c48e45444253ff3bb43567e5f3722093099ed41b4b9dc8e099a141895e5e3eb6c404cfd0c8f6e52d356d3566131334d5b91b03a40c6508a206a2703fba4237884947d04f864747efcd035575489c71c7192030c9097c7bc9e64270f1e42fd78ba07124159b610702ba87", "8ccffa0925b8072b32cf848c16d24aee661e90ec7df970889f1233bc3d590df5d20082958377113a16b1dd1f1f039c7297466656fae6cfa77d27590237f652ae8a9573e7f036726613db2c2cb0d9eccb278db3b90981777fdf5c079114731955ade16420c6f46737009f0d680a0ddbf3b835d378329d1b4010b423fd7f2a6dd5c88585bf511b541da4b48c9856638e333a0e85e9e6cdfee247e664413e3d9aca0cfdc3cc1088be6a03f3810c9bfc30bc6fa041adb1a36b3bb3e7f7008a92fd13f571c75b0ecf46ed52759ac672a2a43e326b9675b73ba36518a488dbeef09a646028b3eced0ee08251f0be833726eac53098b6da26d6d9910eb8e9a2328a18fe9e7e0f7bf0fa747dd5f9b80fa898fd322d2acd025fc8af6227f199805ceb549688d20406cb85d6c3e3a33bd2ff054616"],
        ["b05c09a97506aafbfae77bb8c00c057fa1bb7255cf18731e8bf8db2bb0944ea5ff7f30dabf7330a6a9000eab9482d47f95d39c3bb7867d7e25e3f7a33d13ad1c2bd9add88d87adc5de17d2addfdf7a37bcee61b580209997f92e207e9628f7bb9282e66965cde77dc9d22bcbb4585c76a911c447bbc3390d8f75bb112ddbe797ca745b37afc9d9bc0f255f62f57b8cc120e33d5340e285d759a5ddab68859ee880a64c77d83c3ad0a2a7fadfa91652f62a2406608b0e57d8ec17d3612fe7ca75ff7d48480a2b60d26b7a71f7cba98d9021ea2af6483e07171e1bd83716109dc4ace93d1a316039694b7c533a00ff9e735edd30d529a614bb1d7662ba8c1f55cd15a860dca5f150edc6e99170ec92bc634c0d8d2d33e8da3b4f5d0912e7bc734a4c9f1dac2de9aef558fc3c178160bdb95c4202cc80b1e4168836ce29116a46876e6fefeb4ca6c51ac9cce2d5b4829635454d704f3ca09cfdff0455b02cf52be05fde0f19ead197063b9cb23774c865ec44dbf7d9ec90ee13d297ac6b41edf8fb25680dc1705c8552e042b98a27669ceb47a47296be4e595083761f2a9dcadaa0f6c31bd2528971500bb55fa18bdbf9d255d4b4e218c382e461b78b2f6f712e9c7477d450d1e0ed05d19cc7c4f1bcb2f5", "a754545472543addcfdc8f880fd4792aff39bda3922591092e837a5b24a65d45b6f01b81024eafbbc049bc65f607630ca7d77efc8217d8d269fa3ca5ef2568db335d0a3cae75b9a7141cf4279b675e3b5f42c2fae0cf346df0f563443c22be6b8659e0454354c1dfe302b73938f480e27a299a64eea183173427e3513667b2e6d147b8b989067475638e4221a9340ec463b6f57431dfad7d8260ccd6dd32d330eb85873f2d12c6a8c59d7713804f39a7297e43c1d2410c5095895f3d84916b9c9fb8fb510b5a5e6269e556bbcdc496531259454623683762eabab8f0b38df9c558790dd3a28c2ba58a46de0228e2c4994eaa86e396914af2121586f2ef5b12d452efe4bc9052dba9b343d1011e8a86400e2d795bfc238084bea4ec6e450960f9cf4fc0c587d5926d676a7861366e83762f3b54cd64ad18d7c7747fa95daffab4da9724f58b461e0e69eab0018026c385004e585feb53356d0d194a0bed6b5fbafc0370ab90accbc2bf4809d19cdf37b423dfb80d4d976176c874bc983751f8026e0a6119970c3514848ca3f90cb5d113304a1bb5f190b9ec5160b6171811a6a1aa8778ecb65c3e7d3e442f777e56459f", "b11be8dad28844764178112054fcb57035c2496c78032a5840814eedcf335e434a1b55bf15ad7b8a311c460e2ce76dc082782b214f37adbe9f9983b11b76eb16d481fb1843671a8229bd1b50b089058b18b3161a340a22b2e1b4cfcbf0432571b08292d1eed6082612e269eb7bfbf9b8c2b3195bbae43828f84d03671fdde8844e6f58336eb1c6737d979b35a9875655337b215611397ce289c3acc46b4752150b3bf376f08b06a730373d2b5890e50a26298d2e5418f791d29a0cb3cb83b570a8aa59b88bb71b9f7a76709ba0a224220af2c8f09daa9a915112e11f3b059574264fec4e04d5e21f64b28a4f2f5e99ac49460e6014d220b929d81dd58caa02efc40300e0edd2c4b740bab0b98ae0917f4a3994df24839a7c09188478f30a39dcf995c8ad6204292517f83da197b6ef4b6dfec5efb98026e67cacdfb380345d77378a9d4efdc33f16cbc5533eb943a8c7284d12244d312f85540307ae3d628901101c897d1e55750ba8862d4ae9c0ec7a4c7e8e780a1f4616ddf3613692bb4225c7b41802b9eb78821b8d044e51c1ef41", "86043d206160748d8b3b38cb32b457726d7e46c2467e5038e857b739b3aa0d766b44ce5a82a30880bc59054992cb4ed5b4da751e6a7fdf68db51664ccbf53c0f6576ae3dfbf883f1e95e97488923aba127aa6636527980262984979224f03381b12e560707358c3aa8497c413b905b931ff1c888bd849f96c12211f47153352688451443c5045efef338de8092f1301e3e747041a056f0b395deba8ea63ad995c6bc4a83e93879a75707088c398771a245f587d728accf60d56e620f9aecc3758a6a377205a909514f82e422854828f7589b337578d8f0a2a3fd55b67339e95f8b7cd1ca9717b7f6033b52a3a1848c40383cfe3c3f2017e6720d17170d81ac78f26516efc70f92fbee3383e51e372fb96c590b38deefed3da31540fceb5cbb94f4e86ac9522f123d9fd09f9250e78cbe47cc6a9b8abd04edd39f6c0cc0b17326c164d222e3ae5c6c05ae4620f318c30273805cb55a55e2109ed905c9d2f1a0b7fea48e9c56fa9e122ffd656a585f8928", "aea72d54e6918b00159355b4575d8c6115904651dfa215b38e8a615b9d9fc940f99f8227a3b787e9da4ec22a8c8ad07db551363890fb68ea9f72fe83af5f071d05398ef481e585b4917e7903e0243fef9216258a9d309c08608ef268a51d7293839f0107e099e49a8cdca6b89862e371bc101c3d7edb7a5caf6dfc388cdf11dabf2c260a0118bcf9e10dcd24c83d442b4be7034c9d3f3b6c4c6201a4aea4e6a563ebeabd81e0a5cff41a43374569c4db5c980ade3d20c57b752aa972e73baf2e1f834ca308e286464818854e96ea8f3f3eaa1f594e8175d069c4a4a361d3e9d7a38965d55fcf5d0d8c69aca34351a194236c62ceeb48273c75364c20c1cc5aac26c5599aa7afc3f3d47ad7308b0188ae182232ec994774f39cda93c8634b31702614e05d400e74087aafde89562b23e659efd8c51dfc6c7f11507bacfbe5f409f8ce831e1374f9172771571add10de76", "8d5e4ac39d8924239d14a5e42e74e49c997902d92d341b15406e33cce406b8a64619610afd1798a1754a676a6b8c4bcca784b109a25bc605158db56f603ed723a32beda4c79adbd9e47392e17b569152b0caf16b3297eefb7ecd9cb39c300c8dafb7f4868c78cafc252316eb422bb6266e28a18325a092f1fa9caaae3c43a51f09cef92665226171dbf007baaf23f31a6ab0eb4eef379a452ed4e529450f712da2c31575f20ada788871bcb122559f2b1c108c24124f14d9c6b8dbe5f0c6bbadd19027ce6cfec73470db7ea1e276eb9f4ac98a74236e3960d91a64547353ed70b6399d47ee78d90439822c55fcbff4cc1d39c1ac478a3892cfd0a0ba4d00ee4fe0bd718ee410df2f15e7cb2fd9832a6c42696d328fb15ebc9dc7be08e6cbcde283de04e80be653e076dff732d54300d9"],
        ["aec31bf2ad578bba894b9c410f5f4d93fdbe3c0967e8a4da3687791e9b1a3f909935a8d0c1545bc57c764fc98c411d61992c19bdce890f0ab66e531575f3e9648d5247b4e65f2cde08bae04381d0024d50151ddad85f152c88fcab7bf8c6f855a3a09adf7f2c81c5d93c078cf78fb177fae31d17d15085e2ea693f6e246d89ab5887442decc4e74c68aeb3ed04ef8050208748c840e5de949ff532b029d983ee8da915165675da08d43fcd15033e4efa20f39e3c62f224d3f85882c3b0276ff1e0582a61c9ff04bc19c49b832797b42f31e40e7bf8da3c33e5af9c24daa66cc0fdb3a891a7304dacfd42eb8b483548c36b51b185fecc97a0246f48336347fbc87c884e1f9b998b53d6fb0cc15bab10232480eb81e81902e80f0ad6d6387a3d95aa0ada38fad3623ba0a94c2ea9fbdc5a6f65d8e930a297b6a4b165fae34915fcbc3ed27600189b65e8c71f68915ff1de08e5b0bd2d6f4cdb750ae061db9cefcb22a1798962438446ed24eb1f0a89cb4a19fece4e7b4cdb553b07347affa55e1eaa46a1fd9016512ab7960c228392faf01363baa4593f0400250c59afcba43383622ac94e66db1c26e1d3dd0ad4e76f1f0b00631380b438257e3b238dd4513e7a6f48f5ceb8bd1c237055fefccb54ff35", "b6c303765edbc50104167338d5f2e382bbf2f904c93ea094066ae1a5ac27399824aaf0c14ba991361234d8d1f62e12038ae8051100f5ed11d78b89c9766ce4cdd3fd7517289ba11a01cff7b0e049814f0a809441f354c82ced973a3d08bba11b816a52b5577cc75e49b59013c722b7286e1bc2f929a1b9984841a88e824801ac81d18609f0fcde1217338d5681aa40b55ecac5e07e43f8de84e8b40bf763fce102b94e0d557da2e5545aa7e784480ec206bb36c8402dbed2316a3ce6f510eb46b66d005719e222b4e22119fd32716c4a37fa046dad3e29b7bf96f5a459ea35ad1d08d89725c2903ab3c6225092c7ac3c6e2583ee1f55b912f426ad8d87e667c79127698523bc2eac4e1ddf681198bd1e62f70da7c0447e7d1610f717a11737875e3dbf50dfb9a71c00469ca79d7e9249142e1b5ec08e83011d5c3140e956c44c82f45826bb30eb8f95debdfd495b120771499a872f0d9289218fcf8b5a03e8d5b15874fcecdc1ffced780de2acdb37fe26e77faa68cb50e35d82266461cb3236d3ec7464f2436c20d389febb7a6814212009402783776949893e7c7c4436faf9cd0380551a11e190fddd70a2c84d5af1", "8cc9cea5366748478b06ee1a6ada2759b05ed3d51bb154afffaa0626af4ab8d6d6b4606242f7c904232b4a62ffdc5e91b4c877599c12d1269566fb1baec38cf18d2309da50da0d57fae90b445a02669627cca1db651aaf3f10c038adbc4a479faec4ab28511959d297b1397210d894b5a8500080ee0c0d99899aa3f4db6a409d24bf443a66abbe4a185780cc60a285e053be694dbcdd596a6233b60e9e131e76a67e0302c8ead1e3a2a43d8237512f8c271d192a7e6e1178ca82ef83b8d534dc626e1301c53682ae921b16bd83e5e2600bdabd66cf39bc83d3f1a04a0994c9ca738726a84b86155290a2fb2a325cc4a80a69f59ed4788f4c32e6254b467427211fb5159a726abaa2b622ef9d7b7fae1a088c11bae83b04c3fd2bd4f899371fe8160146f1f41cc1d7d65f8cb0b1bd807d0cbccf004e9b0ace08ae617033c650c029790f05fe86beab69756454850be77a58f8c2e1ff9cc454757934e37162348b616eb0dfabc89e43fe6d621ec0a6b3e60c1dbc6a9bc281525eb40b69948b7fbf8d31fce1f250cb5f618802ec6f18148d", "95652fb268b8074bdb4e08e344774d6ddd5fc6bd26052254c04e2530139c7ca91ebd9c6490066be57d97201fce6f71018d7ae6678591303578bb8abfc1d6b2762d1eb902ab32460729a934a345b849ce5dc0a4ff8be01ee812f3a4b69a34df89a0fa2ad44c69c8c6033c57e635346a7fe39ba8941c6ee48cdc6ba8713bdd3b45573878a3909577b5227d54f5d9aa10731136eaf79091237145a64a91c0c313723503bbe20dc69b75acbd7d8b5ba378535bc6f3a34f17659d3734c324bbba5ba2bec17f0aef5dd760344b7a7004ffa44430d3820cbed7a00af6ec5beb01126133d5e124a79d8974512541da68b5b381c04d779074c6bd25166b4ad41b61d988b65c73863f86da41cd76f4923042445252415cadc680f181353c1451e00acde732bf9f1b2e753debe9715c5f8f8af5e1b82569d806723b12e0dae51dd71b291935e37335f150f28005f735720b94c89f912f5aaacdcbdaeed3b69bfb2dd275ebce8d33d0788655f8229557b7e99a17e3ac", "aeab516efcda79d2a03eea11ec25a7be3661853309a7fb1c42f85167bdec80c23ec6f93ecf4a01b9d2a1fc01233f6a52b348606761ca1c4898c9f51b81f68941c7a64620ce6bd912f2fd3ca5fd30e07ea4c35b50fc1bfd9e15fbcc15709bee8aa03d25ddfdaa90fdf92941965204fa25bc9faf45b98a2d897e1eb5a69979951d3b06fe1a97839653a94bfe53576ed30952627d6d01e2e1e5905726bfbf59d80dea83e058a64d55ddaea987e13c514241345b3f98e04ae30fb85e9e9d8bf37cd5ca240287b33f0dfbbc7c1aa367db8c365091d7c619a5dd40a9cdd3f8084c63911a10794973544f1881b8cc36de9c21a460c550bef549e6346a02f468996ebd2e2da57093a501f5dcbeb29a0cf312f6f5202664856d38821a640eab17bc157454f41a5df9899b435c23a032ea1eb05da864b1e0343206d18438d231195cc8891cf54cf48c9cba4a9fa525737c4694d0c3", "ab545ee731576b340160c860ff856719ab24066473e3508aeba508178c6f9a999a7dc98a6658044a51d0cb407acefcb8a6fd5869cac8bc5bf4e9a52f9c7c951cc27ab80952e7c5b4a997de1a92882c69ea84869f01448aa6b2dd97fb95c983fab3bf5423f03b53aed813f1a71ef3901a0b0a97b3c292eda239bb24e55232dfaf81bb1358c311e60dc887410b1617c95f12be8767c2d74d9c5bcd5b7d4a73f8cacdbb66c6c5db5592a6a5eacf2c7356155f219b141e8185fdf9591438f68d0c53a9da34d6bd82655aa8ecc70bf53abacc3c018e3fa4f86f284995d796036b4c1600b25f1f7f132270c8cabd659662dc3369f647efac111b011767a20b2beea19cddedf30fffdc7c087c29014758887eb8253712f2c14ab511c9d49dfcbb66922d82614fb3143623ef0b05f398ec461b0f"],
        ["b23237ba5aeb33509b7dfb63feb27677d5cdcaaf039e26e2b42992f9bc7f2cfca911c06f800039eb7208da297b11e8edb736ea19a1bd607f28c37520344d718db76d5a0643c56bda5fe10eaeada79193693054eda7600b93f6870bb7f8d26d48b9728447c6d114a5f90b9695fffb366f55e0424c1d7a197a292b62ae73dbcf69c034dfc5f997caf86bb30d437d13d4b62adbef98f9ad20f14aed9a75b641b9a5b616a8d013a28aba4290289ed67ed34743bbdfe032dd952208963b614561589783c4225d1ec8a42452bc1ff1547fc127223b194ff659dee03b2f3bd6412e2e052451ade5662661e2ff3932de6331dbf616633e555fefa7862ef29a3763fbe3f66d4477101d77e7c071559857eaa891c55e85a16e8705d05fb3f3e69bbb8b72841e321867c8d731d0115fbbd3b7abb8e552117066d16e2f8d1b07b45a7e060c81f73194b664e9d604aae4a79bbca8e89213788f205c0e3e4ba4141c7bde3e22dadba08342a30e24bc405b0d932d48139e55f6b121ed1bfe8b76cfc255b6ddf55df694c6b71639a9e04a6a0b4c7b22def1247eaaae37a3f2e0c77cf99f0bc8cabbab97249f4833b9dfe8b8a3d44e715afa5e092001bab1931d47f1f5dd0d63c56d4519e15fb7028060ea373749c87ad68b", "a475ad288b96b6426869189066460fcfe4ffb498fbb1e0b9cab9750ebb49a4e506573347c8acf932e5a1f98078411ef7b0847d989d29af8cbb2b757c60efe5b232014d0efa55ec6d0f2d93d492a8c3a07d435059b6b7e4f5ba9b9e38d9579af38825672b22b47292fbccafc408427379d9284e0236aab085d6d04ca7d393d5a78b16f7ec4bc63b2445f3a614d540dded61076eb901d9bd11f000ccf53953a179fea31a545c9d14e72b3581c5894aecec270962f4151e26d6f27d875d226bfbd6ddfd028630ae38cf6461cac7a176b40a0aff6fa837071bdfdc58ebc209a3a2b6a7dd9754f5c3557343b622d34641cfe23a3563929cb9735ec8a7613fd307f6f43c1cf60f0e24b24b9f4aa1b1e1ba9a483fec02671f064ddef28cbca3e3d1a0ab4d0fe81f2b32a80abd7adc8a2d98fe314372673ab9055d396d411332ed22d346aa8389b685cf26cab807867d54f982971625361264418b6295679671792560c0069d461727143476be884e79e6c56f495bb2bd0ad58a17d2b2db03580d38a3568a939beb9ace87fd577dba2f4384c0c62b7f4ac102c079127b8d1cde088717b4704f53ed2c8e91b5d99ce5d76b3612b6", "b7bd941b17947834fe41f73c91f4b4554ab123a91194b5ba7306c326ea0e70976b5b65cbfb7de54411a8763a14d62fa6a53f490722cfe96d4a68a1e459ab15299149c26ad0adbd3bfb88583b9129cd10e9ac4a375c6173f79a49456801c2287a895124eadcffe9fcc592737975529ee436d11a2337c5cd9618fe009064e3fc7369219aa835598ac563d034bacc62ef36189ce0981cb5428ad1cb390c2bc6037fd8887579bf6ea1125627fd983deec50151e2d437137745a08d5e34301a76a657013d82873cbb2a8cd585dcbd6bee135f5f1f85b305e5e781f65462bc3b5251c416f31cdcf9b62f7f7c5ca1666acf53cb5d234a87b3e9c6088f99ce3400f812db5676c96262deb3fae17dabbc1e4ed9b215f4bbe5464b7c6900cbbfbf834690d7f067d7ed52a10933569567a6271a596e212319acb4478e3f4d967460e8172073b94001d5b32f3f875a3991b4288401001258c4d1e9cbb4626a56429de73d4a6f7337cd6a6fbb9345293e321268923cae636077fe31daf9f5be49c2e60a3d1c8c5ca09a47111e39436cc679b6c915b547", "b1c1b1dee8097825745a210bd4092bc2fa6d27a1ec811e8f2095c52bb8883ac10f6ceaa978c0e7e85498489de763ab398e2c8de9ffbe816e055e01547dbe264e263d3a961efc19cb604320c6df20290f0cd6cfafd6e9d8fcbd8adea2b7d6f749a06116d74b1d793a72b2ea298beaa20863be313015ac3db35d9abc558c15dbfa8a93c06bbcb6193742c5668681ffc1e559a5083fa175fcffcfda857d2701f5cbd8fa63554ba2e011b3f53272f980ccbb373ae00120dc2f4739608565377d56a7ce094ebfae41f339c3f6d5de1663f4a672fc552ea4c73f7d18d3b30622e4c9d39f253d57f44a29295afa75acc835b5c35412f7bac0bbfe8af171abaa2f55c444f26fd933128df1f853bdf0aa2115316353b12cec0a24d9edae7b84ace5cc0edfff42c97bb9303f5010b5954593472eab4f9bac47b5abd5f85a35d6bf61304565c4bcce5c022c0bfbc7fd6e9ebedc0c674db3452261adb9d60cc4c4454453684aa156fcc58f791a2bdcfdb335874d714a", "b028e4893ef662a56c7a938c1f315d216d0308cd316ddde460077f9f2d0e3a40d10bab08b5305456cc586ae2601c4a85a8163a6df5276727b95cd8e1cb9b5ad0ca92db3350a8d0064010ab4ba8029f019b36626d7145d013ef52f7d02fa773a7b9e38e9d3e735d5def7b92731ee405f6e6b0011ea8d7a8cd86a5c278f6598d437768a36eaa8c6471cc6454df3f16b124163bcad1c27e9a2c5289756f3574e382d2cccc64791762c52193dcdaed1fd22b50ddf9240c131fb0d7b66488d6ce8ee741f419848df6bf80c71e9bbc4ede38873f2e7e56c8d3696c8f694272d933280124a9c6034c26bb9acbb20f277c9d79bd58aa4335c38d75549484eb7b626bdc56229c9ee9ebc15ec2043de391db159d955ba698c68667fc37b02044532eb9a2a2c44516c645e35c7414a6a835bee64525118be51547702c7d41df23c37991da507706bf38954e3473e4f4fdbc21a5d759", "87eb6c7ced51a9990ceda2d41511457e2e1bb20677fdbaece9cb3e5ebc4995cc275df83e07738ea8c089dd7def39d1d7a8144aa0183ea7e0e6e5b75939a338d67322f48fec4c5e7266544f53dd4af4a4f81be273d1d28db33ff2abf0f17707b184aff82fbbca1acc2b0f22fcb4bb120b17c77b6d4e9d68c1801acfe8f302845d2f2627dab21e02a6f1e2a4642e04f5ba44bbd4d904606219b4fdff338c27c4fe78d2f314f72279c2ceacf7c07bdad8985e0a0fb8ff6fef3fe59e65a5ab7b550db6f8d9930118f077d853c1f3322aed2458780845abe973f975148e17c4555afcfb6bcd1492554f228ef453e2b04f762f2f6db909e3b50bfd226aff6c307a922b6d51847c16d10389ef26b6cca122912f39a888241d6243245b1c8285cf818575cb1ac55f47982e35d7ee66d99b53c84c"],
        ["8708b6424b955cf5c3f1e68b6707b7a4892f35302f42f0a15760e5aa48149874ccf98896ec7f052f03ec390b96037777a393d8f8cd8a654ada7a1a0a24b074ba047c256e328e879c4e6deabf67df1a61be6e837dabb2a0125bf75e51945246808feffa9b7f0538b40d69c2bca334b90eb11fe7ce14170219e88142dcca86344deb3dd31069b0d69433b8deeae0ab2eab0563de902c93dbbc89bf94ed226b46b05a0fa514a6f54cbf27a9b2f9f46fc64e3d552ab2430f52c70c01c7982d26ece44210edbf46720c19ce44493881e705a7621c1aa95c7df7cddc2e29c1baaf2a83bc1522ebfe35bd321ce1d0e0d80c66513c04d9304ed95586e94151ade2538fe5814e6d7bc90931314f9fa0db5e3b7d9b2ec4f696ea68b7e63bf1d78da7bdff33040dc17911bcfe30bfc73eceb911290b05475ed0de6c52bb44259669a2518d6d74ca596a8ec1ed7a2442e9cb03709c304d8273a5a0547da040bf809ebfd328ece6665695581e83c597566a077ccabc424623bbbc6bb734cd4dec7a8d3d7100ffc23ca49699c515b09a9458df060987146a854cb751e360e6c57ad87ecf5bdbadb43e3134c87b56e62f3d11f5999f5ada31b560b27a280a6f0ed967dccaca268062b59703435cd766da432f64e09195be", "96afaecf82e49cf581fdd05522e9d31d1ebe9a0045a01413a77260eed54fec2757b167b6feba17da77693200ebd7e2d8a53821ac21de8e36c0f22605fb360deff3a57f3c9a13ddd2fdbd7e6c9e2c2c520e8ea53bf72122b6841f2877ce70e9ef84a41278d02812c03a74a5ae333f9583d52cd65aa514bd4d7a1796229d6154cf1ddd88f6607082059ccfed486b69d8fc35f6d95342c579f2c5437069a1fdcc7b4ac5b819b489f5e709d5d3177ae474461b0de46e3516518112db6ecc7804a8e0b4ede5a53a9fb0fdebca9ea85cf949441648b034c8ffd2116f889f3ce996f4fcb528db4e15e55638d1df1844358ebd591b37f2b116c7b47b6dcba8abf9ddf901addbc51c059b231646d6351d7265386717d3eac6ea9629e923cda28c9c8c65255a7aec2e3a26e25132a66389a1a91e466a0b3457cca8e4cf0d93e54eeb00c1c07da303dac4e714f4b31422e5fada2fc4151e0f5e68fc83d5e4c87af527787c43efcae6f2830e8f0ff227d56ddc695a02527b791829772066a2e098c5eee54382f4a4aac12fbcb31c4d0f5c6cc74b0e05097f428d3609cc25d7ed46c4eb788891a3420638ff36a1349618ad82f0368968", "a6714c547b16b45f2c35a7cd5f4e075fd918a782d78ce0b9dccb8e9575662ec310ba95397cbb51019e5383ae29b83f3da854b0abd11d3e0b2f9fae9bf9347cd3892c79f39c1db20e248b2fa3c6a3f38649e054892061ef465ed7784bf2a8ad7388450ab8a651d3133aa9036c4a681dd909c9f92e6ee2d8679ac6c95454986ac4a6f360bf225aebb1168f439c6ed2964c59192c98ee5cfbb79a11d27e731c72817e4435bfcb864657bf276fba7760e3c530ce612723a49b507002bab2ebdfca9a7ab29f0e36229d08b73e08c6c979d4bb011d3f2c2f3ce6a9170679901eae3577515ab72ad9c69d20aedf00640aac58a1569ea93be278da723ef25630b119cf0b07adcc2b6357f37566ec61c4a8b23e1b2e7293e14e849d1001fe9ece48dbbbc58718c733f48b66187e466449f3fbe04302277b710bc1a222a3f122ca2587759a437581a1bdd9a334c847ea3f03548df22be27f334470cf3e4d1b4722f7c92e230e59d3b11357531fca94952294f584e327979ae7491223a30eef14831d6a6f9b75245a54bafaff6c03e3d5da48f356e1", "a389f896f4a54ce0b4b79e24a915a393048292fbe3cd138a20512b428f36930a6849bc1756375b491ef42ea7908e9dcab9accbfe40d544a44af08581de413f7b66299010a5732a7c5c490dd963f0c342545bae1307f56e57ce99ee00a598fad9939487b3513770837c65a4fb912573ba0ed60d668b81cf771903d10b75ba3d88eacf012987c787d80eefc86aad1927354d3edd707c18174b1c0720d0630a0fa0c137b529cde9effa62a29f7f287ef779270a7d1ed8b29d14f3b7e5e3ebf44f8cc5be6410f5f1ba6e2087d177f6cd9e235409bc4ad2fa552ef37bebb21ece5d1d5e75afe049bf6272669c6b22f6706f67664965c65a97d95d4ded319530de482fb0b028d2b2dd15c0133f4f5254e522e85fcce15eadea7fc4c647164f1b0336da7264476d948b0e88c93442a21ad68dae0ec28996762450bdc7b58aa4e8a2dea2642084f5affbbf5a6b2685d23a2d13532f0ecfc38170f9defdfc991d0c9d56783718694ef1093a905cd13da8b914062d", "a4a40cb81c396a77f51b305810827e11793499b133704a92e11dc59bbbe13f9393ccc22b085488a761252c9c86b5119a9218cfbed58952195ace9bbb39a5ffaf81be27d6623704a2ed86059cf7534d80a6f3d60cecc50dcfe7a2d869f7a551278c791a56d483dd80669ba78a75429802bddaf7d69afe1a742944722cea514ae669e5a16e63360c976d5df546fc260c3b6582c53aaab83705c9890cd2a7b6c0ba4046245eba57c712d579ec0569e0342b3ffd491c12fbcd03504a91516d331f7e9a65f547deebc91c8a02f5829f5559a8336c406e63957fdc45fa6f2d23b5caaad2191b88c132a66f3b28670408a478c3519676ace58898fc0bff02c96d2b98c5993d9e732b348b528ad2a4fd2b84422011198ea891517981d1b8af57a7e691713bd237cf66d9f21455f197a41737532d59ba95c9db6ec6fc3fd6e9c5b6183295845a43de420415df92a6ff74084d6ad0", "89ee84aa227766f83e4bb022e541ab49c5a4cd6e232d52e0bed561502c35b868a719cda43ae1e4422bc20c4caa83729399bcab2541d9921a40de0f6a4b26c14edaa7639fcf55773898f43cd2a9ba61528e0c0d88622f95687f9b08d6cc5b92a4b6b89be090e8e9da2114de4d772b83366f393b451a39289192cb2be1b9c17ddd3420b17fb979865158f55b36ab701f8a40a25e5ddeb75f05598f493687dbb42c6882300c951c51249bda8f6e9a2247613dda120b8600a96371eeebf9dc601efc7d7fca47c558cff0154b7285b578bc3b3243adcb296d526c68ac4b3e68144642d56f073103b8fedc91a957d0c7b64c763e582b1d48d8890a062b6071a177a023561b6cac1c0f08f6e0dce82b8fc6784e1376156a3d7f2649b9a5a3217a667c9be28ac2ef68dfe1324866df6f06655ded"],
        ["904529c8205a0ce1f7620051f809a1f809b7e9efe9711b6b79e8e8d0e1edf7e88541a44f3870c5eb70b147751b354c5fad6c6be504e755cfcd56e5bb396f5809ce21557866a12e8117c783381211806b6aa92a3fdbef49dec5417946130e2ac88da47da9a4f57c7175a3639bd9bd1d538511a4eae0a0650169d84e32b2d356ca0b0c7c441ec0c97cc8641c174ed341de57796781fe507be84c679664b3f61272dfac59dbd7e4c9bf4f683ff6dc097d815fa366459580071847d0431cebbf0ee4c091009ffdecd266b0d0d96f168853fa3c1e3f6feccc3ca1fd50766c66e69a68f2ba4198065e5de37ddbce1c735d09e94d5d6ca71ab79c14d07087a12e140929d899b328e62bbaa1e8612e38111652c92feb2c0bb7fffb0ae00462377f96cfb5f4a97390360bae685b439abc91757a6c3aef6f83b3b5c72e3e95fb70efe19791fa61fa1df1414e61fce803926ba43b5802203135f07d77f494b3b582ff8dffe380d29a1fd2b48af7a4c7c657210e123f61e2f4270fe99dfb463695a719a184250eb694dadbc3c3bc87483809750b2cd91b28511f95f147af0260a5f8af789a07f470815e3758b772019e7dd9fba5de890560cb114a564b8cc2c98f71dff1c0bbe53067ead53e3f119c9a9f7bf5e6de7f", "860bf89eacce01b273d679b3c5159e78659429fa1bc8e20d65aab8d93713c4bd6cb9be83cbf7f68a62e5b99fd6a44665a9baf15463174f3e7cf2cdb6332d22a34ffde63221ad5168a8379bdb3f4882894ec45e7442855553825d6a09bcac3d708fbcf6f5bae1f9a2650f302be29ab956873cf155e0250d54293efdf19212503fd274c9fcdad1dc0af655b8a92778cc034dcac7a7dc3b1d5a669f4c86d261973980584791fa504310d651fca5455700a447428542e3405eb7ff2ee72e3dce5c79c441488cc5c4534d149bc356d649e55b0576cc0ee2ff158d64f187e723726795e592d2a9893d42f663758b6630bee7f259231808ecfbbd3a102c63ee1833d6cc86a9f2ac883065bdcec4d5399a5aedd4523aa1b2b693cc54c29a281a93fbb70e358ea12c34478efb56bb4a59ae053f94198ea8546b1bb6f6f9efec0278721da8b9e3e3e31ba4467e711d4b869858b64e6a81c13bff812ddc55abdabe2c2f952e99c6fa9a551fc8822f6b2bccff459cef31ad59d6bbcb51598900b1604cc004afaef09295b38cfba06501d0a0384afa935dfa763f71d653fb22d99ccc918114bcac5f18e0aeb01d2cb908d6f901c9e22d", "b5f1d8aab4536750d9d56a67c9a776520d8c41fc8089d93ceb7b49eaaa0184216644800877510e7b41079d8b22ff1295a781a3badeec754af10e263e02a04e9ffca85d24815268c9254ac850b1b6aef40ddc2c30f87bee71e366faf9df35494fa51c79b87fe6fedf113c084d716e5ca1fc1ad4d2c030c1dc3f5699731fe531888fbecc2f53a012f08319ae7a6ec175084f957fe7e040adb3eee8b659fae5f4e4aaffeba5614424e3fd735443541f3af21493b9368ffcd99ea8f5b44de90123abe6208e36a1ebaa727bf4f1c93e513e515fad143866b0e6a83bb7e0b989d01c35fb318fb62fd967a5b1e1c14a26dd125a55eae282132f967cdf334905bb256e5c66c412b972217890a9f23348fddd054b5224b34eebbe4e0ad4b1a34f0cbe54608b30c819b95c9a945011635ee4ba9d19188f84d2c244394e1ee760e0cc331cb7c36930cef5a5666f7d9197145b9464161a2b043664471d6ebbcadc9e8d167d0923ebd97c346322d5e4e6ef19d82e614b7342fd437979e43995d1450472b0434aaa214fd1861c597919ad65c20af6be80", "b6b47a4bed808aca604f0586645eb79482a4b1832db4022c9e9c73b9480a6be41b6215caaec5a8f3d59cd18c8fd82db9a1db34e4a7e6cdbd65022425805eeebfd53b3ad83d855f72fbcff78f6e6d433438ec4409912be6d0a9ec368e40e40f1aa69295573e88bf7e86bc7693a3ce610bf43a7f1bcbb998341bfd05a458a4013cbd3f3623700c2164e56111772c0f08db1166454a85eeeb13ae7f5af50df4475ee36f069d10caebdd60c37bc1d457a6e0625b08b899c3e86c32102314f97bbb3373360b917eebe7773f796a4320e1f1c50d2d9ea9c52748219d8421a946d15b7ddad0a5511366c5d42c18c9aec20152855329d4f6795e22d0c8457bce4cf1bfdf8f6cf8dff6c39a2498296a6cfda2d0c018eb1126f5e05009f65ccfdd4493d542c1b67de46872791960df87cf727c0ca526cbd8f791abc383f5de74fb995f4f16aece0569fa3bbefbd66b68f482a932f639b52f48e1b91169e474fe83359f67078426ffbfca6bc72bb5ae480a99568d6c", "928aa067495c749f92794901bdc8877dab1056ec0f813561011d788345d301f11c9fdc910b9c0c3bcdca0d678cda21359977d6dee31e474e268425e69339b9b3319d8cefacea4645fcf56cfb79379e5120a66de2644c1543291869de941ca9eda7aa9432efe72418e3f5ee077b923113f0f7cce64303d04719272a5ac403b9aacec569de2f0556a8920f285b2879067564355ddba5d6eca4d9988c834d4d955dfa78fee4b557564b2c93cf26e51282f962faad78eb57296e7054087bfb4987275d9be0f3a5d270f8890019d87f8b750f138ad4bd5ec105e368d5650c54e201299a5c6d06455eb54fc71920b111f22aa152330f2fd5ee3d62e0879fa24dc87da600a05201c038901b9fcde83ff6e738fc261c924cd14c92a5cdc211401dd2263b7c79e4d7b312c6f146f0e680c6889a6b7056dab491cc6b9e6b5c721a2e79825eb7b10a27bf80358cadee0f3d833febce", "b068cd96d569363a98a23ab04aa0d55eeffacdb8bc8571cc692bfa0253f20e6d5cd1ab45dbb1e4f45d91b10488c373ca8634352ff59b2f80f11d5b32a8c88133bc8efd58801c9c64eaa6ca77c42d0a3939bca558e63f6fd73f77ff5f5d5c86158d9ccfae0fe6b92337059212d1d04c3de56ce0c15926357caa327a622c7530cef802f10370d5df6ca55edf1ba9fa29111feb3ee86956d22fe29e39ab8b3c98c6a56aaff92c43a071b706e6ca5ab4b1ef5f5ccabf071cc9d9b6b6644f1716746016d65e004b94b91602333189a39386685ebfae586dcbd25214a5f693868aab5007fd3728412e092bdde21c722b9974332db89e69adb8400b85a874c6dd8f443892a0390c017f2c150cdf43de8c1a8dce2835a7e78f4dd8a778e164b5d625d5b0836ca39c7fc6baa57497c6627167a797"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header = ["958d7d6a30bcf86ad0ec5015e07d88e247d9c1057c2309b6a5d7ac66d4e3400e4384350fd5b614fcdde901b7568af6aca49e645ab3d4e179fd31d498fdb8105e9c481c0b94efa59ff546b483dd220e748051272a350622f35833adcf5983cb2aaa792fd110eaf7aa63c9da1af9e030231c14816d2cbdee13dd4a887c221ae5fd4985b64fa9a3f2b1dfe7ecbb06e9edbc27e5f48e26cd1ffa74027ebdd5ccff9bff389410e81430a5bb36bacae532a66c5abcd627caa760fbc3299f32804c4926e9816c961c1d19db6cb1bb4b7718280b6474ed924ed105316ca19acb5115013ea4acaca391068b88e58307f9d7e7992118ebaad2ed0a94dfd222872bc7738595be9099f70c28dcbf4cf8424c88ba98d50fe00c2af69956485cc702f5c486b95468c327f92d3eaf39549a51db868e231d039d15e022e3ef2cee46c53a2770bdecf15ea3676b9e1d35c5551ebddc4637c442c50d4f4473f866822960a7daac5a42f2c6d1611d31fe121d87695fe103e6dc434efd4183bba8e8241a0a325f0cc9e1fdae5d34a3494add4a40ea816f2c706c1aed285d4f51e6a8121b5a3fb70290c89cfb90574187fbf8b0c795d76d94065f1e07c36e43ff49ed650be8d71f428c8f5a42ccdb7d89f197953c591cf5d84cbf", "819291df52e124eb43a9f11efeac933fd689806d3b23b18f11e63bacaf7f4668cf5a6c39af7495be4b76cdce95829aefa9254581d55a9d140837309a0ba96dd528c3a70ae3af50786a4ea9b381e6c25eaf1bcb8bc2b23a3e8318782b2aab3fc886b328d5d0aa6adf75921b914f1310ec8a5b1ae3e04b389973d54f969171a32efd7d64730d2d20b796b60e5ae08bb3a53a7ef400640b70c59f200f66d9edd0fcce1d0d0fd7c58fa447cbc3cd4a53de590001d22c121cef8747224e9f73ba20380df7667de74ffe480df260249307bba113590d0c89795c1deff40dc1def1f61ae02082667b88a21d414c50e22806f6bc48dd7d545d5465184b1a02a0f0185a29c77f636ef9a79c335dc76e68d271c8710f967eb48c02a1412b40949e920a9c52072b60c7beebe4a77111734848d2c9ea029089f3bc48d207402c4260c47192966030f8faf01dd23a598866e5dc0febf649331b6d03e575a104c82486696011ce01bd9489f450473d3a38f8ba627690d8122b19e1a336d3e926b275e5345f5a10f6dbce6ee77d0056cc06493704c214586374db4183abf33608caeaf412cafa0a2c4537fa74aec45ab71d4cd6915d7b74", "8335992a02626663c75a5957176e8ef356bf67b015f373ec933c4816de5bd34d4de3cd1a61f8de0e0fff686650198fd28f8ba59849f13b9a73dcd1407c785e3507c52e6ca585f300b40e660c5d03bd141e037aa2fa6879f9ad54d604531e0524a32603edeb780a700d41ee39a164784cb34108e0701e8b5cca88984fb695d0425161cf6bb6a0abca8ad9250b1b5866cb02e1c6194b9b7fe2812e06f380deb3226528f2ee0323cffeabc3e4b921e3135927f48886692b337f0a412547de13cd32458cd05983e2ac24b07a13cfc85f291141ff86f0db7ad97f1d27c3a2d4fae4a943b1236813d500d471f257d825498dc560f3d287428f8e31876f59d1ae660492981e8f0b04dabe983f2d3491a0a8dbbb4de2370c42463151a687d61a2789ac1795bff95f489e3f1bd37aea3dd8a4c0bc047962dcd04a47670176759d4da8fdc2ad3cd285ab2563d40b017dfba54de79471615e7a5c670fc1239d50fd080dc84d51ce3d143399b56c4249a47fcdad4a1915638c72d620c2f8fcec161743546f5f00cb163d5cf26f6a94606fba492b34f2", "b7e1a1c23a8f993c74378495a52ca7fe55e02af32d3a802b4a61cb6eed11e1cd7f14e03939104bed3f8a4d4398297886b39d90e8f6dd15af643a15091222ab9e8dcbcaee54dd77909f5053ba99cc941c2913966d9bd9c4d7a1878d2721e6e65b8dee762fea8d22088119135dc105e28a66aca7ed1866cde2530b81feb27a13a37f85e92095c1ab33aca0b9b325e106433f9f7581fd2fccefe9c830e910550e0a64b8f6a2a981c7115105c17bc52dffe160478f2f14ae99edb69d24059441c038e6ce598aa20833c9ec2042af453f3f21474b73a31d89bd911a46699557a1e9fe757ba1b602f85d000aa67c0d45a87d372f77d00a5fda3d7b127a459527fcb32fd06cb02e45f2b94fa0b8c72fc64d40770db7a38687530bbb2b81e9f35327db247db874c3ae6daeda57ba1750f80cfbdf14ce431e9d264c897ce330b6d60e224042bebc07b3f2e080c0ce27252d546a951a0e14789afb9192403d6f3b32ed878206d92a5fc74e5ecfef36f116930195d5", "b8170399bc49358e887fddb48930a825bc360c02e77603f35c0ca3ce4c103ab6fc28cfbbdf4a0d4a93716f8ad4e2cd54947a5edc6807dbb2eb76e83bc4b344aa409d5bdbda08a8256b2ac1c2a8678fff5b116b2532cfd37014a48220762939f6a4ef3a01e7af7eadc4826aed480a36bb7b4bf3e93982a4b151aca19981beacd89849060622aa8015a11316c5eb479cb005788ca559a5b0c2dfccfaf6290bd04b69c31c31db96a40e39cbe96947b7be983bc3936736c5f5e115c989ec268835ccfba1f30f9ae1bf5dc10152b528a43b5f3f6ebaf209b08bc44ce3e1438c7d3f66a2d965004f8c6d313eb5f7c589cc220c42e947b02aad0eab109be491db5ca2aff06621209e01a501e49e75e5b1a70a632d876566de036d07fb5f68d57353dcfa6551936f059e653afa16cf701524e2ea4653f79d75837d4f4c4b53e30d554077460e3bf8ed1d9e6c37d330a5978d4ad0", "853d8f8d7c5e3e6136344b6bd3341420f014f81d65f4b67b4b3e4767d4c23d6db29f4d31c83649860bd1385c3bb2ba92ab451da40b88110953a46ffa64fac9ceab74c51ea2ba879381f4de680ad5eb1d13193172b3f4cb1bb98d3bf81089d6d4a5d3fc35c726abf149acfaac74fa22e3a8627ffc459f50922df9775a984001370c0924ff827c3de1e615624979ccc88003be74b8659f096275bf9996ef1232274fd3e106b81907992cc39a073e3655a20fd2bc74764109e0de784d3593f7b6f6e26517790e415913192b1e4c1ab52d9903b0fb52c501a697c111ded0c77a717a0b7a73599b01eae2ad40e9f8a9495c456842dac3ddd7e1d6f6f3db68aad3c80e36f6ee5b9b5689b990fcb98d2b1f8c3b703ae0aa9d24ca9fdf5ab371a1278adb6b824d5010227b7d756120a9d1cbb73c"];
    let expected_proof_no_header = ["ae4971d4036964b9a17890ba33d247f26b6a63dbc90abab590b8f82e68c024a1c6f03eeec942dd3ba45ec1f583ae2e61b5231ee2bde7a5898aee581a7410626d83be6f92edad0503d01a759ee98d82434e82dbfc2423c45f3f971a0dc6eb659d86fb9ef9d6386e91bf7d993a1ce188deb70ba7744332d22a1681821f3a9c6d0507ce1b15f843fd893b146f0bd700a80b03925624cee8eb943ecc7f7e1edfb27dcb320ce033f1b3aa2e6eed56482f062950ca2ef9350a4381eb3932a5fe45238a477d77df3f4a9586188ea3251270a0f53b81682d53c08a06913d1d995cd0ab5adb3f616a6f9009b182aa0f85b01d5fa24bc5112af75e840405f1082c6073b1ac0601c3a4944c844140d247bf10dcba0372c5c0699e5813fd5adfa5a92a444f595074dc5e075c9e54f095d94fcde57726391834271f8d086b69705f7d096726b294f6b2f6025353eb824b0699c126ee9462573a08498d2dfb5aa0030090eae3d2f7b06913874b25a2b9f3e277a07584384e82d60f2bc65736af26390a5d242fe3f523779be38a1ab7d6b6d0b5b4d08dfb32c0eb52d7ac065edaca9248739b1b872a1432fc8ab3eece76b802b6fa00a1b10e56cf18aa4295e67592ae9d006b219ea4e4f17369fb0050236503955f2e5e2f", "99219290e1a6b529004342287e4ca31d200fd0271bfb9faaa026acc6ea79adfa548954f9a33fb834e38bd2e45681921b81e8c9fcd524e92d02f9a37953acaae586fdb768c717e499fbf3263cd0b9c0ec963b374925c65bfe272d3fc6ba570f94a6dfbcd806abecba0fda8f77d4c929412065912886f2332896056e295306e3d331ed272ed6eb55d42bdf5e3c9bb030a1325a10067cf95d952366f60304705849d99563d584bc6c025c91a8eac1622ef64dfa0ca5dfa518883c8f287b2d7d56c1d1272105384b021b76dd08f449a041fb1974f6dcddefc43ada6d764c5b255066fa25e72c7639b652f84fbc5930793bc552872bc3536d789b9c8e32e887e440cd799cea118c9c50ae20cad0400d154f164a4b089cf178d64b0c5891b47b8575fb5e3da7402afd977c5a98b1c705de39e002f296a16c0db9cb960682429455e6975d9d0b5058e573982a41188918893a7d239f94c4bb141c29e534b535719b5a624c95c330f64c9e6a3019780b45f7b8a73432a62cf00f676c2728e795c40fcdf89e66a95f030b4184cb17e48c8aa4807d197c863f06bfffa11c6b323f11a6e20cac5f6e72ad2e897e4b7a96418b7c0281", "879d71e620ff2557f2651365301d9262420e31691566d4223b8855664aaf1254289d14bfca7ebbf39b504f42d0376cd1aad563ed7ee8221f46422816976ce7502efc896d0599c17257c6d8f9f5ebcb95b508bb30a7eda4fe536062f77c960237843157ac0bc19ba7c6756bd2ea229a65b2153bac68b1382948519f3e7d22ef30329d8bc354746cd08a6628237b1952443ceea7a78091ae6257d7aad31f863d2f2d462013b2605d880aaf784c2d66e8313fe2b731c2c82ab8338af3d0fd08f6aa6d59412c4123cb9cfdb8bfb2dc17a5c55a4c678c43aed1dc95c1f7bdfb7f0f3c6097115aa298c4d075f6a6d3ef9340256c6877fafd5634180d2359a9db3801d7e61c701ce76a35f0bfdc3f1414e6bdf35db784af2c89c314aa28dd19b1800b7a2321a8e68991a37a2cc883fad41ee37a1eef917b762ecde3f5831f2247ccba0694202b4b9eb8af7cf021e2e80b30de205748670f68d0bf5d403e65500a5a4b2915d44d07c15d2474e6357998cd64da9433af7db07d229b08aa6794274fdfc8fdec178d6b5f003a00b259d8f030aa86ba", "888ec218dba1a7c3c4990ce45c7fa477357dd06a7a8be8fbbcf1943263d13aec16d4b6d00f7a0e108d8095be8eb0921fad1e9803ec676b03ad3c6a66dcae09a2d5082c720dca2621c8a782c5a8086a3b46b8aa2904fed6a15b44f00b91f207bb87f3e3524e0968cd2c4a6848895d6a2ee92a31efc2a1bdbda606f6cc50ac8b6426e74bc27e6673f24c2127e9eba70fde55a56f4f951a4331def1128f7509e0a8e70fbd3dbe7bca65487642a694b8499f50056245b037663aad0e23de7c4146902b7961d1180e336be4f2118044f6b796291dab7f6e1ab86a865b8c97b862167b2bd65e6eb24587fc1c510c65f616b6f6034948f59cfccc31ba9f75c4b2c408facb0eefff89360df17f85f1febaa5f57d40aaadfb78dc7607599b0b329aecb06a8274d3eeef8aa0613426598ae01c3855659ab5782e92ba232c91ea8e38f651551faa1e96cdcfb74cd24fcfbcf1d816715e8bf261ef46747591e3ec2fcb19888db8d904963c7244cb6207cc0c8dc54174", "97b13fea9cf67491b664b37c80a0907288ffdbb779ee2c8497465b733627cf009d0cd1278f48910677e26f61ca022c748e16d89b6f1d0a4febd6d6b69cbedbbccef50c2a31719bdc894525e5fd4cc34e87877cf09be61384443b3f4fe074630fb2ecce0d37cf65af627c956505be0be199693ddf36c3f2c3fecee108543f187885b42846130b0303df0d15ddc4dadab814ae3efe8717df67d2dc513e3dd636fcc243bf095891e00865bfc801280250f2504209c461ba37b33758867604ff2d27e37e6e8aad79387e4ee79f4632ee55bf5666b6e945df415f292b4d42c9ac33a03ae01a263fc5041234d1f4c1e8b5d4ac3fc2493d54f3abd2660699164346666a9662ba7c91a5a2f53a9ea35b716d434b30acd45ab70e69a01554751f4359edee2504ec44b14886ea736ee6c2b3a5a1c35e8d753f0db6fc4e626d43c9335a1dc175f91808d86d66749343704da1624f97", "97ec6738ce0ca121fbeb1df10f000ad876901ef26bbd6cb3b120cb23bfa4ef7a67a72c24e0762be9784dcba9c39ea134850a95b251890a5631fab53331480649ce09bbefcf037dcc941ec541965557b2654bead4d35335399a0d0d2789c240fa81784b424d6da41b4e6edfd69140236d29d8f294cd828f81c64c55b9c5a5680544853b15cc057df2ac27c2e976db4f7071eaaad7a1b9938b6c6d3f50d75e9d4964e29f2d23b92f729c01d42b1815a2aa717a0936724d6820e33fe17bb56b5b92e9ec9a31580d5ded9635f8aa6e06554c20d29e76803b1fadcce8a7237ad5823b3565598bba5707438b639acb31e459bc065e5ca55ef82ddd7fbeda6e590bb7c20e3bba3c582dee8b3d3e4f394c431cce3045441bc56e8e6b5a087591f403226ef383600b143984dfa57680163107f2d4"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof with header but no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r1_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        r1_hat,
        r3_hat,
        m_hat_list: m_hat_list.clone(),
        c,
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_bar.to_affine().to_compressed().as_ref(),
        b_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r1_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
        c.0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r1_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        r1_hat,
        r3_hat,
        m_hat_list,
        c,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
