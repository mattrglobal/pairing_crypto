use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages,
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["81e12f2cc1550338473145300069e9be6838d616665056d25efb2a050d2e7718c750bd88ea608e51074a37b5c2dc3223b280928d2de5831515050d46e92de3561a2b59b8bc42582e6153ab446f6e62ec8495560c9fd2b7ac752039fc33285aedb0bbaaf2f8de7b6c55daf424b34fbd5bb3d03eaeb7932f0928fab584a3d45951910d200521a39beaafce73556a28a3b76025a9af70c427b210299fc13ae7598d68293eaefc6c59df3f453f1c2f9dfa730777e5d2ede0d4bc1f94382e19f88832a25578a7a6a9141e63a57361f6da2cab50b30d47bf40a3e3cc82b410183174b1102d8e4b0fefabca822d8dbbaecadbdc21ba3a5b73ff00193a577da06ba5616f2bba7e04317d60d0b15f3ec7e48cb1523929b0e684385a9f71c2695a09ee4e3ae0d132d8bc710e2692f5fbd94755b8163df6971c6e9fad72746d3d703611dc3bf08b8aa4ae0909f850a7e754471b297f7275f6812325bc5f37be6d6cfbc72028b8de0f4d871b198a6b32178f559423390bac03d96063e67a0593b6b3a364c56bbbf6b90e30727efd1ed2ccc0c2fe19b40d46af1ac3fa60d0fae6c18caee3c6361e7a4e39954113d574827e265b58cfdf58a83206eac91f1c344c435da14e3198290c5f139901a7b5444a8518fb66ccac26865da54742761f4106e54e8d4c421bca4a7b08734cd634915c5a95d0d47d19", "a610b54c9a54bbca521f61a5ea9128287ef49e462e2ad9667675bf95de7ddb42b30a99aa216d07aa154a3d3d0677652c89c5cf600a1ce55b1ce586547e7af283001aa4854137e3ef4fd9845b6924e1cfc9641191c2aaae96e2d3c9939477301d972d96aba0b785ae96ed9a2040bb036fd8287785143bf47d6c691f7dba6ac5cd4fe94b5b829ed7c20b347b8fb2c966e762c8f782dc86dad44fe83fc1969e05f76a68fe21b5da8a7ea2072497bc056b2705915865372c8fe2ee9b2db78181496257381391a1b6f874be540e15b849e5b85c792c021f9a75172ca6872acd9b02aa127bdddb40ac7033550bb90b3bd81e2d6363807d19b57a472ac168595321776e710885d16c305ac135317bf2a4022c365bb3e7da424f6c99570a4091f485069a99bd80eea904bf3aebf2d5af0258e2c76f0b0a56cb460a67c98a6cd02a2b421bd41fb9b77b5123e84da241f322e3e01a56a9545ed9b59bc34c748457fde6b6e16645f880141b59bd1d80fa576155ca4f6baf3995a8d4028df3022381437bc51621df338d59f072bef09ab43f509927b56e051f511449f412437cb6fc6194b94bb040f73232d59ddd4706e3a43e5df49e1859588be4d10b284f706164e53eeefb5432a68127ec84352fd9d259173524f8", "ad20318a1c715d1527d206f4586539f0f7e7c83b4f9317d51d412325e1d46fa4e0bb9f986a3ce7a15edb2a41f352fcfd8331de9291f9c755b95cae03a609b39b27bf584058e92637a1f8dd374a049f20229979151b92fd31e6e8422cac0b54f4a1870648231704ebbc62f659ffeded19fc97d5d85e7f5ed03c550c545e74ede982a5bb6e48c31809ab0715836e24116e359ca6176cb3dbe110b50606e70312e46781fd8d5d15bd7062375c9fdd10187e3f37838e0aff9fe4c660da0b2ec06d54c566c2c351b1f5a798d672f3b03f1d391b9830fa93c233dd5493178701baedc0ec54dae7385453657842bd62d948b1d615b84be61fc93bae8934031f8ced7b09d4162905dc88bc3e2ca2f3632dfdd37d164c6e67c3dad23014f204b8a16dbeb0e5d789e2d25e88b490b2d01c67b79355325b51ec2e69b5ee94fbfe62579e10d0e9d63b2da86956bf43c5d97229762f914dd4fee14b39fa27e3738111e4bdde099a6d12a976d2e1f8cee49c00d0a77dc64805363472625367de6fb3d84a9fc578f03cd546213bfcdd3a71c92ce257c8d6453bddd8827131816f521c074bd7175651f88f6f6527003c440f03ae9825c46b", "aeaf3d72462ff61a7802fc6fa61b2f2c29a66265979a2db79093881f5afd63fff68eb839e55034eb2ada605e1b43c05b9150757f721e0c379ad8940b252d31a9c2c755f41eacf6f91ebfcfd0e788426e25c59418ad857d11addc76a368e188e38f0fac53537035cd31244a12f2a6d0879a8ce9edf2ecfa4363785153a4bec77f88ac33e468eb490c69f80eecfc00e7cc3aef9da5131aa4abc06e9168e82dcb735ea681170f952fe3e5d9de3c7fbed98f026c8f06aa041b1ef2d8190c475cf6c137554334a3e6a6eb6c27383be55bbd1c6e9404a9a2f87970e30884fec39e8063edbcb190b9bdbef88a7136ff77042d1437aeffca20a15107752f465eb0f530dd4aab6ecd96c384ae94eaf48b5122e3852a921695a9ca082011d98fcaeb0649ed31fa91f4554c68be78a7cf27da0fb9136b5dd7aaaa82b6793b6d4abed6f2eb5ff21891b68502e60838b604476759cf881e4c0216af3a8ff3e6b500ebf9596b173ea76880cb5085f528a52a8546101b661cefac19eef3fefad227abf7d6e0439fa348126cf4b9502de5195159b2054ff4", "8518c6baf7e8c1887177f7ab26d3b1cf051d60f428a0d563af93bdd26f34b5121151894157ef7fc82d6761efa98350c2a6a18ba30729eba2948429adbda152cca27a1233ff0c52c378a40aef5775c205c6981a5a7f688a014c8afbdeb792c573831331831eee6daf277be1f511c24ed0d706593bde8f019684fe654d14c65658390cce3a279952fc62617e655a27e9a85851559cf6589915aa760bf4af60037ec9558ccd79f5cc7f8bd7912af14a6e572008378c430f8a7e4250ed337066eb6a08bfc2d95138c81dc75218a99237406a5c62998ad28e31490689bae0bf361c7823cf168c3c50b44f61c0d98363577a3566f978b473281e7fc57c21bb087e13d3483a214461db8ace9b10dd1484987194239ecd4e73406e1dbbd11ea58d032a8a3e5df1b4fea4a6d1df9569ed81459c6b3ecf436e8d32f3ea33beb6eaaf846853a8fb2d0bcb21d3ebecc982f8aa1e64473f7cfca1fff130661f854bff832d2b70f65d67c139259c7ac95ba7f312779561", "a6eff6488ddf31cc977c7ced4efbabb830b929591bae0fcb3e3175230cf46e11053349b4ea7147350cd58acd2c606895a91d1882af47dc7ba2aa543e851847721db3d8c0c570feeb72addd7a250ce3714c14d51e5aa6d69e84b257db04a38fa3829463b2f1a28efb40a5c325fbc31cad51bd5e9d8c7f1a7e7033641c62d5b1f40fa8aa3ac0a7edef1bbd34953c29073053b486a1176f530236fbd96eb5cf3cf550a3f553074870caad2cab46e605e9b700198f64fe977739722899c1db626524c57ab0c46581b3f3d5876861ac42065d6105e976ee08399c56d15f25dd97c3d6497713fcf0b7c3d98c0f95c61883a2d63ec89f466c32fdcb9a0edc0e631309f4fe1718b2e190d06908101bfd556bb725361e96bbee434274aa09cd706f1f1733daf99bba9e1b030c1d5ae8b9379190d047752be075f45b1f7605140a4c347a75c2a62023db5e0ace541c43e3bbe805d8"],
        ["aad00a4eccb949b4df79ef8b805d15796205c87b7bc9ec60de5607ae8b7ad226d9e717135dd46108834a99b24ed3941b94b26fc5710d81bfbb7df087cf535bb50e82351665126987d55ef1ce738f81fe3b6ad3bb99542c451e4f901ad14c81d988413eaf24deccfc12bc8578b601f3b821c860c421c7c00855f09289d6068928936b5ccad524b24f77739a379b96dc666c22f6d64d35aee2b6f17bbd14bad7683b2953ad513b42df5898f2e1cc6e6a0660322ce81cd07f9c680062f787e006f2a04f5e699644d7747b8ac27e14b69a174ffbf50a925f5762a941b0d8b59f995c437a6a23e251761b092dadf4c2e3f37e07899fc65ad6479796c36a03ad6a3b7e19757f9edb453482191571e0ac136ce42fd805e159364874929e1a065c2c2a3535f45d9152871f48a2c4e0482e33c45a51609a6321be85c6330e84157c86eadc2c5d5da97ab4cd6229ee56fca6ccdf911b9d10901cdcc157dee4591a2af419405e0c6d8f387b3feb6b661d4ef73fc0645830a915c0bfd6d26ab1f206e6caaf591add2a3652cc791b30a97ba43c61fead55873f31b27da9345f97c1e7723f28badb85f03c4ba4bf8fa0aea5e27241989011f67f41623c5ca009135a78dcf3c0ec6aa7b867c2c8e06fa05780827b0b923e16a4984e50f805e6f2d3e9dc1c8dee97c12f96bb0d421746cf9ca6d9c8f9fca0", "913136dfa1fcb1f8439219f9de69a7fbaf9dfab9ab58dfd9a9effd875cf4fb39de34bea43fbdeb8058433859c31039eba9fcf393f05a0c22a32fd520d6b3f2d969281d056f45a6fdfc0e444c0a5040d23bceadecf2ce9f2f2306f678996e162baa1332490d8766cde3a54eb4037843f33614601fb19d937ddb249b3fd1dea9b377db4db5ddfb681d6682b2d7dd0ebc2800c047b060723cb6acc80916b5f03cd4d1566f7affa8986d1ae98c296cf75ca41985608ed469f2c01f2dd119bedf4d6546988e1133b3d94e10650062fce2e4e504a481ed0520ab3e24a4ddf8e0dd2c39e15c46f9e3e0245a63c3288c7a8d869a23127a4a4ffc5b1f20d275c7ee7f059d64879a5ac98de5d1433485ff4613e99b5bacfa60d4cc617171833449783f5c9dbd77d8f86a7882d943f793c64fb51f890c51cfaccb990265d4842c5229af9e616617e420500f288fcaf770d03e96da314a64a69f5c25ffade0758ccb544fd3b17596fd50f9741b284e5e7ce24f0af61c045decbc5a164f4d9d2a71c2a313a7e93b809df4407053e3c62c277d5f3e333b6c08f86a16d9737e7a61bec9bc501bacded6ee18ac4930a0fc8833b9256567c003f53fc851f468639ede93cc1ea43113d05d33e72e27d96e125984648002efed", "ae19e210973d49153d7228199ca66bba146aa09915742eb7ad0a61de7c40328c55c1426ad5872a2e812a6c33a12f7485aab664ed0876130f3d8c8fb2ef22c565b5d6399db0b9e3785af5071179fbea68c286104f74815ca6d1d2e364524f71a4811e517aff8f6dd2203ecc21c45c52ead9caf886afa1be9926c5e2ab68ac8c22ace9bdccf687722dc8b6276cc9f110de4073c79b3521a83e7b28f50c47f3eb611f6f37821b96d5291433fb11cc7fd95634723473b497bee1b1cb0e2cd1e0fe666cfbf60acf9e58c11c8b14725e30d0fb375636874bca9a7d5125db99bf603871b6211842f26a08ecbb14cb450df210e80483166056cd1369144c76cfbd098c8afe07a589122727bc7984033d52f4549437b72c3a79f568091358f23850bd4e2b85aa80123f6f4573dbdea6613233f6416427d939f121bcbe16fcad543dfd2fffa0ca6b9c048a818728d3dc48f032e1203cfd231048cb2a9d5b1a76093a37e3566c68163a9f139f2fbfbfefaf06f1649d2c9422a7468503aee4e174a73c4206e983b15a915233ae7edd5de4f05e1d1a7f1e6e16e5e752ad840b4f979e0a8ecaa0ecded26faafb8357e279c84f63ff2a53", "ae88ebbf0d131533d61ca4924fce1e9e500943e43d9c7542f8b9dfd9ddae20a0a778102cf492cc9bb568aeb14e7685358b2ca35114d9ea03afc61a3d8491187b8b1b14806a5f9c2939d56e324fb947d8804786a3ed8a9f9fda273afaca679671a7ed5ca982dc8ad26052121aa3994de35a6ad15204ce227d0686682198d95112206990ee7f63db5e2de6be23c7618cef19334fc13c4c366686b4e4d7c2d421d2f03f71301c5d8b7da4b44fa051db2b9c6a2f092f6191a524ed36482667c81185a51488e45e17514024fbec3c4d96722466859cf9d9da6505a1e3d11912fec0c08c203afd4b1df858fa58bcfb0c0dc94d57b130584951614329b985cd311efdce997026923734170cb8a2b5c0f2dfc603408957ba28b1f0424c49f81ea9022ec7c5ab77abf603aa19f623cf6c28b9e33334e23e7d143263760183bdc9930c7e8416cb21a1aea20c7172208800f49992e5368526620d53f5af3f12c2cfa0d07121b86272867642bcd9bb995402fe16cccc576b681b787be9695e279d2aa1ab23f73adace9f0b5efaa1ca8e378870a7e673", "a668ca9efbd01225a6cc8c69514fb60b50c2d98445deda1b308894a4701ede052743c17aba86079c88f650147308a025b287f78a065adccdc38d159cb744fd90d75d06ac5cf32b9f112078c2d772ae0f3c9d7cc57f4650faacee26a68513dfafb27668dea8f7e8882e15828d280cf126bc2f7e0364ff6143f2fa55b3eb4698c71cefdff0fe04c375a01077f5cdacb0fd361e9d3cc7076a353556d9509712f5771a69f8b88c495e6310ad7b88e9fa23706769572a1506bdd6140de469c7036cf8b6cd95bc5de823402b592921245c285f3b04eb0886fbeab8fde9152797dbce60c76c6455f373b0b87972707cc73d8a8e49550a9e2676fa920d40c33e70f7da9cdd1a6fcf1dad383fe4a06414819c7da864723bf378180ac122f1074db39601ab9c2e44351cb89f958999f8dfc6d11afb121be20b9c2106886619616301883f3f4470ab2abcb6d8eea1db7f10b53a77c02c470db5794a0177f0a3712ae569ec44485f565b61b0b2b4cf8a94bb1851b7f0", "92046ae901fef619908b30d8d570a35116ccb16959e2da60a734fa0dd18815ad4d140f11291a3fac7076096d6c48eecea0bb3b36ffce1529a2a2d29e8a6495d963ca87cc7a633cf01474de0a5980f4b5e126449638b76c9349a6b7b0bdebe22ca4429eabf6952d0be2f529c63d81f55199d59328865d8715fe592ca1b768c74885d13f5548ea417509cdbb7bf203b8d83f16cf7a0e778b0438ba021e3bf29634cd0c0d43b74ec8a77f9d24941999ab124af3d10bb59dda9e959778a3efbf6615543c7998905fde6d1d2857a907a95a3f2bf4deed7df49048c10cb48404bb78e0fb1729cdc7c5db38e4969edd3e137dd50904e9d47d12a0bcc4e3973efae4cad5f7da737270ef5c58672519fcddbb3eb504bacd82627b7374c6127821f416ae15829f735873c46f39bf19e52960e9e7a540ebbf9dbfd043ba5b79f08919c163c3ae3cc595773bc058232612069e0c3e99"],
        ["ad33d541b8ccf0b6b13104884cec83e4e95a2b70a88296ca8ed7ffd8a28dee5a968eb6ec9fdc5972e804c12d2d0050dca1f52217b1e03bb5a50320f1254f2a56c0a56e0ffb440149aed31bceb956be681b3c4087efa47bab787896d7d037868f8f51c68c1bdc2e8b5f0a82d1cad9b2ed95e5aaea27412e90f6411e6c6aaae9074fcfe7b8bf022fda7836c4f83f4d439637fecca5e7905aad949111f6a3b5edddd84762194d8d263d8f844ce52362b90550c528072582697e54223b45541c666066bb61fd7aa340edeb0d7cb8e979f1d95fdf0a6b3b137a35809a6b8a6729ea2910febd4ab00ca4f80b6ee15e94fe32cc480416c7c244c4693341004ec5e0d63505dc581b09d8e4ef1f57e7ca7b2f2f1a1f42ce30977e8e7036f37c9dbd916bfa1143fbb22993b4fa3a6dff8cb0fdbee12f8c62f406e80b672ee61e6897ff2e4ad352fb739952391d385c485a9f1762a86a0774356657e2b1467255b7a21ec473ce59fe3f2d7478fe1f62b5c54790975f5d24386f2244ad67d27a9b6e70d56a735229b3c19951fe220a9d373aebdc9cb607b0dd8810368f4b9f71844b6426fae963b715347529c8919074374a7d4619594dbffba0211ba6777937f14f06815b8ac2564b92edf48cd20115e738a8e844d1523ccf91b4686bdb9c921027f2fe8d7336d8cd85225d8645347a3d219477672e", "81cfa3f6c6637cd59be60e2f47f6dd81d1a4a0427843e930cbec20c9bba9ebc04be6f4f1c9ef2832c44f256f45626ae385b7b2e0404fc2fae61b5fc1696430530cd347012f48b44d8eca2b58997cc9bb3fdd0372d00d0970ef92797af8df8f4694cd1b9a5787399220b1f121c87ec67a7a7326ba5eafac43eb04ac952d1249b5eef7241f38adde2b7f9e076f2fdc248b247e57b2e3bc52ba0b901411e26cf9820fe74e87c21f02aea4d76f2a6b965b146373380e65fb7b5a6dd45d62d061f60787ef314dfcf70e517a83de43b6045e725414436661ea41734a253c45f211bdb833f769808d7abaa7fb7cdfa0e2ed690040903c477df6cffba7e3ceffde28cb284a1d44546bce5c4e49293d76c2818c3006a4c52193afc32567645a6ce826956a40b794b0c09a9ebd8955cd6344f48d4b601a04ad5a9363feb236b4dcdb59d96528496cb34d6ff98cde9ddda202a3cc69333ae3d9a376cf5c05bb5abe98fb27a82e5d1cf1f01de8f1f979ee826f1b45a44f5d90230057ba55a28d5d2b123c4f8d7e32434f973a4b7a275b74f41f38318e5840c64077c9e9738b2fc5ceea3b062863510f720f5dc5452bd8a5ea08888a4569caef7583bfcd7226027988d4d45b2ad1de4702d489b30622a89beaddcaf410", "b61807de075c4d456217b150f6178d592d71f210d843d725e9c86768960d3698b944602308e32ee96abd401ef3b9e2738d752e2fb84906ff500655062a25fcbc66259a59acb7732edbaf0bf172533c18fe07538c56783e9e22997cd2326b28d5ab6c7079d64dbdb5d04063442f91551d658255f6db3a6c2eb6889fe507506beb3ec821aa9999b61319705be29bb5faf668c62b51d855f622a1d6fe4778cad40a6c13114937f759f14bd6c19f425d6ebd487ad26c3a53ab6ce192d00f7793924e300041e2281e1bbb1ebdf06ea47a6a5b070a946e5ce5cc7aa4233409b6a0f99d92d7c9c85cebc93ca1e0655fc0355e872fcc8c6c4d91dc8de5a206350932ed5a5d76d6239c5e18a96e0fadd226a64a8438b8a114cf23e3ea3115c232cbd99c51c98e8de4329f603233427ba0a89cedef4106717a38bef533d59c5c4cd48fb350d88426d44dfe778ebbdd619c7d4ed8e634267fb1f8343e3ab12120949d0060deeaf7a985c1b0578e31de959665305094685fcff41de38e86c9bfe72b468d8f32ad3826dbbfd7bec93f0aabb7174d9c212c57f5188b4268b4a65e4c258beca0a0f403e388da06e7e26a8831fd3b6640e1", "88d079c87ce9ab54e50232b727ef687e1ec03218beb8e63f87b12c68574a3c20118a840befd646a37ed8a66700fe65a7af084e38ff105696be3208a4a48dfed7401402793b343dfb01d168dff46d307cf72aeba3153bc402f75077cdf35c022f95f30cd35c4bfebefafa214721ec63af3746624fbf462012d180f8dadfdfb558c81cd86a97b02d5d289f25fd15b619c46fd006d9c659a1e7eb754e339d34e9e7c29230d8e8a431dc44831a307423306f1798a553dd90e61fed6a430e756784ffa5e8242022f209af2cec04a0817a7d262b3bea397dbfb9bd6f38a358eff12676354be23bb0cc3233c7026b74360ec9ae5720c6e52aefcacaa76279cf19198441bfcf1dad20ea0b8d041dc048cc6a7a8a535415d4a05cc740e85b91cb3810260610619fd37eb9b869437719c6227f4b0c72f1cd5eb27177803abf4b6e262e49afc326fc460654145eaf73ade2887f0101486c72312a5419acbfedb186872fad754d4f720b5834fa77a679feae2b8095a666b0335f84bd46e0d50c44659b41919533529d8c13c6068411a1c9746995caa1", "b9918f8a8868965e0072fbcce4de217489985d57dd3b4c4fd8333fabb453c2e0dd06147c2f874363d202b02fc30de13593a0cc8bb41b1ba245f044b798d32a539bcc10529a5a54354226cbcdaab9e031454f31b95d1972117d01c8de02c1267f86e00df87388630a5d437c2d73ae2cbf81b20c0e566e2ff0ea04bf957b3315bb11d987648508c0214d1c3bb9e872fb0e4b82521843bd020f9ba19969857c54b397a04f8b423fcb377982200f5efe33d91c51a1cdf00dcf3b787f85d4063f66ddf4b364763cdff88368227d23785530d154152eaf83a0c3613ae47f335cc448bf9be5a1a1a7a751a4f0ed1b550147a56f2bc6c6af283753424d6ce9bbf5ddedf3fa58476c49a2e8c75dcbc8065e28cee349d6af95c2e109f014fe4ac6b1995eec1ae153cea00f1ffbfcef6facb37890546f32d1f4bdce011fb1a8d6b7c9c8067ba66b156837979cb1507039f19c030b9d686922164000285b8bdf7de8f3401ea0dfd6144580472e4c9f2b9eb4252a1325", "a67fa314174377681be2a4bc5c292e33c8fc8cc6bb2dd9a50ab9f69156b3f9ae12d3844807b42862aa7320c4ba0e638d914872d5be390eff55084d1e96a52635a33a533ea188bc009eec9105b27cb9d2f625e80413268f64c16768c28ecc20ffa3dfe370d5f9dd4491033826b6ffa1c98d13de671948785c347904888b00b732e733a1a8aa0def3ac07e4a726700be7f6e710d8bf3c42bd2a81a5cf15f966b405257c5299184fd5e558d1ce68b4f53600752575a621ee20fd41b2126b7e19061d6ad294c378cfc7cc9229416c0800a1d5a7dc42b4d32bfcec1a9a1dfe2ae2e8093429b69c477c14abbd11ad26d9e95f406a5b3be494b271e9129ed88bdaa619ad19b784007d39eaa0e11c9766bb450b82d93d0ab6f52d05cca29f80e5ffcc122160b4f50a1f6898bd46d9ca8104a7e7b688d3746ec3066ac7edfb306ab0c9b7d6442a2838530d291e1d475306725c5fd"],
        ["acd0823161add06b37cf7830038ea39a5564a4c10f328388e67f551388f0ceb14cc02ab531d5f3c9a6eea9b0de47a7fea90ba81b81e810ddd7d12cbf3f68fb5ff542d9b8f1f7f5dcebb4e17ba2e79d362559e8116840f5f511083fa327fbcf7885b4f04aa0b962d0ddafc2a217beaccae8ceb2743909e2e9728eca67f12d1abbb20780bedec14a4d3c6cd2ceb5fc33f618875f682aba95aff49395ae0e2b11c303e1873656b0628130d05e97c5ea5a6229e0f2b3cc2abbb990efc4b371940318656983e96a4ccb489448d6a192155a9c4cde8661ebc00689f736f8f8dc3c5fae96576e7c6dfff57630708ea704d1a7e43a8bb5c5510663277d1437dccd82bc0873680ec269a7443396933c11eed450ce032bb5a3daf719b6533448552db1d2cc50009005f02160582fb2062ad7d30eb257eb70b761e09c816e692f551e94c1871ced46c9c912779d77c004f56d393be42cf9edf6b21ffef3a8faaca36091c5317e9102f323a7bcd23464add2138059df2d69b1d8be08a3b328246a8b19d0f9367cafdeeeb7583704da0c86579df7f09b40fda06d763347d5007e9884224ad914bdac9ffc1e742ee87547b78dc7b6a026272618da31952b839ca1bbafadfd1a17e1ef54a100a79808c06525ccd5723e6d12e0fe9323d7b8f0dee79c35ea7c8f84951e48096a9461d9229b12a648464f84", "a718f35c30ee54014652e75b0e560a180038a0f1dff1ff7cb684b61dbce18dafc1bf8fbbbc3040c3d80e7d30af5dc031827e3a689d8888637b94567f035a2c69e05d7a0134cbe65a5446fe523fe842434662cbc15783d712e2171464d617cc708eb47f00660b08659b9e2b4f5e4fd4ea05c17d909e838898b31ba56092cf4244c8decbdf98590635b22f7ac9dac5f1963d5e1aac4216511c8464524573cc18318a73070f0a0a2171d8516ccebd56bf403647de82094ffd71a22e5e38cc58756b83ed3555772671dbed24ab75be62df606d3a5cf2d05a034f01a93e8b25ce3b8aaae0c6cdfeb95afa8202c00e73324fdc6fc6f8611295630637f99f19796a509b108ba13892d14ccdc9cad759edb5e0ef006d1f536d89cf96a3287c27400d12429b51a859dadc7e553b9cb6f385186d386d13d71f0570aaef72ffa9f49103c395ddd71814f19913ad7261c09b6cb447d733583c81158dd1e6010b63eb4435e9bb180eefe4d18ddfef7ebbaf9772e7676e0f48cdc90cff56d479e9e73df7b3b936fc77e65ebd8d6c149ccceb2afbff1b115a095fb1f1dca65606c868a0f2df2a1a9eafe6b2c742b9130b1b9ddce470572f0eeb3acd63195bfae22b7f8cbd6d505d8873df47bff13c647627aba871e3a900", "99364dbe44b0d0f8dae4523564c32d86de3dd716801c307bcc11b996f3796bdba514b48ff92f2ba6780285d30dc1b12e8a5b189921d844e65e6aa35464100c1fcfc091a0c9fdc9e0c506a207f7fce64cb46de85e97364f85f5d17b3d95803c7fb58a6242aa97e77de83bfb313a860051808366a61f83372296f7e522b5d8870e1524c17bfaaa60288a2c19c39df2569f5e0e650805f7b71f6c824ee4922e9c6590f96d2c5d284e317272396c23f14b1661a2fa84ca2b12d150254dcf8e947cc20911ddfd5e933ee98348b781cf15e170495534bfc63237dab1c85cf9f3c7c072f7df4e578444390f8d72816260a3578e69e268fccbd98c8cf8165010106c3045f2b05a3d2c39a92d8492342bcdae56b03c2d9944074f8a8d3e742aa5a06b98924ebe444fa93c0a5efa47e3e2468e8cfa1e1a460e80003c00061bf5bdd9295cd34e12c0d9817fb7e9bd5efd53a6bf95fe30a72c4e5f2190a7aea8f03221b18be08c5a7e66a9469321818ccf166ead22be116edc951b424b2b04fe21bec59035156af48c3fbc932516880764fa5b9f9daa715536a4f33570b11da481f408506f438da49e44492da5680a3216beed338a5e", "9219b0353499b8d363534cf14f704d5f208bc2949703499ad6d018797957d4088894d76ebd4e636427d11dc984c1e723a828005cf18154ed22fad41a18949e34ec935e28023550a138ad45087fd8c62a7b46057ed554692351c54176a99df98899182e7c5600a48f00ec312ab1ebd5a0724994dcbdbf607455566d8cb0625534ed48c2aad81f7ece7a9a9248fab494754e353c2a6d41c58620a1476ad367478dfeb4100e8f669de879c67e394e8f026c138e4cdbf7f19a7641509a602585441113e29cda6228cf42adeae65a183202505f7abea7f1116785035df811186474035455dd91738982ef45f2641df1c2567d509381d80a2a69feb2ad98651f8d28514d0607d4f24ca34fbd9eb3396c34e88834193251221dfcfab5796def9831ec50b14fde1115eb446c381b3a0d208364440a7f4b3c33eff91ea6c0d82e316bb7382d13d1f2dc8bafdf2ece8a2ce4c75b67645a5418aff132d98a6928d5af7b66f277178b6a8fe3e300307dc8ddbcc1ec632f6f14072935f942d39ad7ff902c44452f361f2386ffbcaa2de955896a310271", "a00a8c8bc9370edf24c2b875657cff5e96c4fd992d6751cac695f55446b20c8c17701ddae4101359f324ee9255c4bfc0a1684b159819a8d43f50e624e1f791b1f009c56e830416aa1bd6fa944058e628297e14e7d280cf9020c5c42fa6679f4a91106daff3e7bb5b85d70a6557950867f2e7bd85b8097cb1f91ef6c50896127be47c4f6c062b2ba304b8d6583907a12f3a9141f146bf5ac24b8ed801bf9c8558b0d29ab47a26509abff9673c8936f3b31b5214ada49765866bf6caf12285ae44bf46acac2245bc10cf26413df1b230ad638548db844593d956a0d48751f90d3f648a6087143e34d57e6c1611f42bea7f09f301e093592dab659951408fb5bf6135f2971eb3d3cd8ccd3389e265ea52331cfb7310c58569d9d4af4bdc1e48dc46427530a3769751468f7d120accd27936642d2124fc9c604a79d2073b32f896bab61a515ebfe4ac6d4bf74841280c31441c809f593a6d162395e98c9e9ce7a2a7ada551b02f9852ba695a787f4eb76f16", "8b52c6ce7b792992745637fbf6b784af4d4c847fcafe96e3aaa81675b7bc68a0ef2f37a3176e0821233952a579e0ece889e0a3a2ba0c21b98f529d6aecee4b8e41ef93da1b30256235f71a4f171303320402193d66a3ee26ab2c89554537c30193ff874d80e229dccd8d417e3a694633381b6d737c91aeeefc2d90b68aaaf937118f34a925445f67a26b6e220835420c46b9f165cf73208deed1efc929f9e314434be0c4dda17de84454fe115613d51d69c7f028b92e9849dd821a0fb9d801205ed9fa438bba308c0266c93bae8d931b0fba6c8f0be01ca0f21ee6db497e68d9c98e09317ab3163566816001cb315b6b3ba96d884dc2da593428cc5be240d3dfd24db8904aa3817b133acd92c40850f1493b52a56c41d8f71836b5e6981b52a1c2e126826e70345cc5e74231f723f11e10d363640b27e2492e19542332aee15ca1d2255b74ba3a35a1a84e98af12f217"],
        ["a835d4b210274fb892cbb663306aad782e4b2b6730126408b099e3ffbfb58589618270e469e8f3d0fa46040dc24b5ddeaa149f69a977379b00d827bf80900ab1429283bf27a93a42a0418fb5f3ab81741e477f8d6a920c915b41fe9731e08c36928c517ec8d4b9bbf34b8f78fe98e0190df54f39d74c09f0c195a13fa9e4d4ae889f0b879db11190b8ada01ef99d151b3388707bbe05247fa50c41cb97f96a31d1c84ddeb34ff13f027b330457aece730960f479bb63dc5d4a345d4e6cd15d438afda45b0202c90b2868792866643a2345e06965005806087b70b18074ee0816304f447b20a72cecbef415a812eae8e24b80f52b5473a48ccb9caed02d05c3496cca4fdd55d50bf73da63dc76b915bd4079197ef5a148fa23b9b10ae25d534a5426264c090a8040ab17f6c4e7768fea82f2e8a9c0c199bfa1f0a55b789f75402e600dfa443ddf7a7f3b22e65af382a7b08b516fe32823fe0ce203a42d8ba00d47b43fd01cd3d37da10020698e8f2552f005c81f5eccf17fb64e8650e37ee81017ea869311ff8e4198bf93e0558d81e2169b3eee96f50ffaa165631bcd874d751425c1bb44fe632a2dbdf36c069ebfcda486b70f4b47bc82fcf2145634f845c02600868f8d8535b1eedfa841b7c5b671e038f72ba0a6fc3b1d9e279d9923030523ff21286b74b54acfde68271c34323ee", "b43c7061587c67a7b0a83b038a7fc006bfb0d9f126df9625c8495072207300e0388c845f5db071b10d3fc2095aa69a7b8eb854abcf37656fa784388106a117ad1515026b9f54e46c5d2f284dcdc777fd89c3e22a4c92c1e6d70e7e3fb701c85c8797c332b54f1882cc6d7baa3f31723cd7e439cfbbf02322ee349e00b523a0f7db4db212b8dbdf5d720d4a558d3917dc43a298cc0270a24ed2658be2a63a92aaa9454b4cf1443f74ffcc6f15b6075bc9380b99dd3ce4259c6aa72d5a35b07bb86de0411c497885eb0cb84a95ef039d274b59ed6e92b730ce1e940e1010c230a7c588a3f8bc609ac34c4c8606961ad2af042e50a364da9ac6ecdb51da35cc8e253110f5a7e1f513a174c057016f6336406ae3348dab9396d07a57d0e1cd1378229055b629a6bbdbf323dbf7e8c833cdf0585ef7560002f566999fd81923a158aede4054246c648d5cf19918dbb2003e9a2729df7966b8a8a3e9878b2d863736e3320f22ea2d4fc551b6ba4e740a907bfc3cb5b69f9c04a82ceee4e309c19cf46c00f062d896d5a7638ea8d22caba7457a2f54a59001049f459733fc2fa09aa479a137f243b07bbe2237640c798288fb8c1f899086754e70be3ea4526d8c611762f83b56c7513cba2e413f8f99bf2a5f4f", "a8b0945d5997d8d7620a483bb61c49f5deeae40be17769848c1e9cc4a669df5a0ce7133acea77c1ab0ae0042a13cf883b18ff1620d80746ff2b95198fd9fcab84c10a9871197974b0695d2ef89e379789d37a1af73ea0863111b32ace4aa1ec4ad4bf65c1289a518119342139e1b9cea75eca9c1414cdab1268fc478fd8313dfeef633c20fcccdb0ba24e50f174ace09286576e7c59ae4c681a609dfeb69b64c202d6e4cff108a056f6fc8462c2ef70d176a0bc9066369486d3ac96e2d8ddd5f36734aa56843acee891e173dbd174b8d2241f69697a65f49da9ccefc7335d09cfa5b37ede73370142770188f92130557477a212c184c982c4dd05e96290ccb4100c877e3108483ca668038c09feaa70e47af6f0b0101ccd468a62287293ece2818ff66f9d999f821a7f945be63234b4a226955c03fc9730f2e9dc1d9ccd28c9ebc717212a313abb5b387185829aae2b54c70ec4f4649892c03523b25eeaf49c8534816354d34e8f3eaf68ce1302aae274744f6600854967571e8442ca485c69cce3ee1b9f8f4342ae347b5d7458d7e6b57024a27cfb92fb0099ddda4225f854e33ffd3263c79b80ad6cfa40908e96eb4", "8a1176d71e6b39a90a2aa0c2a1b257ef9e5bc92f5d08cf5dc14947ad1249dd4145e29b335b9e5dba2552235e9846bf9590c1ba85b7995d5d078941e0d87b0146e7380ad712b6ce2bd58206c82b45b03c6e1e8e858f246b917ee6f4e21ae5e1acb42ecbaf17f1ecafba389f1ee19926c1c577cabf53cd11cdfa6ea3064203b0f35fe9393e7c7c9d03db29935b4fcd7052256a8dde64f3240c69eb5643e59ec9477059a86c6ded6fc87dbb02036a0168761d9e20d74e2061acc3c67cbcebf17a19628dc6180e9f3b3c58d077e137712ba438581dfebe3ee15501f846a553c1a849e903945fd2e4f5a0e6e980ad73c57c503aa5975b591fec378a4058264503f412a94fd1cd5c09b5b283c48016ccadf31613eaaf60bd7ef2776cb44419f30d384e38ed0853b776800784ab0720fdad9dc210f8070196785990bb492f82a472ddd3145725e353a0c4ae74064d1f2e1c68223ebabdafabbfc844f2fd5bbcdef0bacb012d8c7d958e89d5b5a6968fa55baf105d09a07883b9d9ea97ff943b2e93409e3080ca341f04ee00dbe26659be4827c4", "888b82668a69d1dac4abb9b393e491b25aef94aed7a9a034edf17fa5906c6ed18f0971726e826823584a6751091a6c25b3fc0df186e777315958c6601fd3ac2914d891b64742c15e0866f64d695a4d40a1c8f310d33582b6ca44a997e77a0c069753e5117ca3ef55afe4e8842074f8c1007d3f7808cc598902388c8c1bc19c6db2496518e1e0b6d308228295817628d1271accb360e83475301f4a8eb1780247931b1543ffdf7441a7974aa794d4b8c63b16962366c6a26c66f22e4f14422b9aff2016b0253b0a703bf5f87907be83630d03f4e4bdf83af677ce891acd6d876a2d8abe669c4c4e4caf21a6e429e2e187286c189894506e27954c47bb85539ed01da3d7e6f4807bb80ecb34a363f4e10c71481f78be98170e12cd2536d1ef9fcb80178978f2ac73434ccde628b1cd7368678d151cdf7527a9e173ed3eeffe70867f0960a433a1ee8bd14aa0c9f5e7b5b72996c5f21afb0a817f984db7cc6ba582a88bec058513e38f21a16d7b4e498eba", "ac0f64336dffe829d3b62115b9dfdc6b44e031395ae9f2f7da1238d15a30ce74d3ad6e398640ea4c3321679eb3dbdbf8aaa17503fa6d45879102d4012b5674701b943899de96f5a2f37f25b4fba7be1dc98d0e560aec0ae2b513d68eea077275af69c1e236b2fff8ebf28b78f080b00ceea230beceb5e1fedb00554483348e5da745e7f2044603bcb6a1dedfac669b4b114c3e7d50a65ea4037f8f41342169447e7554299dffcfb57619d1955f8325404e6a124d6b02faf02f23753b19a67577fd977ca0d647fd4cc62aa5b3595b64792026167844ae0e7a55636171c7c8e32496045d5b141eb976e39dc15a4d0fc1913a3cd4b9ddae0431ee9e0515f027326df8cd069eeb84d1c1c3877ee3c4c647795dc9f832ed6d7bcb09e6ac993798f1957089361ae74028c579e09452161a152001150e9f71d7fdfb81bee2ec47883d805b8929bbebcd06435793bf3dc9155f2a"],
        ["a9f9dd1adf4274dfb32c21ce03b5116c551d217d85c31fc83d4182bc49b3ae6d1d72ad0c22f3d7a5ab78e09e050396f58b5101ffa8ca53256123be4e06cc6755133185cd7c5f7eb7692776936a6bb170152e9cc3f4f5c5ee92cb269213f42f2d867568b6d60609f354e019734480beb3297a103a217b2e8a4f6b2ae0372edd8045acede1ba6d40a9300384c5bff3f53f1dc57369f8a8d6d98d19be27e4339e7ec832fa3fc44f673c6cd39737f4d5fb9c59bf69a352e9f5b9c7a01f0dfe61866388c953953813a0aa332e49bd743f398543be06851490bd67aeafff43935cb95834d27db30b90e7d5beb1416da26835365ffa5226447517fa4dd180adce261ba121621c79bfcb5109f5750f440424e60860e7dd34e786e65c0e69e1198abc4998e7459b9d5cf23c0f4f18c67c592603e740a0f979d8bc63874fd87f82ad6b4742d2c3d15894d4cdfd79f6a41e19060226219306ef94306c02c8f1aab60b173722ecd0f3b7475ede2c0b475383f458a88d34e8ef509919e4fe4fffd7f0a7bb6ff42a0c6da3975c024ab0e261c242109f64100e14d660375175e92edd60b363339df81790c956f6262cf1ea603ab6954d053408b2620769321c823cb15624f15633ad4f9cf3a92da885c34124df3c57359b14c668c224bee9e2efa1defe2d447d8bf8e4c78ab1017de3eb391415d56cbdb4", "a16bdddbdaebf40de3ecfd94673873c019399cb74b23432ee26765fc6c6b4d1deee6aed86cc37b409ccdbaa7fef38d9aa017262cc0663575658f47d38cb52d863d9a00aa6e2afd9feeeba11d773d1bd1314c57b87ad66493a7513d0809adeadfb722d63f31642dfa7c81981c3ed82a54c5803ec0d0ed17bc2b4f14f478535d2d3a284f43c051610142cba13ea956efbf3372091b361b6fb48860babb3209a52fae0616012beb503fb4ac03ad5d2f9d7f140938f78059fa9262d7d67cc52a6fc2aedd2d833413031daa22c9fddd6f5e1c2f355c1f7cea7817b6d4c561f0854f619dfc1e6cb2d397025c4221206cbcb40a08578de7975e2ff7f4cfa7a3ecbb4b0b98e6ad7051b08b7dec245bfbad90efbe0babb46736e1efaff18505e53825d2fb3227560280d9627b8baba1e4cbf291e00687b8b91c93599f68b98151d51f2dcf6d0950bbd056bde21b1dfb1998782258580c0f96da8057870c6c332fa4056a019c0e5a7f723d227a6ea4113df9d8c001209c2a775a705d8f6925ca4325323b951083a657b6a2ced6762c364f63bf297c49a8f6ec6e83017772cefb017ebd42aaaefdb40fc7a176c4a4bcdf65eb66b757089486706530bc35d94694ced691263c73e6497496d71eeec24774e3a4b72d09", "b644128aea60be1fcfe9317eb18d8c405c996f5ead16aa7d704f0806b16c83a1b694cf7f06e34098176e3d092a717ef7b903fd70accf9d965aab4798c2dfb8680121014c032bc49fdb82cbf309a02d1d5bbac3f9d656260136b04ffcec84727fb7dce665d56794a8351a6a73b49721907e4e45cd950518cad58b8c7e84e04cc5c0aaa89b7e7a07c8603f3d88360b4da623dd5ee91750a453b0eb0900bcbb63d69dd8d223c2f2d57d27ba62f6e1336fd862ec3ef3981679cf5fc1b608573c2db35b3ddb70e963d66062d6c294a22a35b456f38dd306a32decd0fe64db241e33b1646747c86fff0c790ae8bf15b8c41b344a78bb10c65391bae5e2bf1b1ac6693536427e1cf5e960ef2dfc7c2b298a85e82dbd0d37831b697e4845b53448e8c52d697a078238eb7c1b2a72c73cbe3ad22d266d31cef6e4e5cc4cc9e25cb1d7b9e5c00661efe7c82e2ee230d862dd1d590e0347c82eb0de38c23baf58f9b75827711f304eca7654197e00813284c050b9b1113427bd771e67ba2e5092966497b07fa287a0d99651c7eef4c01b5e3d0635f9418bc599d12345a667711f207d180158528dae9c74644b62a9060815d7b04db8", "8455b90dd703725e049a924c3c1c7ec82d16292ee4cb74ffd39e59276167b22cf136c5b9ab02ae6989b00ec0b52dcc1b8a62cd68d4e735bc3e5de2f04b6d426c52c28d481e6bb78c9d9060c721281bcba95147122fc4d5581e0a34e3dfee7cb7b1ba93a6130eb625546dc0c2a4882db95d7aed69c6d257b5ede6c9e3146c5572c2481208e16388b5807dc08b2a37417f5494523f0f7639a59a97c83357cef86f01db876db763db137f9d157b60a42c433621420c690c49dab7e69d5594b34b28f3739a3b4ad2c9704128028bf0178d095ddcda08984af8da314496c2cf898651fe5a5f07251427aefd0b87e65519305b2c77b87bfac42a280b216d3ca204649c2c0ee05f80c64665399d17165f31c1ff4b05c1ed0df6b73d13694cd803ec0ac7f37646c066809a83c189fe6d2dbf6b334b76fa3c516d0a4184f98265d19daad2343111e6e8f60c57f16780ee339172c90a917b7f930a8440ed90a1ddeb00fc6ae4a830812cbc4d7dbceb7aad9f87c8ae313bb9a32359cd4ffe226dfd0e50e47bfdf8279f453d05d5e4db937579cfbb9f", "a72d3da765fb517040f2df2ff2b55f972a475382a5dd5c3dd64f970127656b4c58d376e0d804a12c1dc4fae5e6b0279eb281887e7305a417343b41bfb0218dd17ac38bd46bc4d1c69b2284b98f66ce252921b8efe3427632eae4c3b42fabebaca010fef7af3c648190e0a23ac618d4a7d8c3ab1d5a5f0b3ed64cc02caffc2c00100b5d346f9cd727ffa16f5bdb5191593125e784cdaf22933b4afb46dfff81746255c3a6371e6be331a50c02732f03912bbd95849cbc32a6982095c0956ffddfcb4227062186f8ce0915b44debc0d92c1f228e1ff9247034248134f868065fec3b615041c37c1c2d91dc4907bcedfa7b181043c478e98559d3da69dca2690a678c5bfebe5c1900cf9585490f9d7f841e125498043002160b4e34fbc8d9a3e0b9a3bc37cc583fb448b33c9449265e520a69bb9f5358a30e2af7a6efbed1b5e84ea1fd4b8d87cec8fc155b2142b1da463963d97ef0d41bf555613607edc1b524a5c30f51e77f29c344fe18c5dcbda00f89", "923edbe2d69192839a381c09bc6f5761739a7f0d2253028133e092dede235c2ddfb236cbab756dc599b2d68f0349b11499d767de03b7e2060179beafa2e93f437fb1b459eb4ec99455f345e8a3b3ac2c6af080abf92666543a04de952212f71aaa64c09fc32751945b73166a822c2d83e1bc8001a1756176842521316bec8815972bb93888d657d6609a275089c86f4e1ca752c1c31181ef3aff54a8177be85bb45bdb3047cccc7ba2777ae7a4f7479e69a9e2330d1aa87b7881b430829f41ef72d9432925bb855fd9c3fb5ffcede06a2da3d88997c3372248be14b9240854c917193d0458924f336feaacd24d7b9d2251193a58de91c21fa694562f9993a0c3e580d99abd24ada5de6a2c3002f01518581c45b9280d66ed8456a2e61307f8c76ccc2c04fcaa0cd10277dfd7e0264654034bb5aad854bb02253bfa58dde879ba7277b246ed5f0fb26bc276ed04aedd86"],
        ["b09bc683c9fc8a3146179048a8539c0371d67645388b9660bba5e8126b8354ee515e7ad66883883010268c1092e08fa799d26d523da5bd94ee44cb982d96525ab1871c55d6c524a7d42d3a1fa025b8eb2d2f64d81af2139cb1c0f07d5b96ad698e231ed8e14750daad29dc3a0c0452d47831e2cde8121aaf38824085628a1817aeed1b190703a12507ab7347a86b21d306fa59cb58add74ccad5c9453f15f179c8151248bc916becd751fa34579805cb167b4aaa4f9651463f8877a6e85ebec3f1714e77f126709efe278adfed9487573fcceaabced4fbb4bf772fe405c83aa1ddcd3ce1369cabaae0e1bb20b6ceb437009c957b6f86c591c861b2ae7c0684b73708ba97267172cf56f546c6fcfde449484ddd268ae8990c96d15686ebb12189297b8ac7b1b94173fb3fd8a5eec6567755c56bdb3dc27ae1348b6470664e7f58f5203a24b876d40850e0d4bc1e44a48e3aa2e5385296dab32e43dc195ac481f7c1938869b8cd66be4b47fda1231eed9817a17d8139a2f58296de6161b627b83eda635efd2d52384e9516b635f3ccc13f148876ca2a8aa392a3f8c6aac3906b7615cd386cd1f46838f07c7e23699ab61b0bb7484ccf46d08ae2d02c17d564c7a0311b895bb91482583a1e980ff7a7bac621f10ac4ec882249568f3c4ebb7f18a8caa884ef2db54b83bbb3319234411b62", "8367162dfc3d9bd40648cc9dd8ab82080971df259356a3dc5bc8f29c010868e24084948f54b253e35b89d252ab4f828aadca7752881c19ea6c97f43fd09399d75605a8f16e409fbbf613bcf5ef03c9e5504887bba9723b551e7ddf94376b93ba84cdd4cc7b77adcbaf85c9d3af4b0d16393b18a167711eae657277a8e13b27c7286c0ada2ba823d523383e827d77effb37c36185c949109520a4b015a6ad7fc95d99ecfd3ef820a656a05731337aab003576da357d3fa3a79215250e753ececa01e6faf1abdee7faf4a5eb4d80a8a2ac3d8ad96faa6843172624bf2ef97a8b7057dce77c7202d594c5b2254627497ca715c5596f1bc8a4e3c49398d2705cfdc9e063fed069be7ac209a15ea0ab435e8809d70a2ea6afe0d5b497a3d1217a0c965888598976c101d68448f141148d58b303a95b543259bcaf3e122a693d89df1dd01df6549e1b1955c129a5273c188af71339de540c9e4e4cc940465ce2e999217f53840772a3736706432185f72cb74b5783fc82770bb752e9904b0928a0177995f9aca93b3b2901ec189915262a62a108efc14e024e1e49e82fddd15a44f0b60ac6085be3e4f17d64c32000f1b66c6b30a56a96ce56bf9dd8e9b40996b7d1b4221c07e5940150aa888bcce8e3a36501", "ab60f8ac71cf4c03366c3e303f5b113fe735017b11350a5a208e4bbc8c75a924af12f8baba9d0c82b8fa11b375d99cb8b33541f4fcc65cb88586776c899ad60ce377d6a345a38adba7f327fb4160dfd4f62989a75d109b00a74d295a10f2f334966525a11aebe8970bbe22cbb86a51c032070d4c4cd15dff040611c6eda4ba6af25579980c4bff852a9f7319701ac9993b0ab9ab0e78b8c9ef5f86d1479bad663329cf8a2656dd9460bb89560ded232d1746c92722be3ef9817fc370d1edc8d0d1fa761fc439cc08ae1c9af90e1f55f703629812a93f7d0c72cfe32ae922673b5f9f463bfe5f6e0c9b0fdebdd50121f1229b997c595d9062e53a49ce12da99a8bca751fb3362500cb1572227189a68fe27ea80c420f51d4c77162e745fafec75047d52a40f0d925a3356ddd9c2e719176ef7240fc0d8a484490e40cafde346ec51a812cf37df7b164faac4ecc8821b0b3fdf57eb8a172e04a62ade6ff0944b73715696ba2fb8c4c4018e6bda988fa4f01ecd821b94f34391a717bff6aa36b620e70c1abed3222280752843ed257556e1123df017e24680b40d85220b97450d264abd9784245bbcb3a399c8253e2ee68a", "a68669f73f2c5b00f998b1073d67e26c2d897fb8a453190d44b3a4019841b86c124a5f6416e2d92c9fa81c5c3c6cc0abb68189270720d305c56aa4072191c9e498bff08dccd9d705899acf16a2c8c6cda5408c55fbe653dcf8ccc6cfd4f35efdaf7108a4bc8a01c3dd4962f3105432f2eaf5234ef3543a4e28b195d3b6cda038c19fb9a197446bd7705329e5adebdad34f1944fb8655c5145c32157a9bb145301b2b71b580d3b31067c2b7625284541e57ecc50670a7488413cb178df3abdaeeb692b12bc5b2926516ca39d888498337147942e741581644b127e272e4882da0017dd015fde44f061d5d3987246e913e6e2bf5a229a3e917242ff509da405bacdd5aa17f6d5ba0816201b26625b075705a504e749d18f4a950419d04c03a2952a747813670c7f30b183125a4f3a241262d75ec94d5b22b4f17be81c13cd072e6c6bdb0ad25d7b4ff6f7c24ca0941a99e66f158d734132ecd1389c3200222084de9a4648e9ee6b7fdbc1cfda02c1845530806e8867f661e6752de0e0ed6e95c682b942508100c4c5fd88d4ad21c5af135", "a8aa59a54cf725560b92dc4528e9fdfbcc55807b06fbfc579be2990ba25c321d3850150c2d990e2e529c3e35f9aaa3d7ad04c2dd7b6e7770af603ba305fe8201c8346c7607853c2adb4c13b330fe63ea12eed04b3c3391bf86fca56e1c43a1cfaaed3df1d5d5ec5b5f702e87b20a97cc7286a2a7a5f2cab8aebbf919fe20b9a1a582f786964170d1df9c0d22fa9bbb7607c1cd269be434fc515c99bf798748e72a76dff6b2d242947967c68eda2137f45e15633783ffe2460d8e245f0b3ddb8fc2e01a3ff5ff12c2eb413b27d71599365e344c21ddf32e1f241ce1621fd2418176428409065168af66c53e190620d64a683ee1fa07263e11f3df7168b4889ffb7dd46eb41c0c24caf496625069d94a1836f66ab31fa6fa3fc25f9271a805b5e00538d344d23c2db5322b80893cad2b7a2d599fc474330ddfe6477c374099ce1bd409d588079e73e527a74bf720751196649e90f7c61cf99fa54da23335a159471c6a748287bbf1dc1722a8566ef4282a", "a7dbcf62272d05e1d210293e2a278a3287320d76ac782ee0597f5e5927109af6e10675fdb209e3d5027518588316e1d9922604816829c231fa06e734fac9032e1c60b68c39ce2c4aad19b10d7eba7982e0796dbc1f55623c74cf68fedd69b448ac1d2f772fdc579ff97b91949492b8c55b25ac572ec80418b0952e2caaaaf7a925c6727b05537b5636e05e411b23844c38bd47e1d869a728b13ab2de7c71853947783f7ff15d73bcad4c8f909eaebb5365fac62904dcb7294909d7147385d38378a6a524fe7976543ac32f92ae4edd100d6b1e004b73c646fcd8eec3753ee91ba402a0eb7e27c023a9db10f83929185b29566432b8fb458a317d76d3bd9df86155427ba9059ad430c8951dc0c392bd1f0c425543f0848da6597ab275f06fb3a821b3f3acc934fb459e0aad5ad1b163524beb3d7bfc560d1d237d4edb053d80303bf54df9125c5fd8f519a5f945ec0a7f"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs,
                        None
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFO))
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());
    let expected_proof_with_header = ["a13bf9278978b23782dcc8f5a7a5581241474f2a28f4c4cca5c3e01329b7ad47faeb8e568744a355f51354363df702e2aa9408da8909b8d04c127c553acbf3e1c74a7130c2798b8c98831551d9299ccbd59df6f5c5ffb9e52758bf9fa51cd3198135517fe8ae1d4b8291cc025349f592ada47c97c1d4230349e95a4152fbe4bc82e0c95f7e8d2ae17569b1fa5744f2cd0f845813973c60b02ad605c9c44052cd048b49b64f15a82bd825a28bb2dbb11f303842a63f9ca4985007a6a0060ecb3fc22c0274eb41014d3b6a262222b873706bb8e3875a4bfae144d6075f6dc111cec992bdbd8fe901bba217044c96173dcd3d5ad309c227eabecb7c2a21b0b5c2c8fae9529f50377b0ab8f25abd662138b20c0803e7cb90a35db05c6ce6ab2999a74c440aac3f89741fb57113a04213d1404270678abcf09debcf278161d008e3aec0792fda3e6d5f56128f7bc15850b5332f66f65878d7c2a17914fb732f45f1a46ec88bb7f47fe062c6a02223d38e3de80b85ab1abf6e634114325bdfa6e8659bf83adf7ac6c249974a7c6ff3ac2b09d30207e836a99a917378c132fb152f8f615e12ef8445f4c4fd57eccc1b0c49586068544c6b6dcb4e3d3cf8ae6eef4be23df383dba39fd2bff2347df9be5331939e0bd2437b17ef5e31c62525d6ce971cf616d044e1e189b3b93e60d37a5c767d0f", "8e869b2b332fbafc959ea35cea74ee32bbd99eee125149dc13ef6c5fead04e7c70e4ec27aed4527d06a48677620a42eb8b6a8243baa6bc6a22e4a61b1c2ff9ad5fc84240cdaf63d652a2a56546c7ca6e3e00c703f2bbb2e9312fbb463dcf4ec281f807e514ed94ec5055b39299184803bc2168c337d5b27d9c56043c8826789da00a9390506602c54203409b4f59f060004cfffa7b27be0a0092679cae95d41d7935e5e82d8d0a36c5aa17ba4e987a60439d469be5a65c3761534373664b24953a241adcdafc56cbbbefcaf1566b201b1f3a6ba9d61649816a5c9aa38d56c7135232b9a5a3fddc52a131b560447a9a506bd01fbbc802be4a1e3410272d1d7c11af876465d2042e1bbee46a34d6815de3383e7e6458c2d89061e20d1bf800e56548d166b8218aa8979b5c13941aace4942d27b95ea69d7934b6692d34d1f02f940bfcc91402624878ee75446c45109f4372436d059168ec5764db967914ffe17e67061c83ba1dae1f4275c5339fbd3ece2566aa69fb3ecac51a2eb9011cefb1a6dc33ce01e607210770af4b1b02cc348a5c53a501543001ef9f33ed177d283fc77e58fa796423426f675eebedb1a0b0370a6feeac8a79e7612764c908d391278a86aa9ba296b06f24bcf613e69877ea14", "8da34507a785b96dceb8525fa81ff189fedfe4682521666d59d810afd49e3739433cdab3fcb2d3ed58d8b45fe0ef5d25a5fe915b2a081adb4b4c4937140eb55454cb1335b7dc2c28c98dd8838c3f8f809b92705b56808e715eb08d9cd91910df947775e043b67bd8980a89cffe7e90dedc704fe212787af75940395229addd0d57415e6f54033c8ace929c07c7260b95084681d93b6cb9879b1957773ea84bacbdf8b3867c0d0c2c2c698803d06a1bb853da569e89e7a747bfe2eb3a3f7ab50bd62eb3a95206f9df8ef7801760220a850b643b22018c8bb7fdab22dd93330f40672bb91be85c247b6637b5513417c47f5504c64758148764966c691e800f17e6de34f5266749d0d6ed091863753e7c1741900ca9d3f733d16beee79a0df9dd4a9a40283277cae995fabba144e07e13d644c1ede695b87a3aed39e57e387642440db41179ba327a947dfc0466015bc274056ce3c5b1e169a825c1c7b97de779d5ed20fe0fe96480c0ed157733a8303b1759ba2570a78f689982407c49731178526e3bee8cf24061166b3a337135e6b1a1239ed80008338e5c261218adc7c8039f52e3354fbafecd6e52f3cd61ef00e980", "a9ddeee9ef338da94a45e3fcba44e9c47c7e8208a79b8cd3dd2327b3443c36d3ebbec2dbb1a0a449089ed6d371dd9fd78f4dd3a935d33ddf7be30ef16c6efe2e7748a7d74cf2b61e716be58186a2ff634f0fa9ee6fcf2089eeecc29a98d496eab5ebff4e5f50efdef4ef8c0f69ec0f4e39150cfc4296eb17fa321842f09877cdd6bb1f393c120be5252ea22862e2c76b37f0d8cf00239bf3cfcccb0e23221d58234f6ad4767a0d3628ee8e176d148ea10f4cc0235dddd7d775c96200d54c64c6b045d05c216bcf740bb9e7b66af5ea74627171e87ab155c37088a49bc7f40209393a527c75148d2bfabf37bda7d83bf051471e02e05173fbcda3cd26ab865661cdc3551013f0833cdbfcc1f1d977b28449c86c7503ee48ccdc12078f7f2be7eeed1612a32f0d069911fa2439e4812f4e1f2070679180f5158376176276662c4e3066d51e91d6e02a92b7baca1bf6a2cf4cf5df18cd08ebdecffb54e0c1a6f31434c291eebe13f6d4947f05ec5420576e5e02a0289c0fd9511ffad8179d96f7932bfe5e6bce7eed29808581d1f65cfedf", "b1ab7404b203b9ef38083649a1ab7dd645ad828a41666b941820ca68d77b2d9e3b9d4af496c708dfb87fc469878a56b2b02a260627f1d6dacb8ef0dd87d9f4dc3fc7360adbbbfde47c7087fe68f74a145e18330869cde08585d0b289fb62883da27d1ab668bac646ac88bb9c29a63a6bf6f0f2a29a0c66437bf62918f476c0966b3741a52ba6a293f5ce7a244a210d11202209a19c3aaced7d88f42ccfe494d5cd7792ae96f4c5b930dcf10f51d31a6431bdf0fc8e70c7b2d9be53bb49c98cd9eba320e6fb20a4b867e0fe29d4d47b4559d4c079fec8d4b6d683061ba5bc090ede54150266b96e998feb3f6d99fe09dd598ed8ac03657259244afdda81f2add4d7689ea61d11f957ccfb1a9415935fed1496e9814edac38d4d24d7d869c6d8010e0d1de03e34388bc6c04c263986a59133d2220d4b89e438bf21661099596c239c7b45f44ee60b6356cec133a8119d81153015483abc900a452b12254e247e09673ae57f2742c6766b2af7fa5a9b121e", "a22f2371682065078bd2dd151ddb6ddee515c806fa4f165ad16a11e1b473dc8b5a96d456295bfa1a2c822497bb291169a55a67a9e6511b4480c76338316ddb7ec2cd178168d337b63207df29a0c74a87d0f17f50847029888797f164f84d8d768fb1e34050d37084d53a8579ff1d5ab6458682f4587243096bf64c425a5a5371e93d0943ae501d06b01a662172e0882264e2637542757291db97aa5b19ff8bd13c2d6b6ce14e257211dd1e89cdb741333ea6cc893321efc9dc4a168a6d49e008e3b1788d0bb42a4abbee79bcf4dcca686f1808c332e2ec63ad37435a1f7ad3d4d31f91230a9275eef16eec92782923da50fe65d6f999dc43226c0e139a1fb1118fb84bce2fef79b579e4c10f3f1a466d1a856f97e1cb83d735d875a72c282d801dcd09203f31e9a1edf83edb86bff11b00a6f5c3703835a9652a47f2bc5d2ef30793c46a05735baa5c921d8eec5f4f12"];
    let expected_proof_no_header = ["8fbce7e8950a7df48de07393fb1be65d6ae1a95425b3bb541e8ea6a4265bd101e6bcbb15de5bbfc10b45a64b78e051ea8e65a36e6c2d44262cceb4bbe6507f842fa6b03b9c57b0ac92d1864a8aeee423c3d362cb8042c60bd59e36e2737f1438804d40d9cf4bb4e0c84850b6bafe0a61644c71880c814a89ac87c9dcc257d3238765d00b4d607a5271d77956aea7437e5d3bc6457401a7a6c58abff6b795d36fa8a03dbe316a1fb230cc7616181698bb44ee427cb2c283e6ba331ea75b967056fff60818930fec9b95014c4ab8f7cf570a30a703583e6dd6df081c0fd9562ef9ee2dc659e912be6337aa05ecc28644884daf20ffedafbb350fc8a579a670724e9126d73b17d97e150aa9943190db09d44b3e21cd4a07db2a40085d375ed6ca1f566dcfe3613a7f637784e705ee5a9f110900862df8fd61caf9ac4ae2917c25acae531b7d51c1e14f681be112186832b47062090f60590d627ef376aad69341d583bb0dd67ee02e397b454711ee89a6b11e245c197876bc220036acdd27f26969cc6824ee92bbd8a5fedfbf96d508769919c743aac113f70aef5ca05c4cf6df1c233b6b6b8782516668c07ccede1bfdb33e60bc6df21b94302b9c479da272c37b78211788aae9c7078df69def6dcebd1673d2ed610f21c6f3925287064ba91c507bf342abf9ce96e084f8ddf2b545493c", "a1243d7e594bf19d3ed6c6d47871dce457f15cd0375f3f2403719f6486b952a8ac865ebf77da592b417816fafbd1695a95f77e5f16fc88494d5fa855f861924d4c6e709778fe46f3e6c02c76426aa06dda078967dc74430cb87715ca32c345f5999f9ad8b57a2974ae5069cafb03ed05e69dfc37baabba97fa1ffdc46181066ed040051cf0899ea7ebaea16b71680b940d94a33f85ea922d73861399ca81f329b87ed2c7e32382ea5e40ff280f1dc2d535647713c2d0993e675897ec6b57d417cfaf11c485cba12a689ce32e617b6f852a7e68a9c5ff51eef7073c07f4d04d34d25d41b3070e6f0a12e0404bc7ce096a3652859bf141b271f0e10f624fd5d69c6cd706212285de841bda3d195ff6c4c15be5d844c50d6d0956ada34492d6a9d44e673c9d56d977d6e6eb22a5e5a247d169967bef0b185d0a85c88dc0bcbc016602e9c596d71d0f1dcfebb4ea18b55e0a6cf1dd5cfce997642d4d3d492c2084a9c570d168e8b25f9649bc9af8e09d91ba293ec66fb188b2de2bcbe2945a72ef85b69dd14f90ec62c9cb57771ae931689e1d96191a65e73d0100f01077ab46559a933e5350a5c004fba02da6f07248809b0c6422186eb6464ba3f14b70db6eb130401bb03c0c68ae34e49e443a409d9de0", "882634a3569ce68bc6ff7fb64c611adf4e92df95ed5c83c44d237df6cb4850bba16394fcfacf6da51fea005b5fc580a5aec8dcdacd61d19639561d40af5ed63d0235c694f13094ee1197d333a842fd64bcc7e42772343498f213a9bf7b5326cbb2989b8f065130700795ca467f79eb56c73eb0621f83287233bcba0db10052538b20b27c95419680449dccbec826cef30550d40fb3557c03897451299172eece7d151f61390dd8fad815499b538d7caf06ffd02c5c3275e8284a6de1709def594a455bd0b35af0fb05fac8940e8d1bbf566ec0e51e1314e0503eed25bd08baf6db45ab8eb2c776c4f5389d254ee7bef54c7609145c4ba43684b3d14f4c9efead594ec74dbcdbd9c01c783848f9840e05274bb2965d23649b6b3233785c9eec38068def475de63f465d1f7ad174416ebd4b557ad616f73634e00be3b9f7fb629d6832b4d9d04b0c4bd7d0d3fdc42c447c4379afedf9f644e7d2aa38275c198de85d80642745b79c7b072f4a979d7227c10a000c6bc27c0caeadd65cdb16ab34932a8eb1dc61f0e843302872d1e082e3b95f8fc063b6c074c85486ed4a0bae49aa55d17a3b62ff53cf3570ea9ecff54172", "953d2f301ccc685301045a07e474fe5977d2e1f01eba4a30a42a53920efefec10cede6c93207890ce4c35aaf96cc9075b6dcd951e57a6017ac6702f5aeaccf5f778e2e42968541ba77a63bca1f2f0fd70f3ec2863ee1543b856fa0f0f554d2e4ac1310fbbaa5eb5f65d134d78810dca90c685cbdb6ee6a195c2a08a1cf76c0d5abeaaa4300ab4cae07147fe996e7c93210fac364d44903aa1c13896c980119d014b8fdc02895809fcd903b43fbfbb4a1707d581789a6feb4ad11b085ccffa0a8a6d5f2cf7c4a2bd9be3154a8b9e74a2c5a4ae5bcec0275a0c8a87f0449b29b33f0ae86fe4ca8b449d05527a0cda99d9138ff0c7a9473e6b13fb620de9d63d3208dc25e2396f21e40edf34f44b9eee81e725c2999683b923a957df54a8dfd9e7ea4b63f0fc2c8f43f54842d86d6894bb21dd77abb119b777a98230b832698472dc6b8bc9b1b63bc0bf226d2a19c8ba57e40b00eec85ff0fceeecf5e4a88434eded005269dabec93db308ca2d4e4b9233963b24a47fc4ba31c0263d4d109b1820b45baa534abb0114fd65a2b96fe5675af", "a3a3240674da26d13229e6730bb38704e05c76a1dd55cc2894bbe2849fb1bd2cba774625d0599d9497e661aa7e0c2b71afb2568736e2582f7e376e9864350c56e475eadf5316074dc9dd493f5ddc7f0a9d01c7e185ed6865592618e03403eb23a83800b9eb33be20c3319e283224a25a76cdd2a31a77c9271f2cfc441d6d3345a04e579405a983d27bfaea27a2b2f4414f328e785f575aa381e02c838d5b5fb8c85b51264f69e17f10f8698bd83fafdb5d6238bd55e33d33eaa494d304de5aa4453f063df95a279ce9106678e42ec4ca31960fee87fc93a40f157abc96e44125f8df4bc83256c15401e8a87b748398296ae3458ebf3975278e143136b3c75f98d3c85f6b4a57a05cb7e57cf20fe2660772ca5d82a31ec093ccaa1def18e6f9966ef2435db97eca187a92505d7b2532531a3d9b92ca37bcdd25d4773eb64971d663ba8ea2098610e33f3afedcd1d1d36f1ea6a1a3c3f58a4d474daad932cb649ac0430097b02c0f363222b074d35051d7", "b619837bc50cca20fd02eca0341f3bfd3fe5552bd270ef56313ec24d97893c911890a5b852abded59054b5b1b71b3fbaa970442a46a5a3e4b6f592b3e04a72f65d624d9dffe1ecbfddf26dcd0a13333c6f6ae50c752d19704e7488d9df985164902f2b5fd73b8564c2019e1402dc69dd545a37c5a216b45db77ffca2d1b2132e14c0f369cf1838d55ad254eea1784251423386c1dea125973401f4e75962e83e1707c7a3f6a8956bea411edf83e5544d2c1fb8241454cdf2f30042566c95ccfcb34c0ad26ce7621b6ecea944a0522311025e0fa9ba4aa7db600eaabfeb99e1a0e1a7bfc5578c4a6078addfee224f5ba319fe8e2eb331f4db7a96ad1ca0feb76e83af58d9df73b507afe4c21c6b32e8ff30df0fde1a47e414e5e0971d18176555c044ef0bfe0b631e10711a4255277326144b8477c497742289eba9be0815b8c2395df256352094bafa357148a24f5985"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert_eq!(
        signature_with_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                &generators,
                &messages
            )
            .unwrap(),
        true
    );

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert_eq!(
            signature_no_header
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof including a header and no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_with_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    Some(TEST_HEADER),
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert_eq!(
            proof_no_header
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    None::<&[u8]>,
                    None,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .unwrap(),
            true
        );

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages,
                        None
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices,
                None
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages,
            None
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages,
                None
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages,
                    None
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
