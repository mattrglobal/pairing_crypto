use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::bls12_381::{
            Message,
            ProofMessage,
            PublicKey,
            SecretKey,
            Signature,
        },
        core::{
            generator::Generators,
            proof::Proof,
            types::{Challenge, FiatShamirProof},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use hashbrown::{HashMap, HashSet};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;

pub(crate) mod test_helper {
    use super::*;
    use hashbrown::HashMap;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &HashSet<usize>,
    ) -> (Vec<ProofMessage>, HashMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: HashMap<usize, Message> = HashMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &HashSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, HashMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            &mut rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        &messages,
    )
    .expect("signing failed");
    assert_eq!(
        signature
            .verify(&key_pair.public_key, header, &generators, &messages)
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
            ["a3cbb15d5879891fd2e0d6d2acee15dfbfc0600d0963a8ef2d5a7e5127f536dbee3479b96983ab372919b00a1a310cc8a5d74278e1e642b692e5fa41f2d741cda81f96157005b502d54d76e13cea0ec1f71a44bf2a8aaf1c188da30a79f7f8b8b54c8022b5f03ee3260569509dd442ba350d6b25d0bb60fa679f5ccd087dace1e367642f12eeaaa05d9071ec78db04bd2ded5e0ebf0bde33be89b621a01869a1fee17e3e3f073ba37ab3d32f4992ba4364137b7b2fc38c116d67ee773f05843fc813f858810833de13af81a2b1cc23321474dd20c26065acffc8fd396a6bc53fb2d3417d2d819fe0f3d9670bd96012e142b525241688c1b09e90b0b55a5483675eb441dba516070ab8fe69db4751e7a818b5555a7d574174fac79f50bfdd55711fe9167bfc7e949aaea8e0088cf64468110d81c44cc331eb26ca2051ec4aee4e4877d3698730278c930218b266122b31547022a41639f47ae7e87fb0e33de596056401b4f3d375be4ffdd1eb42300ba322aa09a46a8d989cc284dc521251e8705264381184d0748b4be0b09504967c2717e6811f73bcd17bdbcb1bce4ec466eb43a1e95794224e9ff9689081f7618db9544fa70d05e6f7bd48c9055915d8fc806a33bde156a2e5f0694e0b18b0cfff4143c2269c214bfe469f309e7267946ea470cf9dede14ec078df1fd3287ec4dfb0", "83ea4819f56c5fc702a1cf901c9f41cd8d1429281aa64d2045d4a6fa346181f75d0f24c3b5d0d8b8f30220357c0fe8049642a659ab56e487cd422655b5b4e6b3dff75f822871566fb637da05bb871f76d874dbccb0fcec7da6146a1258a9c17586e822738bc586e7dc483030e98899219e77935ddaf0526d1403d122352e858be91bdc1346118baf352a4e1759b78cbd4747b1b7f4f139a8d2b094078021c14b47d6adf0643435560050018262d9abbe1f319a0dcac42e998bedec7aae12a4ec71378dc1778d19a2aebb99c52810aee16dc3b5d735b531053558f64a69802ff183fd89261fc6823743949940071e1d852e0891a227e60a5cd003edd0f992b83fa9046fd6ca3950211f73a075017aba8c10ed35026ed2ee25b8d9eef5d05a12ae80f91372ac4bd3fe31584318131b289a1f5845782ce9ec71cc9077796602f42e1a5ba20929898e98ff422f1c56f5f6d45e3160fc5bd6d3963b91c7c344d680cfcee472f5dbdc810aa48fc04609ff30c062a8fa953a13cf58b2f673437ebde5c6dab49142552b65a037285ccfc5f7669b3167cbc8efd20f356a3ecf36d16062e17be5e5692e50cbaa1876e9e2890620ae0733a9792ad72d9ca70d7c227d49f40a652ed1371f4aeab0625f1b6b789dc6af", "b2489a5c89b0aa4903ba4d4a7e8e9ed8e17727688bc67b576f6a2a9298dbe071620458c05fb6083a028995dd273ce7aeaddac96ff97fb84c75825b9ab5a0832d9ff59de569c0b765a39b3feb05bb59585e4bea3596d22b16c5bef886d04b64ad8e484399e63479d7f6e6585f67cd0b1c4d0f01e6b1c072a62bceea20b80ec3538c57cf3ad05487c341929ab56b4294666a250ee6ac2d9d153e357bda1005271236aac81f7fa3e04745cc370babb7dba238b47152b07801482ce8cddf1ac9b0aa1ed56baa561c2d881bf1bfc3a787b4880448d93b85eb4dce5efadde06388b4dac54ef46cd027568af123a732b9e370ec63d1697aa3607d3190616105e8197ca313a41ea30efb12f7de9b1cb40bb8aa1949df36407952c32dcb62862d32ea3b386e5e058d6b1b535fdae7c163126b5975192942d5529aad2b759c93de75caa46f08b45510be61cc41ecb03ad811a96fab0a60a402a62dae7f0eb1372e9df3a36e63c1df99b50ff57c5a22ad06afb6aade17b306f56d1269075ddcf7e9b1c0ccf51ddfb4d338227428afbcdb72f505bcc90c0555c9bbb18a3c14ce9b0f789e2c09b80fecdcd4046cda7d97141d88b03af7", "986f3c4eea5ec4fe04764185ef47f48744c02c35e3f5140ecfd7230cfbea1cd08c0ca9ae7d0b7447008c453f3aba806494afce10a3d52cb6eb99437313899d279e2f86b5dea5d4191ca8dbc487ccff12aeba04ccf0730164a180261ed029788baa61eb6ddc2d7de515bd1f725a3ec3f6055c025405af953fe73d130335c88bb8c5143894d668a30d4d9c520726503b8007e52095364fd45907b2f109d8927f97ddccfa35953f4541a6bf42f24a4ccb9c0da2785e1bdde12b06ba4807a560990ffac946feb022f069d44f5e746e14ef4c00e39cde80e476b54ff2a069b65b54879ca74d3805d55127c52fd8342e9067fb258ec71f716b52f4fd99870a2d1d228433346a0977331b4d2189cbf552a2330f0d4a946d2c16f366bd6ce36c5ea9936a4a68111cd9eaca0059331c3d391b9565181f2e8d5512967900d1da6c0c78ac13f60c0f1a8c7d63d5b2472ccdee0d0f294747be5e7dac70666644cabbed93e6dd68940a4b8fc749cb6b2b07fa36a6353e080b696e1b3b9d6c81b07c59a4e37a5e976bb38dd1cc584753f8397d5c899327", "992447983ee860eb35b8b9bd700cad3bc43930bc74fe896c70d2ed9df088da641d1011a183035807d3e31ff0261d027e8fbeb25f2bc7eb8de18493fc18fd6e4ed2e54cdeee2fb5490d31e7978afc40d7d2cdbc9baeb802884698239e16ab83b9960b16d90154271364579c79325ef09356f3d396ea6efb81981da286dde711228a257db72ce7a9f005bb904de7303ce4276f307e4c2aba0e96613933c9206a57b71244f2fbff87994ef42994b7c7cc2525133d4e31d1ea118467a82f2077804e143d1da0d5f458eac35d9dac47afe4c26f453430c565f900da85f2f93286629b295f3a71651b322d2eb6581e9688346c692fbf3282e0ca3278d96dcba62230ddde3de1694c23d8be5aa81f09e52bd2ae006ce55b57fd3ca7e176155a6b980298ff01247770d37e99c0a5cb20310777981b08bdbb084181e3ae329c233e5d0027c78c439d29256fd30948b455dc295db64b9eeaed5fc6a94bae4b2e0237adb2951a6678f10237864e9215e15ff2c3ade1", "8ffbca0d5cdd0dd2f80d3107070a7e91a329ca2a01fe950db2dd335aa6a819d2c0c89c19e336000055a4663895e1ebeb849790ae3affd3926c0ef6a5ffe6fb7ff44904ef885ec1df0cf776f848ab19c81749d113a0b1d98697a67f4a781342f7a7d7367eb35fe743d21f8137b0ff7e7a30e759bdd2a0461abf7b243c62d09e3916bbcb6ba3467c8d1a6e2e3da1a1d86e60298ac372787dbf6e6a4e0753b4236ed9464ce4f3d5214d7ff6104cbe125ec8110a0a0f7da09cf5718b6bc52c7e0547cc20aeb12ecdead1f85a33930b00c1475aad5456c55b54749f52b9b2bf401d194a9880fba4279f09431c1e3b16bc4030172059c1148d34d71826c2489c17a5a42be5331b933616b8d8cfaa7629e9f086709ffd6f1972ee12c7d59bb0e18e0a0a828024db156685a25ce5565349d2578019960cbad871a31adaf5fed7b8efbc13d957109c7712f4cf562de10d13006d18"],
            ["a4106daa3d766c0c7b7dc7bf6dbd572c1d628fca301d309413e61e1a8fc92f3fbc154d77bb50da1b4c83b86e162c0c1497af233ae4e124391118539b83b959239de6058579951ea0d6ced935c56ab77fbf9d7020ef8c0acc22fe65f6046ee10096d5865e5f328ff67e1842cb58d16126ac8a9809bf8d08b04510080db3897c38ed9dfcf8247297482b7984edce9a27a8160a70961731d0c2dd28d6494d37bc2c8a3aecf81bdc24668b945c6b8bbc172159d4e37885fc48f94df7f20bb6869b1982d0cf4625b5287e75d5b9c21c90d76d706ec3f4724a11f34e64d3147a02b6f49573702b34bf662a79b920b13daf24a8510191be63f1ec234722a00e7ee62ee1dac9dabaf0567b973c3c9b93fbc7f1fe56307fd86359a2811a3a0e3e4c6614974f70d2155d8e06f2ea5f9e0faebf4b9a0554cf0d4352f0c995c2d6eddd1022a99c200cc6693612614ee11183c6cff3204056c263feb21dc36ab4b4cce0df662b188b86c4abfb38bc63e2ef3a2743803e0652a81c0bfdbfa57f903fd3f35ee3db8f12ed70e625a2349c91f8347314c53b54af9c9231ae17955e646453474ad5202a16b3a683664a28062ac7f78126d3ff31b749c2bba36b2a860ba45cd46c41c1b641803ea30e68b43a3a462ba5218df3148257115a04adcf25463d95462449960770d25dd50a480b0b623ce0025f466f", "a29e72cde0bac32041231120e9443180d1742563b3764017cd503f75ca17e7963334556735a376702c9a2757993ef9aca65fa5518e4898769a404f42a962f9bdf816384f28d5c1ea0b48d6750de457288dad0fa56e899a0da61dcaa260c7f2a28f3ad2c990f0d1097653bf907ad35a4e19c2d6d4dcc46a84e278f277f71d71c4f777840c6eccfece1cd162817c3672e45da3864b276051fd92e6fddf769214034c44cebe749bf3d3113b2ca15a146b990a81b0aac50fda579881241b1999812526a10bdcf0acac4a04c95150a7b319922a68ee1a6b8b88a45d15ba8c47eb905867da1539527fcbeced5215bf0e9a4fab4b8a7c04f34c5c984c9c138d55b141cc861019569d5f5fc2e22c2f92dc9693451bb0b60ed38ab6172d5d7a5eae46f0768e01a52107aa10492649cb0e3c25c8094ebb8dad575b35bdd2ce4654b99af8c7e48e4f8bf39c452b8fdc2f22fd8bffe75e54b5ceb589ccb9a4575a16b4f102441746bfc0a99939364b5f60396e9cfe5b5f3f1d5b0a8a4253f9b355371d931d2086c731d2e863b014e649ddedef5e6c98310d1a547a19a3716531d4e529b06c6b6819fbd1eba274cf8398a3c7bf70886712857ce63f45f31203e4dd08b8944e789f972e2b55074f11fe1b30acae49596b", "8270c7897ed3e9558b50a996132fc9a2321d798013f0af4900c0547383962f2862db674c05736a584287a5c46c92111db53057e142d3a28ee85dd75f89c23ab23f0251a3f572102b7443e28d9df681bc7779d2021c9113abdba3c547011f5354b7970e0c11b01cb129115c18649c50a9c3021312b65d993258c72fc44bd73e376076e680ada11ed2104a41c442b4272269a751c0de335f640a0ef4450f2b5156ea1f12c5a41ba3aa95ef7221ab18555d52325c33efc054e054f90a6a06fa23cfc21f3da2de24cc26aea50ca6358080f9431af1c9b27dcd285424c0ed90b2ccf4bb64586dddefaff918ea80734ed3ad054f4cc1998f92f32ef423c51566ce70f8550c051e02816b804365f38159e0d13158b0b8d779ee1244d5e939e4ca247d52a0674d12c042baab1524e6340beaf6132b6956dedef20ef513896b8954a2c08a3e65c2aa06e5f12f003ab23797c80b07722b53a34be6a08779f6058e42880b4f6bf2d21b9c549563fed7d542cad8898a73825ef5405d7a4b0bc9a6e2384fdbc8e8b26be74be99d3cd4a6fb7430977b6570f6ec6e06e8b7f9cb18c8ef961dd4b7fac0b1b28f415b11ec1802d7921d3ec4", "a4057876f2760a1fd342030d2d69763aac7f4b15eb0613ceb7255f7144fbe52b888886afe0c27a193f22340ef881f82794d959d9a9cca414611d029d6a43ab165b6a14f500704202f977d3610b3d6d09f5ebcca4a972ae53587fbecd615c48ebabf8db17084e7bf471bb1552687d29cc74be53491f471caf132e93395b6ef67ab02882acce1dac262fd0bc4270384d293d966b840c4d26660989554d7e9e26863f1d57ff0f74983f80b847bc7f91460a285d1ebab8a78c8b59058411e20b5e1fe14ea198e092c7d5bf31d9cd26bad0c246b1ae8fa058d5a2eb24bb5c507442860a3e181c485eef5fc4930c54a3f4469f4b791ea93a1dfbcfb056740453dbb8ea5533a4be1f5913b8f7154133dd51e27e2a76b42a5c66f9899bd0cd27eec6309c36b0307f9afddc64ed93684fae56b9dc67a503d20916d621160b1ffa9161e8c8f9a532d8fd9aed2b30849800cc17b4174c87445d7883a8cc6b056bd882d24f448997492a10e52672c2a92b945e23b15e60901e2e17da2a3921bae7463f2684f24c459366fa71345254e2472d4774ac6f", "8e80d591b2ef02594d2e3c1e42577da662a9ffb0014b8089a5086d4714f8e791add84cecfc795c5aa3cd747947f7987aa4a55b37b6ecf626447573f56ee265a6a8a78985dc1165915c4d770c3a720c79ebab7cab985224299cb4e3c9aa15feb0ac59bdc0e9c7c6ec82655e0e7cdc0146c801260bd73016c9c908b6235ccf186396339d8a829f6ade872b569ad8e3e375158beb90b580d89c70874f4c7f08bcf21c243694459052087b3aaffce239535b69808c879ca275194ee475b1edf64dea423e9bbe31b18c6c5c2af7896e0b8be3546825622418acb2dc760abd9ec588ad2aeaaeba0611676ea6b61584f65e172f51e568dddc9afe2f924cb65e445ff16653c4bb932e289997a8715648e7e3dac711fc5a0d4e3ffee26d0bee81b495a3aff3d14d4b30636b4ee6daf4815dbcb3dd4464ba37a431501395934615b13d0f74232a7ae283be1e2f93e44c218a4c40ca4cea4ed2ab1ecdf7d33a44c57c8a13c95c1c6d61939b14b32b4547603ae75938", "840dc9909a62036fcb9984f97ed66d619b2fadb184fbe6fbdaafe8d3e3e427af023e9c5962392f32c583eb1179359166a0be91043e40611c738279b522893a286390a391fc0a7895d6cfe3c9dea633df3946411300ea225fc054c6ffe589408eaf759c06a203462e7d50ad349738331c045b7cc798f0db0e4561684d622911ef996829c2777f63cb75eb8f1732acc7e7504e83fad501f937bc74d4eb5fec0cdf29f40a0c5998e985db3e619b1ca8b5f171fe3d1232b5a5c64c2d79779375b2187d488ab00349ea6dd88ecd98ccc84e030958c186cf6db4bcf8e0df43572d10f487434b99707057867f6944b29b767eb25f724a01eb1109d6ab86ff7941dc91611e6bb2b6683c44d1fe931303abefb57344a63f6c26e0587481ce683d4d1e50a545051854365e88506d8c9d52b67621e2418a77ede2f3a487768497f6fb4771dee9b6ff4632f7597068d57fb77f9b8cc7"],
            ["a92a9d55cdbff789314b914ec547ae03907d173d5c708d9ce2e98d313b235be42e0ebe5e085d6234e6822e5ef7003dbab0a36728d8a298d8de6bf5daecb554212d15172832f0db2e04231204e313807e790da1ae2b85bc13705f840d3b59cc138ff7432081c2d0f604a99fd45e6d49385bbafd610afa3a3ac2fd64f86666426a4ecff86a3be138a6cf59235582e4bbb46541aa824e7a286268134ec30933cc81a370febd287ab9b1af68a0be57b6259e118979011e39fdc8f1f1214e87c4fba9ab17d06568ad58e81bf37734cacde9755d37e9b1d514bab29cf2ae6df674a7dd0b45b48321d129a74381cc63a1cce8ed51a9b49f9dbbabf16d14fc5798731775d2439bdca0d52be4694ce405ed2e507b27cea511071ff81a93056875e3462e2a021c2fbf200eaf53ed583d601ac8284820d0b6f38cd62d7fa8d99c04b6104bdcc4487b6e1ff01343334d00e71a7a95096fec52b2ba8c782aee61e96a98457b36408e98c42ed6170d8feabf0d1b6ca69c435c1035eed5318e2fbfc05d3a66372a2bde67e6323622ae7a9d6dd93963fb785ce9bb71fa58baac2f17ef62b188de56205da4594855dc5729184e26c92b7f253160a06bef24fbf922d9bede30dd82c19a72c55e19fbf0c4503e7292061abc0e53bda322b403a381d36057658b62de66e209c3d5b19da245412157a36e89a806", "99548fdfb0ddc5dc756df4e6e7a4971084498e901b7901f27cf765d1f829258a3892e8026483293f2159371e1b38867fa9d07434dab09802fec993524b9de2aa754118df5b67c256a730e476b2b5ddafc472dcc669ebcec042129a19009cc3678668483b624b01cec310bcc43fdcfee384ce1ba5513c6249f0099bdafd27f9e7f7d25c7896ec683dc11b09445646db0b1a61e1339ec29469ffa9998227adfae39fde081df690fe2b22ab4af17353e2323f13d1ea1e473b784e35c7c19764d238e12eac7fa57e101aa30e61fe342149dc56792f4ec05ff70b7bcd2ef4954ac5835edad42f0b92f20d8257fdd18b540dd23374d9b88ae4abd9a16d2160a9f097082e9671e9fbf868d6d766fd06862421db4240ab5dd3b09bcfe930fb93d9e2174179febe60323abc1c1f68f9d919bc7f24719997a126b38c1a8dd0599fe3e89dfb03f4f5ca09343c8ee999395ded4588482071fb15064cc8327b43170f8635729c79ed90cabae251922a8bb3bd9a631b24685afdcd20e3691c06e6d3aa457e24a0ad7808acfefdda34a884ac3b52ed04476cf133c38af8544a7ce729fa650e194ffcc47b478ba078c38a92ab8fa8b1da3b515babe8f1c489180c900646836ef09dad2ddf50f2ef16fb4623e81de637e2fd", "a4c53d93930c45c846a54e91a3c2cfdcd0ae1a28cc359fd540578c3767a99cb079c71ff41362f5bd3ba6380987b881b6b1a66b4cb3593550b70410db228441ad87ee7f4f3139950079481c6c358286f5be3318acbfc70d4f0a3512ee5baf373da3dfba85061449806cf5c03d0f553abc8cead503aa620a61f13ae0e9a98593d4970fcd29baab23711e15337689c98c30038f09af87a33284684eb8190dba31183e63e24b4b07db6560dda6f89d699ca65aac824aebe7b1ba7308477e01c85e9a61e866b9edf7a50898e43f2ffa3c5c19620522c4ea074d12bc09252719db85fbd6bc03e16104d73b1aafca7a41cb391c0a20f62a45d4d35af195711743452d5a9c0d061c440bef429ae129839d2fdefe2f0d6c2bb78efb6587a4b988f2a50842f936b4aa160265189fcb45118210170036f90e74f940a34f5665c303455e7621f53ef7ba359157107d5073f0847da08d624ac71f510a3a1d322ab81b0a0f60617ee927b9ca2a1dfe15ca44e5820534cc27e6ceaf69d8b71c534d9daafb09fc24096a8270f578cf0d7cfbca57e35f66763c8a3dc6eacb2c5605687460b8c2ad631cceaaac7cdb4010a724b593315f4ad4", "83d0e1972ef402671d2414f2e45f5494c0289ceec185ec34bb45608665c3081c1e09e76d1c41e7804469f19aecc0939c81324b947e2aa0a5efad4264ee3728f5b2bdbbb875497a9c3ac68eb218cc93465b86e75a962bf9c3ceecfa688389b8b3b0de8eed700d1f42db8c4999452c9216cdd0c7800783e884e6409560540251682ca03878b5bedead3505241d9ff76cd53448e0dfbd5e1769939567bd8f10ecec46338dce5ae889d32b2d564ff5c980b21811f8193a1001bba6961fdc846ed0903487f36b0e1dbd705f7866afd412ff6f38a43f4ea81769c9035a451d25fadba937354f609787c62091f24db352633d1f5710f4eb7d5482a35e9d1196848424f26cd753ea30fdb702c4fc749d876a1a695b4ec0c85205d9b910353b213f9656ebcd538a5dc2cdca70490b7e4473a8bd9068ff7db4763039c8b6dc8b2a1f387d731dd02af53d2d4c5199d66b0e243e21de3b11952f350253087e9fb37b0fa0ed30f20fde5a7fda025580866c57b7e2878308a7f0133554a3eb0e08ea01b4773ce2add0fb95e6748994faa1ccae5e05b8c8", "9015145c3c629ab09e71c7f3916f62d4408d5377ddbfbb7884780a7823c8029f245d9cf48067c71ce5658325095613b4afc3bf2861c4a649c200984110ec3d9ded7f992d8cab2242458ada7a06603d66573afd204e3d5f84534f0d9c9280655db9197159191cb91d58e204d5d57739eb95e38c20cb7595380eb0a028e4700d91b0a83f384b9160c82f265e0119763bbe02072019e07d67dcb38000253eff94f73bbb38dce781187a2785c0a39b27f2f6357ea312ec3d4efbf2ed4e8cece42af58c8791b9e42167c57eaadc5a1c3da68920203829bcff5b8d2ed7c5522d5427368047377067fad0289c5f654b5a22816c28f33a8a81cc9cf24d81d9734c6348adf1f49d8fc85c5a5169b9bdbb56183a113ee78fa7a0d325e2bcd9d060c62fc317338e8a45ccc2b34fee7e8ca7ae82df6b593a59cd233ab3041d3a691d6fcab109f417d822cece4ec447ed8b94b5f63c2346838760ce1b253dd3ab160dcb584ac1c9a8e2ec5544e188d9bedb573c12b5d2", "a5648c5fb9ab295ca3fa81754c104f68c77ea2c09cf12453b34ff4881504f2256b8a303e38196c4477137ba3968146b6a3ac634b1262b73c58cbe911fec28c9c2b1b68ac9fecfb22c083c0b922b1dc44bdd353cbb9ddaffc6fc1153bfabd81b8a55ee84660a21aca1d8303fabd0a508af26ba74aa8113aa7d7831b3ef1fd0486153f1114879ab43feec47c08790a90fc617bbc86fdfffd7a56c03e6b079102b4b380b15cdf03ead380ede136fae985cd657edc247a37718e4ffb83708d8ae7da6919350eec4cdad11c389f63832739d662b48414bbc93297d8b5b7b9afc2c71786dfaf160fa9ba386eb4b5e0d367657c3f90df3f8fefa11208ba93a431037fc3d6664dfa74015e8d67b65c5cfe36a7b064a3aa95c607d24fd088bc8d0a4a854b372be40573d752df8052380f1533df93694d8dda2a059c58f1939fcfd0bb056824f2c872b63a5962f5cd90bd00a81c16"],
            ["9506238d5b039129f431bd32a59cc44d31592933aa5d33590c00c7712ad8a05616ee69d8ac2be11dc3c37f17835977918f0043400b9f613982fe246e309b1c8bc46d711508dc70d8bbdc0a37f855580c0862d58d555407a2041980f255328e11ad92ad2c1beb0a4d762f10e3b79c13dea38b6533b71873a769f5daf2b05a2c92b4504b22a3e5980a5ee9d832a9b5ccf53e1358f20b38a25bf25c09bc5346627c8285aaa5889d49d3d33148b665a41e8351b8d005ca4d1186ba9c2d05fdd956497b4c14a7683b84b8f1427fb9e29aa40d2561bf1e2471daf9d9ff47f0559edf995b9d154a9e677544c544e483507bef4110426880ad97dc1d35aae70fd018ff1e1a96a5fef02f5a5ad3f535c849dcdcf1451e28c7f19253c0fec38d354bd8f5bd324354d3073f8e0d6c33f286bf26e9891790ff36bab594796062a8856737c8f2295b80ad147885a45db48e8b8f4e7d82003f515f9aa0ad2ee5b1af7306f488082041141a38b7192d9123af56bd6a0dbd22a877899866ff0a5ce0d02043ed2d14ce7829d22edb0952a60f30ec4eae9504731d579534fb1b0a40275ba001b6e90a39bdac27d4a7d3958fc1e5f97c34ab94275531e6299455f33d21e2dc451f2f0076dee64a564d92cd3acc6584d3a7a17950aa8db9b749e16408a6b0f53c45fe1aa7cfb88675e3915d9d61c1782a3925b1", "88cf3d04065ce71be9aeb6471662ea57507e65537a27bda9e49d6ee671199776b0dfdb96da3473d6a867530b8736f090833d1ac7cd4222ec2e8f8c294bb3f4025e8a8b21da04900dfe10d8d72f2606c311574f22adfea7cf25e3e96b36e4131488ef88d25fbae38b8a395f6a6b230383ff85a613497c6e2a75aab3575e35b73bde48de55770df35fd7ed43abd085b1e2545e24d4cafe66612fe3eb47e8ebb66327b2beaf87561347967dae8b18437bfd07783154278e84079867d4461b79b6708e37e9be1abbb237590ac4f05652912f02d41166b5d31f813fa678323e249a312b1084ee185cf121df9b395301c4f263085f4ce6d5d2f1dca9bdfa37910d74b23ba3e6b9497af6b58dbb584341e9841d4fcd80b46dfc09036616573c1acd3346a1c2e7e6b66f52fa7c7f994e171949f967197d7e9fece9ba1ec2aba3808ce3acb33570894bfbf30b78e891b5b05536e63e3fb2060ca5006e447fb79a6156050f4abdd21d1e53af82fd8c7f162e8919004d87db02194b2d9e0c944469e5361319013d5ab358fde7a7467d384158b2a3a61f431bc437dece727433a5561acb53af630cf73d9fa80171fb89846234fb9eeb367c06f09c2bc75b6da4e1c9e27c510e2cfc6def8210c73b994f988302b458cf", "92712c5c0d2362625e289f8105f195037c58c543c9eff9893f43cbe275b4657a66d152906d83f80cde96e33b95cf7aff983dd4eaa4b6c5c853dc4666d202a878b8ec62d267d73b868ffb43945a8c36fbd4f010d727cb7b0534709ca3b744945593d8ffea022b301d2398199ff668968cbbc316a12506f48f12c25ab662af979997a57bc445c867134b4b893b13971efa6fa62c19f7995800ba73efb30daca6135a9ff0082075f825af892441c27f482422d24fa3d4cb65e294a0072e6063a6e0af1376f7f41cac8d6fda1b047e7bcb9915ca4be89f45c1a46e99d72b27eb6bb4228ce7b9cdc3e7d8b91e97fc7a4712470eb981478fbad75a3558ca4c0c4b1c3e06c8153606cc263e9bbace73493c82950a3a1f2f3466b0843f509f63044d308425e3e9b209a050327f0379d2b9a68cf6160ba605f938fa4260e7c707013deac27e590448f5deafdb802b7e5f023e97c744361830990596a3baa06a86c74a10bf40e026afa9954943a41bb2617d1c1248708defb442dcb34d2acb700b2a2c61afe48d7b95c5877e9b10f7f130494377106fde7ecf196c12de6d5262a0c851596fa2f2d2c5859a9f28a1db1527ad5da0fe", "908fd024aa62d4f7fd8cbeb8a1379e5fcdbaa957c6a68bb6a35da5cef6911ee6f0ac30a03e600dfb84f75d8a881dbf55a6496ffc6be90486c5fcdb3c3754bd143ee4bc2dabd40afa4f4c9fe0fd33301767da1b0f4ec7866a2ff782baf0f0166786f1e73080503b858376bf88ecba35cc9bfc2bd8cae80bad4fde41659322a70b010e8cf8fbce1d117429660dc228a4d3469ee243c29aeb850221a483c79ab31bade1ca9ab4e2bc28f0fe7bfdfde458bc543ff4634e5ff00bc0bbdf807397ce6aa1f6d1ff295c32d358215851a4d4f7a5109e3906a1d2b00088687ed031adb0cbcf036248197c4afbf260361e70ce75b41b610666852b94affff853d1a0ae2eb636c99c63eeed00173f949619061ed8bc5cce4abfd8770c5231eb99fc1c40bbd59552a49f16e26c7217d4cfe722cf976b18a3b5077ba964323f82e1d1e787ab494c5e1a823bf5a39ef00b4e72edca389b057d7649d6e717a53226a7389bfd32cd50996b319c9c8e5f9051da17cbeeb24621f7a3d5c9e69487e5a8769daae7c77ce798e4e90da4a882d573633acc704cb1", "888ec27f52574dc62728628bdc719d5109fcfcb8e0951e46b6197157b2c9d2cd4731315a3d32a17ee58378f1736a06aead6db1c4620458cb8d974de0dee9efaf5f29e213e2e92a4cc5136cc8571581ae591ef64a0517f687383fdae1d4fa7b1081d7e0ee49ad90ce23d48d3d71c3189d7eb48835f18183355bc27ca90ac8cbda5e97dd49444ac7d56cc8eccbdeb134411f14fd6817851e567ebbeab40dbc3c713e429368970f5959a29ce92cee1253a146f34362910dca42c6923d2c40c2f7ed9dcd70ddcde73625da75a251f13817822fd43f4664cf69723e676bc59ef190b4461c40a435e5d12d6cfa87b72f7ff80e6c8c1d2ef097880b1a6307644731ea149170002bce63673e6cfdb7b5e02154366109ebcae1928ffb7f40efba4696ed4087a52e91796aebef0a9b16bcfd19f5f2523650ebec68fc460c89298622f94e8f071b967e9d221610d179df8b36ab43b1233c3d5e69786945bfb58554c588a732a4e43b7e54baead893bae08bd69439b6", "8fc5e842b98d349222fbac8f4e8dda4099ebe9a8938f38917052f06700b5d7e6f025fa6e42449b41970fff96335a617790632d16e6cfd48c2490052cbace9dacd3aa2347f0e221085c86bde8d710f9fa37d2f7bd48f0bbb4fc49ea611ee9ce27b7b5f8c8f07008a354e9452099cf12b6d5abe0edbee1fe782404e518f2f9d2de602a44be19b0c6d02995be17895d80360c108efa82503c044685601bfcfd481dd8dfeaa75233e0f7f101836365f05f4138a96d11c3453a1683acf37f137d169b029149e5045c2bad89d20593308f7cb562e9428fcc4a1c26793a1553268454d50d5f659ff3da2b32765d06b67feab3bb6928883cc6cc511f36dad31c8ae75dbb212e24737466361b536cef830d0006a23f773f4c12f3ab069f2270f97b0842fea07ecd8736e9b4f09219da754526fa4c115d878da739a1e1e8c63d0824242a21dfca9a8dfa557502a32767768a4e7c0c"],
            ["92f9851f35df15f5793ec9eeaad5f490a33177a08b2d574c2182cd704afe6d602b554109acf9d2d609b7efd90ecdf4dbaaafd9210def117ccfe1f2e47141740efab4fefcac322a4229f4e3c66138f5eff454fcb188506e621e7ac94e1d344158a9d19f203c603a8c2601b8d7afb51cfc9a1d70c4ba3c1ca48321b819243ac001592d06f5f260e4a88eb7d2cffea7ab5c72c6fccb4d16a15725ea0a76b6f4db3dc8fea7c934fa1b78496da0d13fec5d25736ed4bf1df8f41ddf105a9cdb75a52ee9e6cf36e0624b6ebc5ad6b55d59415a41962453f6b8b09a7a262324bee5be5a5e828a6f1162ae3fccda0d8558341bd449383ca087170ed01029d98ceaa7abcbd5bc82ed1785b58b77221ecc53a824c46c00d4130d704f11b91321287ff5c56436544a5ebdad11c5a35cca754a7544a6365191005ce4a9efc3b0a2e80a68f7fc4d9ef409ef219d611d6e13ec7b8b7ea2660c5c5009a275def7c308e9cd23d481791978e23592b980944460f355337473619665af4addf2400821e02092ee231edc4df23be7573b85e79f7737f2d44bda1f505e15a88a22989b93526e665d0298fdc3fcc92dadc09f98d985ad06a840c53f72b96aa5e0f41af73f14c4e3e28f5ff78b9025a34a629be3dada49b46e0f9466946eb5eef6579e27edbe15bcaac475d3cd688359f1393d056bec92274f2af7", "8b75907f4ec68a2f0535a593521d772355e9e70e02a398a41a13223d7125dae73aa46412aaae43fa05b32bad66cd03fb88eaeee38872bc963b1c74d91dec5d0f00ab6e133c7bdf0627cf52932b977c95326b365c74c738dca0da7e09b24403c9ad446c8184d8592eaf2b4df6ff07bb634de78af341a3d81269a0b4f23895af5db0af77d2da5c90de881081d905d363f54ab34a247724875ed8667e3d258d12621555f52ddb95a64c3b502fae3aa156eb4b8503896ab8317ca76fbe16005d65734379977fa162bbfa64dbc3f5136df9925a8ebd95aceb4f416062cf7e4c8f90752b8c0b5cb7f6fb216569bb27647bf13b1f3425a31508e2ebf738a97fe6d7dd0f2e6e73f20bbda49b130e81e1eb2c7ee62c0680af31bd6744f39ff43d5da5d80838699440a8c6d07a4426e257b2f9110b1c86499c96682ebfc85a996a1c87319901eb8e52be3ee62ee0af90496cbecc86055597856de6c83dd94b69456f3cf7e8a393add501046caefd1a7e432cc594751c6554e62043363b158c0cc373a62f040f5c860f993f77f057c094feff17a7756a963045db975da7f60ca8dfa597d14964626ecd73f96c7a971de6dfb579b22a45b501b687b15a093260981830d6ca84b07e84bfbb9578138cb40ca6209e3edd", "8a57d9671f59202ad277785b87a63704152a9b7ac7526db09551aeeda90fa9555504d28a744889d650f15c75c55825f88a27ad00ef41e1bd4a8f33c7e8a82de86322abb7f9c8e02eff5af6215398e633270a5e003a22b80be80eb857bc5f8e05978ad36c1d3fb7955230674168d957c37ef43ce72eaee31f7874b9f0d28013ba68fe5faed8fe72736ade587dc61a455d41a790d761f62018be34e5762a56715fd699d13aee01df169f5e217d673106bf526ac6dcc5e73edbd1c506817509e9ab5f0e979461cc0da2cbc6ca62986332f2335e054303a1f7b44e0a890af53853db564ff9af600436e93b69412b1ca2518f29cfd0d226789a7cfb4652e112fba87111915edc1d434bb37c098a72a6ee7e4c257b91aaed2fb41ad71a5e975abbb6b8e1e49e1d94725cec3bea898f30805a1101015c10cd0e9cbef4a6940e23e4711dcf382821bf56df5e7f4631b5e5dd7119383f3560c9c0fc5841c700caca206b2c54b72b7690ee2f086df4986184086dcd5802189eb2b757a496525e0b44078e643a2628de7398fa6b6879deb2e8a6e537030327e33ca5ae9637a8fc3d2770e39cc4f35ed09f37e4e9fa978d9ffe0f56eb", "893613f69f72268e8423294e1c6566168459da82cbd8f0f4858270cf46bac408748d7b33af2a0605d0e6b38faba3342896b7aa673814bb3aea9771780763e64be373ece6bc2917800364cb4ceadff8bc27c049c2b0ad0aafc28269277b5e7dfd8f6f64f817d7f054a9771fabece2dda799bf27816c73362a5bac7581a2c46a8cbf55acfb7871043979b6070231f2da62492c540c29a16fa97cffe4b39c41f5997c3db1b792a2b5fc996e9dc5207dc584579543bc67d56d1bb5c2c8361fa20f2bc51b5d58e207d3fdf0be096a7d2c2f631677326403699a63718ea31f8b6a21ff2e2c0e57a86aaff6c6444bbba58e4ab621a9687b343817902992f24176ac4caebb768e9e73223fd2bd6c4088400add711e8f06f1d68838ba5bcb81eec922157630348aeefc0b671c8181c6aee72cc4a008effa0343f5ebbc71300ad57fdb61712ab7acb3ee0569a3f374418017aaf281159e05b478a6d7afd71077b1f6980ba17cea0f5004b3afc01187f3e9300b49232ab1390e6c889da59fe0ceae870405d7ea0b43fdce88568c2924cfd4a3d1e515", "8cc4e3e8c9867419c023f8a866c947c370fd0f9a3d6fd21f4f54af0388047616df6e058a04a6ffb982a4559943300824a7d4c4f3b5821a3a5324fe8c937e8e48d6c900cbc9e578955fc34eb65b406df525be8cbb5691c8edd8ea4eb707a4de309353dafc5c44e53db094568811bfaaa4e344e9dbe3e945141075512b2dc3a42c1143b545ea1aeb99935af801bc9196ab7282ba9ffa3917edce3cd84ea8e48995b0240c41a7d74bdf06b38d8c3d8c36fe719fd1ccaab56de189948733dea96295261bc93a29d78f2bb37055e327ebeba153affdd903367a68c8c91da7410c2364ceb922954b7efe5e20d9e1f6df6df93116b1faf45a99e6be9677903e4fa57ebfb7d0c1e3ad2e666aa571ea466e53fd7f6ad269c5506ecd71c26f5e2f043fdcc90676a71c8460fef2625a273b9d8cc6a1606a5ead7c273407e93de831209b674071a762f337391ae625a0d229bf7df0940442c14c506ca3f3cc255df7ee106c7facfd31e9141891a8affba1d8a11d30dd", "b1a898683ef36314401a5fa7264e0cd3e044a658a8ff0ad732b4b8333c415a6ccbfd013110ef9a5e71cbc5edb03f3ece99c366250b6b084127e4ebf2376851346cd6694ed3234509c11fa6710d5a0b989a9494e24bc6349fa9a1f25e1cd0830cac3f5f60b8f57c786a2b1de8a7d6edfaabc230ea62b7ac1ba18c6cb23cacb124ed53d932ef53dbe9e00122c64e4e137e23ac515188ef0aaaeb5ee3336e38a26a488d3fb1ba4dc928500808eb03612cc94b2011f9567961d88154ca159579d0666414a7af9f7ad8f85cca06ae5182d2f9499faea86d9b945636874a1d694e4eb3bf3e7ff5029d824d096f429ab3acf40c32108e45098ed56d212e0498ee3c2cda338c9a0417f4d89140eb4e223a391aa50e6a35cd26a74f9bcf97f1f5f3887eaac9691aa5d8665903191c04a20377e84a4aee7c96be8614acd91df13108ec3fac292bdb3d34ef96e2d200a20268f8cf85"],
            ["90865fd1c82d54924720b2c17ddaf02e730898efb14f7dcc25057bd4257983516e6b7c9cdc2ae41dc82b3d08cff4e1ee803ea46a2ef1d3f619c55654ba7d3f91bcff53ddd070218e02ea4540faf92db1a78808c8f347371a382a6472e8c3b1c9a77a5c29adaf6d0444a58de73f8e67d36611c85f948fa352a2a0bec0164ba0aea88e111086bb9a7034eccd788669b39b3b8a1e61fdcd46650c93b517f250f25c0d723ed43e87e9c75393dda249fcd11d02cfafae1f0b504bcc6d0a296d9ed44331a17f87ded953429a41db51a3d40ad0530a54097ee3221503fbf220fe89ae6b09db8bbe5d725dbd4de3db2ec812c9f170478d26e3c6872c4ad7d7c394e9ac3d4c571c29be4d639d0c1fc9dc50aedd4c343c9a6572282d04b99e8660eaa279f2f90bed8fc6fc53ffbb40496bac39039a03227520ff4492e77e1edf48cf55ddf762988a0e46a110069d9ccb5ab863523538423d15495a3be85518e244a3599b23033cfd2469a319805230d6d00dbd1ed054fa7b63278ab4eb9f081a6d56ebff5ff772fdf3233ab7c0d2c4c20a7c15b654481e93cfa5684341d1ebad9425fad5446d9ae08fa881c238bb72a9c9898011d6700bcec285c92fb144f9ef8503f7b1450e20bd3d06ece6f2081ec4d50900596b13cfe7714650b1bb81d6459aea945f055c2f31b1130c07b219ffc650e32a50d1", "b3a90d13a1aea06ab0f23657652e1203774c1ca5482f5e7c3f9588ded904f025ef64a84897b59f085aab14f185e442a7a2527a32e44505545758490c53496bcd53056dec795aea36db4a15273b61848465ff49cbb0f00b9ccdf2b9c4b520dc4a97849d8cfe37374adff7a4809492cde8f6608e25885fb03bdc14c652dae45cd66ca84386b3e8ab3c9b962e18305e5f9608afb92476e43f90bd284e295274998cfe6cc59e29c16afab41906c1ee8de9a2700c91b6199283479dfdf764508aad2d5ae1d780b5934737a27a8685ad8797b457fbf0fc6ad49e4bc3ee8ef83759cb059a2c6239a6f31042b51329d5402550006b3077cbc13f66b1a98f1afa96a47072a36dccc7dc4459a769b03836173b5ad032a2df0e04f29372bcc9c4a051667fca49d8fdee34dee700e4953f00285bf1286b9eb1e4ce221a1b43383fb69d484bbd359c376de580b1030c1463ea3ada6fc211057f7cbcf8457597612e12460c66e9ceb5cd2902c8469a0bd38681bf3dd93c34d0e1203a4915be0c5affa226aaf4795bfea024a41cac0c9b49295727db14f21f3cdb9a2941ad0b0b1a917b7ef0247fa8b2aeff07c14aa814629eed10c649b748b9c01472b7fab09b12bab81e3de6fa56c824643a7007d6f2e8fb39835532d3", "ae1b4539afd2bc413edf69955b7ae8a9ab166f7eea0cfa9bf9abbf65b91390229afa2361714d5ebe9c1cd678aab4ad1bae924006732b338d3fe1a87c93efa475017fa3ad08f590d803be8bde0ad2af13b1cba1a7e04f7466e9105f7c7c70d9b592810bfe04ad1a4c0416b57001469234b7f78038463fc8f5d2edfcefa2da3fa29e01202c4796071fb48a05f702ace2a10d70dac2b1edd5e693bd008f1c2958e2ce353e6f3756caa769b3f118ff9b016f4d7f7eb57a86d277bf03097e60492143aa0ed0cd5afead2cb16f37eb4efd52316d24b4728081a140369b70bc5442141bbb48a1a265ea55d995ab4b3787c4c03a4d8608bdb60c61eb3ecd1bdfcc7c8cce027b33a71797c574364b8b325b33da6610ed2e7312d2a5729184e099a42a10be2d323ab96456c83fa0422cc25d89750740cb6cd94c6e25326726908160f1a6304253c94a477b007275c1206ad7aec86e45b9f665c86eab377a61204d25ad058398f2d887eed398dcdaa6070eec5fe43b4010821a42821816b5d3f58d8f03c3986f89875e6bc262f51f66f03b8a69bc370ae9e0f778d09ff19745609dd8b19813cc7651f50d637fa078a0da32b9b63055", "a0ac1b725cd8c0342c3d94a00d8973c429d14a1cdc0a20641f09b0194a5d971d37effeeec5c14017b42ff7cef3f9b555933e779e3a403c828c277184971634c22334a95615afc0ddd6077bcdb96b61ba63c066cbd3e58519fa4de0f98ea3f0a98175fa2bd2e0895c4ca58dd6d376d4b987d4b77b3daab2b7074b6b80db06072ee020c451485c4d96fdcaaddf13a53dd005c508c465103095486b53e3174ee2ccb160f1f06892a8eb976bb3bdca29fcb370a8e7b1c38e25836f5b300a8987e51e571b0c9876ba72dcf8323e60de7b3ebe108303a035c09d92e7249dde0fe26f9cf48fc475df87cd359d9997943065ea8d0b6b0aa7b743e105ba906b36efbadfbcc774fb3a1bf15590070c8ae268a8e4406a754c9aba9bd0b8dc419e8d80e9dd619fd108a908368709b3599904ab52f7cc153ea7835c1b77eddc3216065270ed837335378a9a41f9eb58eb013fbf9d6bac2ceddf7c7a0ff5b9f25fe4793f41646ec259c2c106402229f137aa2e678068fb2eaab36bf89d3b916789252ae4c6e42fb59a67493b5a611acd007cd00a0f69b1", "92c7ccb952f15b673122be58c54f76949381cfa92343d92d32347073675fe8cabd06ae7fefccb37c7d1c4174be60c140b56a082ca87d12e6a9ea302b74859b96d0688148bc642a44b5c8326a699158aa41e6f59d83e5bccb410736650c8886a2ac517436c69798f7b387958fa5b96ae2fc13af9cf16d8a710a51fc7a1072b926f0b79ae1d8c2316239eacfcd2e11e0312114519b79eba492f4e8953f17645e92c7db5ece9d39c52874ef040b276d600e5f0b21c9a4675c795c111bf22cebb318e4ab85b36d8596b4293b75a4881ebef157c7cdb1f8ad00f3a579e83a0af249ff466ebc3c66cb5594d7f020ac07219cd9389e95cfebc03670f77cf632aec3ac73f1ccdce54dd678e0945cbabd82ab0ae50bd3a9557a941c3221d7cd4569a0a22cb27197aa8565f293df4c80b4cb805dac4316c3f75bd1e83f19a5a2837cfe90e3f8fb211428a5728e548b5c098e7e6ddd27cc2a9deab71f59ae75344c6469f282c49867af7ccb85db6f16a95d4f5be979", "9813c3e94aaaff6fb5a1863ebd349416ef34717f552fe0cc5eaf0980c25f34edd8fd1e63ab6ca2e771a938b2e9ebd8f8a87e16f650953fb638c31ee1fc69bff5a74b71e9b586adf128c58112e3d6747125dcb14a653e1ea8398f3e6f5c95f39cb31855ef53c0507cc4e20e126230be8d8d75d4cb1324b5818e150ed59a036f582ae9f4c0504449f63277c0c4df3f08280e3170c3594f89dea475aec5807cd7012804424932673fab1846028ec50db10104cc05979d87b95db69302ce7ffd6fb204b9cda4d60bb412ede877765883c0650f1d4d39a020207a7a7dcc4576b7c6942f9f44ef23f30bedc300e90ced5e986115a76956aa3d49bc3f78f9a87a4db46c6fb6d16a63fc0d1f1065d0e7589967332105141fe39d7bcd4ce1513e808e6f8513c632ed0c0ea41b0f371d5de761a50e6b5300b5fa2700c2525d63d0b0b0620f46f1b7d54cd5a6796d09fb3bd65bf0ee"],
            ["b5b9f65256c36ad76d19d5d452a826d4af75b2d9350ba316b6ddf913eb7d06743b1098c3ce8009d3d88d30b91f51f13a9435ef08498c4380cd9cb41b904060f62a3f17ba64d105b3d7558267c9fccabfcbdc859bae9aad074a02b9730592be448a409bf438872c5a43ca986dffaf4e1710faa9dfb799c9c29c7b3aec5865ea560872c23b9e8925dab1c9a788a9b25b4542194531371f6789a920159c32aabe2b79af3bbf9dbc1de5302895a28d64bc91304bdcb3e2d9a0ed951ab94461b23de64ac250d55c2c2b82f99be0317e65a66b4826fc493bf2fda69d437ede40853db27aa23113f57afe54ea8db9fd2adb2a8e01816be5cec71de0fb3662c756a6edb3e5d0e8856bc79d99be25cd3b9c8fb2cb0d559198e13e7bcc8097a5716f689e53370e40d035923e99aace933c8b8ca8596ec75efe9afa94c042eaac44215b1de4b0b66965d6d8a272e313d3dbe355378546c2f564ee7a2c2577deb83a001ba231a9eb3a8638f7f41ba5cc650378788ca83f5b62731424cc9a39d6833c931c31af54714d642d7a6561021f6a94d839c321296efb75c8bf15628bbe7454917b91f220eea659de1d35b2d1dd6d347370c5a6002eeea17bcd3d3e0f41fb0ed0ab5be7dfc5e641505836c8e19b8d48670f012523e879c70a6fd04eafcec96babb6cca37838a8d66962a0b88cd2767880f4190c", "b098a27358cebd65b1b93d1ee246b4b0d3520544e490fd9e7c8739d6ae02a99ad3a8ba84f64f45dfa1e62e0883403bc1b433475c2b8d90acf560ae8a7159e470667a7aa76cfdda97e1913e668c4e1122790dc8fa38691851aac825df4a528322918fba2dc2d4b12426798975721b4fbd75b8f6e5664dac6c2cfb739e2c1eed4e299629dfdaff2e535141444b1fe7bf7046597c4c183173d8d6af3d7cfabcee8282ce32e7160589dabfa16d76b458713a3cca5dccaf45f4fae6a9788f74c76d363a3f8a723c9760e2d1115a4d910698e04038f23769a3f9274d574803c042656b5f7b7be890a85ef02b618b0f395bcc062bd2b465122ea24a2dfb1cdfe3c8e624b2075a84c2a9634059d6f2ead55195d22aee92e0f1102de030efc60a6aa9577cdbfacfc690ce1f0f714f9548f17953ae02eb45b7b211012b3ef2f8be5b09b3146fcbe51d32ae7ce09f467b86032c67bf549e6d68e3b2564efda4b6f7c631fd2f8605b88ff4a5e0d6e2e3c05731d5e7a573d72fdcfd5bad49e9b29f4b67297467f9d2c83e1bfd026c0a2fdcd426b67ff75b11ca5d3d977788c34916e74f287b012128c975834a2e0a1b6336d8b3ccd6f871104dcbdb6121eb7b6d45bc63827a9cb2914b810e174d921416b0c92c255aff", "90048a815aed7cd81efb4dd7e68b634d74ef6423dc5335443b10d875fe55a298f2abcac3e9f4195ebabdb423b4222e9db2cb1a66861dfb51d58229f7e400aea922e9e6378216db948dcf30931e8177d671b551edeeee40cfe800a726f83a1c63b9a9d3367f0882a1317a29d50af9b132a980aa409807ea60a1bde4abbd01f2b1e093a4e164ba65cc47f4e45547326977432d1f28151d9ba4adaf0858440c7c9d633434e4593b83186bb62759604938591683dffdd6284844e86687522f8d38bfcc3d0a0507ad31fe5eb1af0a8835e3473e97e91c0f69118de75410917711c579da906559830951f8e13243b1415cca4e3e580da94b2c7a11e72c71b53f9f5b6316a6a91e6ce57ac6a74ca0111a0e9603471b1bf78e9a613ca3939a1c1d33507b9f271346b671f5b3b104d65cd46c71093b6944fe97c5caec3414b7bb188b66c05fecd5cf70d365977ece1c5abe4ab75a7026908d5b6013984d5429172ef85b33de9c455f4cf642244d2346539bf794e928e4b766a8873fd9231760207ca2f638381326a6a8f1c1baddca36ec31619cdc70bd358c45c3211f7162a116663a95168cfe948205e51bb41696be51ea97b682", "8e74ab0cec0b8cd08dbcfb8324153354253fe113d939abe900fc2be2efbb439c9c5ff2935e33833ca9d00f4a0b2742948ab7f7c898fc805d79dec0ae1c12090b7f1e54918dd440a88d099ab6289661d838bc285aa501b194dbe3305915d2d7258e52f7269ad58b81d93425b906639e055b8229d463abcdd835a8efe97a89611741da102cdf2a3fe0a8785bc93e82fe2159916f391865e7969aba80d66d0b69d4ea29f42b135dd8eb83b6af5353579ee172e520ff7c565acd97826f4971aeb6ff2091f27b7648cf3a9b9a3e7d925d2d3a0237a3323a3ece1620fecefed64f7340a3de3e3645a5e16fd0ef33c3975773b061fd5c1bed3586f41bfba747c8ecfecbaa0ec6f3b2439419c78bf7ed1dd16997437bec478a1324c285de06da25609a3660b45bafd18f3684d5128aac48bac840323bea4e402277564767011eda0c3a526037648e213a1deb62511afea104d6af3c5a7cf8a739896850dbcc48f4b346e7cd749cb1a4c78ac43030bd85f3739da50b339a5356ffd9d84554cc4fe5eef7794803439f2ff3bd66569726368e8c92db", "855567a1e9541d5ed2a80ac348899b28e4d9c41d277646e6082cfc6107ea2b3d68533e2bae076aeb7d70293d7689a544884ce184284734d873dac63628710d46e5b5b8e989403a08d32db9bbac161fd7cc2f48b7aa35588507eda2c6667d70b38b90abaaa5d1972afc224d33c2b33098e5e894d37de6fd218ddb77acfa2880e8227bf0c6496c3402a7e0ee2a653295f653a9362980c3f5e4f93ba4375b0a6bcf86c013976fca307b774d29b565df11ef07dc31c043247600401ed4dd2dd04e443bd03cb253b82c39ae945694d52d51021a24eb8f2f1b697ac990b032f0cdf82a8c94fdc0a92e9d6812547898829fc5c026062ae8bc6c8ba40b5613f3333cfae5763291f811c8b65c1e0114a601aeee5e2bf426b82797ad340205b0936c3837e6f9191aff859e0fb9b6c90dcac0235e98255d37b4d57d702dda099ed3d9ec0d63f598f4b8e808d4e258b79b3351fafd4c0232f2cda7b8766123b84f5b88cec29ea58b56fa837c6e654c1bb48181cf4f86", "8fcf3cd95bac204b12b58a92e0e3f246c74e95adef7ce02d4de56cac02eedd66742fe5c1e742d47cefb703c8f7abe4c9a4a7a5996e90a6b435e4fe3ccfbad462fe7a33a09af334fb21b6e5d2561ca2448a098a1e98f98f6edfb9e53e8bbda4a292da054f2d5dbbc73e77a0051b8c204a35daf92fa2649305a421d905485f331c8035daa9351b95f211493c0cec8915c75891fa6179cf2666db8ccb707729c4e7aa1083ebe2f974ba99dcd2793b4dc10b252f35e42428f5169435169c4e881b1d7f1252e03b41c3f3c8f2a995bcfb685500472a9d3e6054f07040d3cf6d4dfda99d8c18546acdf2b32262168394210ad5728166b7dbdcde980562454cb5c062508f83e3f3c4205305d5aee4bc6b4eda3605fce41168c7041bf86354fdd790e57aaf6703ec29c33fcb5a834d09e756b3480ad7860d3dde5f3e4bb7242c8cd09d5681388535de1af61c2004cb3723aec21b"],
        ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(
                TEST_KEY_GEN_IKM.as_ref(),
                TEST_KEY_INFOS[i].as_ref(),
            )
            .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify(&pk, header, &generators, &messages)
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = HashMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify(&pk, header, ph, &generators, &revealed_msgs)
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature = Signature::new(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = HashSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices =
                [0, i].iter().cloned().collect::<HashSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<HashSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<HashMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = HashSet::<usize>::new();
    let signature = Signature::new(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify(&pk, header, ph, &generators, &revealed_messages),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            HashMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify(&pk, header, ph, &generators, &revealed_messages)
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
