use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::Generators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::types::{Message, ProofMessage},
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof =
            Proof::new_with_rng::<_, _, Bls12381Shake256CipherSuiteParameter>(
                pk,
                signature,
                header,
                ph,
                &generators,
                proof_messages.as_slice(),
                &mut rng,
            )
            .expect(&format!(
                "proof generation failed - {failure_debug_message}"
            ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["963d6b85c40f14b3fbfbfa97c73977bee2a16bb9efacc3417e6b34a2946f334dba479021f066f5b8ac5f59572e635546a9b9cb533fec1ba10c8793dfd92cf32e109a5925296deaeaca14f7a54ecde7a04fed71caf68dfa84669809571ecd08808bf36376c8e3fa29e05a34e2da9d6c70af5fa4c047d9a61586a9ace7f58b39d3bf0f6c8dbf9554960bcc336270a6e47a4cf2b70b2edda7b43d3023929403bd2eec9476a3be8ca8ddbf92961773373e8d4f3cebab1bfa7dbe77f13162ef59e89fdc2bc5f5dc46866db8e4b9df344cb66800b4a3929d587993a50d4b38e06eafa6a2e7c5e8cd8f6c1dadabcfccdefc3c0e2347cb78c31e53c4724fecd6d05eaf67286e00951633bd30b98e2ab575095e8d4c5a176375627f088d9068bf702f6c80743ec0656c900f9010966fa5b644033f2e0c831611c0ffe0858a53e7a09b620cd145c393c2b2dd46d2a99f361b9220b21eda248b3b347133daecdc7cf49c7420a4ae9e9e8c607cdf4a8bde37cb22a37e20f9dde3fbe9190d3c94783d7aa5844d2fec60ad7f84a4b9f4d6288dedac5ca244249266038c55015e8b06c0ee62c0a76279f295c0314ef31e16e09a31dbd4e427aae4af43363227e849ed8a137c7546868265416811a2d354289bde6607f767021616f4c6b40b4ae3b88b7f55483370e21b3ddf389a5698bd06cc15979cdabc", "805e8f45a4b8b1625455cd0ed9b037530586942629027b767ccca6df327543d6fe0e1cc41f2fa9b414478f0f56eddd77a72cdcbb8fb3400f237fac5a2b22ff38f17816b4e7f3a339ac24361df61ee692d6f6f5709579b028eba5090292236ffbb5ba43c754df33261325abe0917826681fb14561a369f89e860f52f9a577a382c0c41bba4443db011349d5c1f46d8617318ece43a8cf7e7c118f17d218136750c81b714f96046c55bd5319de4e2e49ff6e7cc2ae086bad19c0ba817efec16df4237843752fdd791fac611397a0076fa26ba01d2f23a6a2188962d673a38c932e5cc99796ea8c82341c13bb2b0c881d58323daea6b7b0327bfe5a15c6d55fec276d96e98f7f8f358f2d4f6af32dcb78c5067d8dbd33eef22187e5dea7961616d3f8faacd0d4e91a51e8dc4adc9c2ccef10a6d4ebd0073539ee5f918f80916a5faffecce6f8b96929ca85a4b810ff3edba0d5cd6fb7e0bcd4aa7eeb89a89ecb596b4040cf1b9b1dc5384b690fb3a46e5ca2475b571fe66113f2cb7b255ec23746540181374bc08e3ad9910ef13b4d5ec0917232de2e1f894203a5a356f8b1308541b18776860aebd94a838feed36b0b5b8200b99963ddbd289aab7a455c7041639514fdc75e90c274d45f042588b2f1db2", "b9fd5b5d06ac68ea0574d6153e909bea51e737bb46c724f093b4b6056e9b840c2a627a3e49e74b64985b42c2c07675f1b7a2890a68a308479eb76811812a7c8250da141c0b9052e97ad2dbeafb7bdcc695e73140e97a2f28b40b41c54b6ab7c7a942f010af1865d4053d8359ab29da1d09353c1d582294aaee300ca93a5609d5e97dcce1dd19472e44499e9a7ca35b1949618931eb2a742c2bdd9e3a37ffa83df3f8a3b271cba363f90c5ee4b3362883392697d1f2241701410b94fdb0dfadf44a8e527f4a0888f9ac8183e613cb2aa82b8d2e1e261fba9023d43317e3691b5e5530e71278787a2aa1fb87a4d3aa738a085b5cb2e9b4c8bfd299d66616908eee5ead58cd07fe034d7739ac7f80ce7a96615a4e9598383dd4bc6d3130527c88d64dafd244bd026b3c124c52b21221aeb169e29c01bf0cb78cc8ef059e79b73f1c3339edd2dc7b00f45c3c796a121d56c43bf0a8d8972ea032db8ca81cc2b770e7ca7100f07f16c6d4d88751aeaeb1723c1e0bd7d114b1f2c3639f2a6d542b4a308c66186bd7b1a87168a979b3169577fe5e498ebc75b8dc895afcf98208d6b058f635b78d724f93d69269381c18ae8c29", "99801a35ddd5377e35d4e87f83d977de797a5a770d2e97161e9a0a275f8ff1a7eb0f9445f5e4107a6750521b0d028791b32823e303a721860c2c57f8633affd8cf21bce999d4b8c49f3596f1198fb051fd54aac32bc38e030552d57b746fdd5ea54d97d3d51743114be2e44bef0e158d0f0a483aacc8406b1dcb72c7608032cedbb6b59bde5601d4b3a2c36fb96bf7245fd717755c23fd88905b1eeae1e1f18b812466c728abc6d075ee196ef4cf81e5052dc2723f06e1014fe96c4f67a9e4570c1213223fee433c4fa760e9d234b73c602e6c04367eab8676789bf1341f8428cec56d733d313aeafc9ea95c32487d795e6212d4d15c041a91ae7b187356fd80d091439a6f0a5c2a595dd228aef36dc310809940c37f86feeccd8d74602c33b507f207553e12f8ce3a02c056e63a702a3ea28861f6e17229c2a4a72b799f39091c6c414af6ae13da96a60bc454f59d732366db161f70466bb83dd5d8eaa5ea6545690e6e2362470634ed23c03b7a1e7623a00e455b508eeadbee0b62f2efec22b886cbe060153c4dc2e06ca3d768d093", "80883b102879d89f2ae266bc45e72a8a445c7d34fd1404d137a0ddac1de9ca8fcb2fdbe312ec8d7b8d8332791e0ebdb0aab1f2a3dcc798048300ba44f06d8ee611cbb7465b98e9b6084e92054ffc7a880a21f3bf9570f58bc17b24760eb3d1c5877309bc2644b809882ec86f96dcef8bf2bc89feb584a77a5eca23c5457a6fa1a3c82d12104fec230b0ae13f2d05f2175505063d71c0572109d9a863d7a8d12f208c30fb032f64e465f91ee1a37813a70feeac54e68d6aaada3c168b1671e12e9398dc93bf23cd580cd26a647408bd084e4b98f3b05b426f2e30d67983fd02a550bfa2345cd4088d0b45fb2363cc80ca5620e612fba56b7db584aa89aff36f8fb970fac9b3655debf89133b1727cf28d1061feabc5b948f1a12dfe1dcfc1dedfa2a542ecb5a343780227e0753251ec0a3cb969b05e81729f7c261896dee51f9bd2f258f9311fca92e334b38a96baf7e739dc5a8e3a8f36bb82ba9dfb1f68af7e05ed93bc4fc7f9ee64491d2fbcc451ac", "a5f230a98c2ae8909f645f60f21167fa4c48ec9dc75f0c17823d0eabf627886c0a323a4b297121113a51892baad2a777ae6ce7641935e85070386237d0f87e8ec21bb7c82f0e344a9368b5476c3fbce5f3e9c38df1f785099fcfc923731d53bfa517377b6d17e9233f2a6b18c709a111119a42d92b647f1fc0090473038ede868716204776f6fc95ed31a04d40c409fa323b6a9fe17c5b70a413e6eff9fde9f45f4947d41cd79522c285176dfcc1449a6197b2333b556e3f69bf5050028083116aa2297a214551448b25ad3bbfbe0b3f1b3ca588f1c419084d9259257c1fd8d02883100bdebbd604541bb51a2b637ae640306d0590720a4ad82c86e4ed4c25a2e351679590d137cc2197fc0e479b20c93d8d0a9364227866434d7796161a1086223df4305172eb60d2f30ca721fb2aa566a5c8e51fc0cb081dfb43f6c7a0507be4f1bfadac3a0b405fbb38e03737082d"],
        ["9590514adb2510571d0bf7e0452e268d989ee3b50fd5d00c34fdda3b293ab5015b6745ef368ff7a918487db010b2a5a1a402ab0dc22919e293f68b276bb647645a7e51a6e9048d1231808483a2e331c11b76a3dff8927d40d2a9daeef7672aff94e72e8be1482c1a2eec7a3d6ac096a6a52dfc71ba33b95c0abcbb078f78fab496a144575ebfa5b1fbe3f4841aa862863ddaf5ba004f9efcaf34527ca91e8a324c6a5bdbc0c95c29e92db252f73dcd30632e0ee2a2fe020a52f5f9c88fc7659fba3278aa69964b746921b2b63543f4a36f465983ca23bd5e70d0acbfd70d4f49c9edbf2428c34a1e130abd388db83d0463952016f9bac56541ac519f1fe3878e0ab1e4ef56f2ff6a940353e67d3e3029023a02518808570e75ce941743a497544e3cad91fac1b7ec19ed0ce1a5a8e77c368d5a594dcc579b2fd3adcd35a76bb40e8f06cc16adb2b022ab38bb030e88b240a2c86f43f9151645a0c36e5ce28270ed0b6d0173c2466b19d55dda1fd63120303ef5a0d912596dac0e2c2d16e39b5fad8d38679e534f40471b5abbd7c412be1587a89cfb6b0a46d947bac3f9a38f5aa970b8f667d6bcf6b86202864d35ca3615240acb67e15b775a3a38e348eef72dec0a8f067e067b1ffec85f1c9abef6d407a24252190fb12eb4078688f0a97f80d9f7d8256e2025794ea65a9f39597e7c", "b94814b8fde8d14dbf981c84ccbc0b9cce1f0f6558657ad3d8543e5b3fe8cc4a3937349c17d189c6689667c732deb816a3d5304bc8c225f92c82d22cb63f8a5c281503bec015360e8320aa54134e17ad8eaf18435fa43a5b1b40dd1622ac6d758100a45e70e94328e51e875a332bae8a64c687ce91065befa61b73925a1d710381a9fc21754e59d91987d49577bf1606237c7a5c919a7bae70cc6189ef5350ae1bd6f9bcda8aee392693c9aaf1016b6f58f843d8c0735c607eb93800781494f4c26f8dea6b72b460dd007e40a595e9be1815b2e10c0b1a999a28470818fc8e4cbb574a88a2a4f2cf3ee4dfa9728dbca93953d42d60c66f881c88a27ea48f9a590a76bfeecb5c7c310056ae0521f8acab245f9f72046c9874f1318d7e15364f1f76f6629bed3579e49354588b62cbe0f569bb099e525806b680d8487e311367d08b3d8d6b97ebb8fd6118d9d19c799eea523306c7f7b812a37ae27f4590346ff72c9533c72ec4b9618a08f60f9feab81e1a844b3afd7b65e40e7dfaf3a24925255a5c6a85375e2bc63569023054103f57697aed951452b25daaace13f7d7619f4f693ad65d44eef215d7f801e60189a316440de606b52963069f3f6612caf29416aac1fe57d2c1c46e313cfbfcb23d89c", "b6b74c08e1f272cc2f81108e5ace8e2a8b236854739c26e2299baa73e8a975e2ba0e3428cac915233a46005b1ff7e0c085c68a252cd0f90f64a56e41d3d65a153b6049ea04bdfae83805ff077fa35b70288043da4a7e65719744587ae974d9fbad187095d4ff792dd71e1efe71d2834d734916b84344edab387d3e9e1749dce333eeb586caf097348eddb0a2c18d350f6d7ae9271a9d40b81c79b9605fb9d92c89b886da39a54881605d8b29e0346251387332e8767eef43d9a6f5a4ec7dffaa599829a00086c8f2c7620202ebcd2be0634f1474052b27c83ac05ceda5d2a98e12cb8bc2ca91674d4de9a09593e323982e8c9dbf3b19fc0bc7dfe3d9d4f3ebaf7cec3127b8bdb5e8fa18ebb0683583581676b3bd17a1f7b2cdd3e11daf7126449a6682d6a39967dfdb250f74b59f12aa366408197ffc1dd27edfec04644cd9b98b01a0fa5aa2ee6242061bf06c3eb4bf3a4aeec74a7956ee8270f3d59a41e571996bf5bffd21de3ca6311b7e489eddf53c18e1ba44a223b9eeff7eaad7cfc2f89e76793b0fbfbb006eb2ebbf5da7227072a471c3e5062a3309ff1dd3fa8763df49ac9bbeb6f0f0a0c157ed183aad74a3", "a3c3f4f69a758900bc0d67d7323c89e1ab66120c88ca20c19cc75231bca530cb8f2eeed5335985689018379ca64198a396bf2d4b20b4a27f59c73fabe2d221a53457ff93f4f413f248b17a4bfd2a30d262a6249afa7c933273c8381993ee918eb980e272300015625dafe95d457fa76ea3a65d0124d32954713f8e770d6fa6e9375af965d2e604a0651741dee3f1f60c3b11a82c2a96714448aca21ce1742a80fe82b1dde0f24a6e2e739e104c7d3ba4019830e7ecf1501995ddb74d2ac8912ae14ee2aa853732977bbda295ceac40e4198fc84d5734876cf18d0e18ab542aa15db47d9c972702182da326d3492372e01eb64caf43e08a0fc817f7cf95722590948f961d0b295f0b1e4a66aed7f1281a4b774ef5faa1e377dd67c4920d4cb3739b2c204bcf10136a8bc7351865da6e3411c3c0fc56fa0403ee80d985edb715f4a3fa113749f5ce15849ddca1f14397cd270b2794c2a5a7d17fb955a40ce4487bcba3acd78fb194b4431acd8fa991b7ab2a8b57c7d809e166d0787cd0c7353c50fe15e593ab73f10520fb078cb0d7f1a2", "af91dcc3ba9c4bc9d4d3473940c6474c94aec9c52e9af6a9f1fa65b9e681927a2d2ee11f66376bad93d601d1005a0d0c98882e44d484a8dabf97fd8a43dc79c784b24c8400ca1fe249b700f8984e6d43ee19bd84b21595aeb66fe6d3f7da0f509750869b9681dc71b2d4a5b2b2a76d2ae2e5b36ad677b5dc51ad37705284827c0b7ee920d79de7458382f7cd70830e5b6eb957af2c6b351c99ee8dd142de29bff183670055f3f1838dc238b57be76a8a4524f8111089d4bac724fd00f20f0ffc9577ff597cd23382f2d9eecac748e0976844591b2a7e2d614cb39036fae30df8792d1bbc021131634a3f767c7774e5621e7030b693628379ad339bc3c2cc01c97c44029851686b437db3568ab97d761d5f066ba4cbc7da4392ea4bf6fab4641dcc9debfd9feaba6294aa0c5ba8b9c85437cf63914b96202cd45bfa92da1934ee27b1534df7701f0283909b278891c7183166a975dab351471d05e16383d3e5660ab8e861e11105411fa8a1fb2646c2d1", "b93ce5b5d3e14ddb9c1d27a52fd494a0cd9fd4113145a89006f100a6313857f6d3bf648cd1410f0d0d6a9dc1fc1d86d4adc0c9bd88f956f71d89c618b5dc59859461a1ababf3b9fde81b261fd7fc7ad13b4d48d39e7061b0e76ac655555ca500b6d01aa88761f4852083ad7bec5788d70facaaace96f405536f01d31b2c393c7c715058ef8f63e00ca01d1fefab654191e0d142ea30fb932a54f273f5512f50ed4a56a9f742d214d9ec334b5dcf8429f3b7f83611c9e8d157b20b0222ad432285be831251d73000852245d03b3b225dd262cfe605b5f65fd402692984f239a9d11f190f231193c9dc3bd5141443a9fea70c3731984493f71cf14e3201ab9d33dee95692039163af7cc12b87f9c04993f17cb90c0fbf8eade4466b1e02a2a4e5a0eae8104460bfde90c36007658a3eb983aa18a3fa497189289e18b706f46f590a24f80ad0d818fd2d94bd40ecc7f1437"],
        ["8d87621e5ff3cc20adc868a6965b5cd63d9cc015596a675ae6e9623019c188f97f62d8addbd9afd44731ea686d6c0d7b8bd87d2a88e9bae83ced1bfd5efcf2ef6eaecb1e014fc2f5df9517c069d757aadfb9206cb0579a0a054ea72e53567470b85ba50980c2cb637d5d4f488d6efd025bd893751428a64838913e068e29318fdd2ae8509e900ff339d0a88a737f96e84b2242576e18251ca68b149a9e32e28e928cb52a329dcbf8f5fc9c7e555193f21b439aee37276e4019d5f9e875df3ce535a6ccd0bd84b06aab17bb25df8885d268c5a967aea1b70c96ae12a2d749884afeaab06a21575cc72ce86e99ec8dbded496e7289b9680596f4f93aa07fe498bf08894fae15f67da007b39bf0ce8a21b237d055108226c1b98a3fd5a45df1ce1c572f60fecffbc915df9d09e5b9f8ba711695e4a7deddd95b4cb7521c7b8a15c5c274c4e6f5ab0ac1512a3e5f36fce87327e6a6fa268b590e13c4d6a32bfb230508225751683006f6345ef7064b893a70024656709a2cf08e46562876cc5148fefc4bd5bd7a5b9811f6fdfcbf917f091b1a23d656fabae100be7e49e3beb44042dd411be998e08e382bda30629860141832e45bbe56bac15db24514f34fe259fad4f366ddf5f54ada05cd6d35cfe71ae7279a6978fd8e04f5d984c9db6a69d891da4bd8e374b6fbaa02671c6ba228bec7", "898de8a6d8a13e31e76376b3bc117599c596d140f5eadd077219c3681632a79d570cc53f1e32888e055479f4640c85edaa0a0f7ff0941a0253d558a34f999792e9eb4b0353e3623d99e1127ddebd8860b03acdea473d80a9576d65f9806248fb8cd4c216420de8b123a1bf5d1e42964437745b22fa244f3a342555c54816e8eadaad9a5ad82fc3d7f44f4c27baccbd5458cb4c48b36afa68e816aacd61213f958b3a6d7fc56452a310f8fd308945b5210fa780757c3a938a481cd2ae079c7e490eb268b74ec10fe3a8db60ceea91936b168203a58b108b4953ceccdd37a2fb7716f2cc094b5adec6d00ab08172e22be802893d52398b69e27952af33501ea56c6f518db0b9adac246b593d1eae8a8c686db7a31ae1afbba3c9dd8c5f7713f0f76b387c2cd5f909c4d6240d3be86f3a26133e2558341791e620ed0626617f6d5e339d815c1c14f82fb92ca668e6f8677b260cbc1ddf81de621a160ffb6ee0fabaaba35cee25cec7bce9708fdff1e69aa7347853f3efefa7614bff4cc4099b474ef13d0fa99c9ecc7d9c7d609c1a839eed066a8ff1218d69b5160063766526164de3516c03750d4de54b4560adc3c1c5d8543533419816762db0bd73e2cd36970e9b3ca79139b012237085740beb44fc67", "838755f690a6073f4d043d13b4331bb4bc4cd021aac45b100023dc2e437aa261b5b230b05b19ef0f765d5b2bd78d8069ae0ec1d56119d1c956b89948564013d6481cc3105f93beb9b56c7bbd1afcefb78abc39b7a0f19bcc03e1a302932214cc963ec820be2d0ae75de83df2d759d85c35d551ab9e4e8c67600b2e73a378a843aa3dc0bd5bfa43eb31d6e79a00bf5fee1ea765fea44d9c83e6370ca90117deed07c6d3010688447b16c01447d2d7850566b71104a721fc49514d5b85acb06556805e067f260c5198470b18fcbc5e89d37028224fc8ec40da272a29118ccab1dbf474acf4e4c91f5a41954c1f6c21f6be1b808f5a30ee6b1aeee107ef8d97a05d97964b7e8e799c2603c46ef9d1ad982d1f11d958abdc95e521f4ff9dda528d7822044f2965f1812004012ebe34f23c0e7336cb707d35acbca24ec1a80ffaa4430e781ac362c641fe814c9587787122a644592a28a7f25fe83674bfeea913f0d518c0e341220e2443539555fc51a17da1271219d836fea9de31a1935fdc51a9ad0e4851dec3e5d199bafabbfaf489be730275e06a821c44360016fe50ea2d2b7bc4dbecd37ace89f8bccfc98bfa1ffee0", "b33b91f7e3b7508836a58a2a73939f8ee869a177ffecffa7e018c505f57c9082651beff258c2d0295658f52d30035318a7dc58a19e1ef45f286bfdbbedc4930a47058c28c9128c5789e4fe4f1ee961b16e8c1f0805048642295a3236e1fc009c975639bf3b3a68b59741943a9ff9eead361fe070e864dc242adbbc75db6e52d30097c0eb8ffbb670ff9bbd7ba92fb0fb71f84b041a30e8a4581cacfa0b0a8fbc36955a59b124533b3947a9ff4e86b4d1519f187bb43f8c54b2ebcb5779fb11a7c16faebf70987d61f6bed368c1275af11e5410eb3b17c392e42653b0cb4d51393397bd28f4c0d0e8740bbe035431e8d13bc45b7a613c7a870fd6570aaec1ed5f89e154d8fe4f74f30c4520be787e90a84c62903d828d8b0f0d3b83fe65e97636bd8a2abd2f73a010df65148bcdd9464c368ec8ef3eff6abd2ea7a61a1209725890645551443318691a7c044ceb4734ac5bcff05b239f9d2b84793a193af3323c9e7668f136d9bca435c2657785f7266d2d9ebea3037b3fd40d0a7b45c6f06b4971a334718c75be42496cd6a131958af9", "a052e06585b32912c21e870d7651255adec58c771895873d3c326e750cce8e7f03cbf7a9a60e8f602a7cb5acca3371d7813c2b3408b1db3d2ec535966a8c45fafc33d62f49e7f512c6f56c98010830156542a98fdea79fc292c5baef55f2d5e9a2293a6ee7dd8af9d5869f388baef294797f20b194091b1ef2e6ab856d17e2a687c7c269c39ab6e71837cdd8f140f73637edb15bdb919dd796e141c8e583a8c66aa46d64b9c2852da372b54697d109fd155c2dde47ee4616dd8ae9e918c2c124d10e952655380a52f8617257ac219d604d786ab1018b96758d5cf297e5303b0a1f7910393950031e5cb3b66342d53bfa51ff3ad86730797933b3c37d8ee15cbec66af588e4fc79c41d6430c1c69f8bac1506d853e55f58551c4f608f71063ee1a2ba15844892d3e20c3289121f95d84717417d577dc293fe2dddd11de425b585351c370db1f3622739b182f463f7395947e7cfde9af90b82886d02e650e4876737937eda16cb901a51e2c200ee36e4e1", "a82425b9871285531c58c9d6081446763efc3a34f42acbc40e894e4a4213ddf2cedda483b9548ef970d07c1140748e14a0c4376f29eec3f2bdc71e6646fcf6bfd7f0aa701f4bf42331502a065048a7a7971244d10cfb7e31f73604ac5be6a1f9b89f8ce10661d2e2d5060ae27aa060244592402e80aaca3f449d7a4b287e259163aaa76e4920f4418ab7245bc7d7bd9c0c7a19d0a9eeb4453e206094256523790e57fafb511843096832f15c8065cecb08f22b24b05b660ebbe0b9d2b57da4925e57c4d373654ee9fdaac7e8ee3089c54edde56e3dfe65f50786d2539f90a77fe4dd602e4aea48c5b0f0595890aab4a31d23aa2e630f723d6481dc4bef36e3f9f85d6ba56b53f6262a8665c5633262cd2c3a425c550ee603cbcdaf672242d6fe6eb7912254b3248554cfe0a41f9cbed52010ac240e0b836585f1f9341542e8eca9773a238282c7a53e429373d4c625c9"],
        ["87a195cef85431eb600562a1de460f5efda8696c3ac95594c4f212b79b0176e962f4f9d696a620c58dd9ebf066795551b52c360036b283cdfd50c715f7030cf30dcda32154a853ad9e10986d2ae6aaae2a2e06ccc00c25ec60095b69993bcc9983419267554cd2e22aaf33241fa8361622b933acd7e8144c66a16f1dc550f5653dd569a43ef0f46776644a37a6e2465447941832f11f30d64fd03f1613db383624473a601910a5023a9e62d951e9ed77187808a0ce490fed4e601dbd17a7cb655d1003dc085af11d78422698d801689c1c35f1a0cf530c8738481d4a2a6e5cf996478ce8cdb6cbc3f356405c46bbe74c29ac3ac693fbf1ee617bd4ed54a9cdce6e82fd5025160727e7e12c11705ea1a147b43418fae2913b64a21dd04c38aab6c9bdf1c933385805fd90c022a3a0d80e2df6d07551311abab4a9561cd02946b5ec94f8b631e4102ee2065a9a1e3bb4c35521c33cd250cab38fe920c8c37ea5c48a1430fc7f04bad99a604c035fd7abe56c524fa8ff93ee193a4af074a73a26970bc89f879609811b43254d4239fe7e355783509978e1bd65e4991dd703aadc1b6aae094ed1ee54b72c465839e064155d17df6b3a5985666648771a5e15fcc9d299383b57356a0878cb2d58fdcddf12cb3cb2a92c126e4ad35d6c49c1012c85ae8ab733400c553abebd6430ac28575e74", "8a6dcd6e351940470d55157328f4a2acc63d6d4c31dab24717683e44b425843b00cf989c581678243de07e9a50d461daab68d19a0819d8aa1cd28b729c6884ad095f694c42bca02d4babd89282ad126d067d1a6b453a3881d11917349b85aab789ad5f437e22bd002582a2cb3a90f314fb374386d53e389b0a42136eaee114b7017c131ae81473f71236c3c6c7a033e013d49fb508ea44dcd5329d7f7931cb4c766aa986f0396aaf6c89b45500f2e7221c8b9d6ff253c5dd11c6a2c31ca9d8723cd46bec0a3c1e3f4b22e44c3cd31a8d541a128079f01425d197514510571f6883068def23a6a942b78ba1d31de75cb939328bc5c1f420ee07855c1078c586ffb6606793121be01b8b69ab8d6a6d737913fca53f1fbdfef543328d6c1bbad9a2cc7332b647c6f3bd08046f272452b9954a0a458fbb78575f9e37b42bc25799a3b53427202561e72fe05b7db577231a57172b5ece0a359297366dbd16a41b927c032c76b76effc121575edfa2719f35fb49642c5ebfafef6c9691d5e8ca95fbbc6c374230183b578920959609519682b8254952b9111b1e6511226130ca961ec75030a0f983e684a391dc68e2de18775f07d3fc6ad6b13e036616147d0636eafcef54803006269adc7cc1cfa1e39d7720", "a60d688896c222fbffcd4156233f3eac56aae6e992396644fea14f147788631890d98a8840a7d0ae31c660bbe8a9dd0a89b4370f24d976d7f9ad387d70072d3c4ae7ee1ee60a420aa6a5433c8cb659888951eac2ed4dad6fed2956ea987c45859349ce760b50dd6079a9a56a8add495c3143abe3eff3626d0ff54d18d0dd4e275fb54b741547178873ec6a7b28e3374b1a3fbe6915837b4edeba08de7a0f3663f5d1fcf3d0c9209f8d22fa1fd149b6cb696e154c485d74cc245b90adc62cdf47d205febb88f282bcd911cc22d0b96a8753c57e269f90dca2b31bc873f4e2cd9023b30b933a82ebfe5feabada2c4d26cf63c4771bb5a0db4f4cd89dae4e019f314f1be3bcc52e139eb89b531410e3bc2c303cbf5b02d2984992d7da513de3d0c6c719dae7eefd8a9ba216fa9608d954482f94f771b70c13d4c575ef65aea17f4f709978c651777294a9690e9404c9f1d50b28c440380469abaa655a34567e6907de14d2e39df296abeec1a08bc39d10bc1b636ea241ce625f5ede9fbd9054ab3055d88b50f76242b1a25d4f1f947d50e402c9fb211d0535c7b237d4a00bc0affcef62ca36fc3144b9b8f8a58c7389cb21", "953d586de050b39b53d15d4a4a684e041fd82795e314d4d78b6d9bb3436eb4e486cca510efd132f974a59ba1c823abf193c5ea98fc31df406d8bb23dc8dab513f3ce7de9185126c884ec9303a458d4f015252a362f070ead72c9c1af8361ee338602eba46211702eba1f4a77b3cae0a89e284979f8458c4cfd4cd56f39b60e976dfc33f53aa457f77e64b55086e7214e3fe64cc8ea66ec324ce29cc4bd66fbc87a605d77024541937650e4108ed3d15e605ca58c6f8bd3c4221ef8bddad567ee0c018026cd02ccc2b7da39c5a2dfe7fd27f7f0ac6d21cb96b1162a074f725fb8de98be5d71c59f5fe7058f7e9cefaa966aa60f9e9bf91ec8685c325aab8bf0e099493ece0ce6ae5edf2cc76663f6f7df0355a3aa47bf26bb32470e64b264c55ad5208c4187076f28b7526e91617c5600539874e359a0e408bf3411613a3ee00e14105267fef8f38823c1cd81dc7ece5f73831e20734a8ff4c27491781775bbe6043469c7396a1836aa834da71e0e8c3f2ff44a7f1d1534e4f48735359b1e96b31b7e401e671df626072d3ae81d185450", "b9c509b8961d10dbf96e8de20464125576d40d43801ba71616b7117eaee9c7288041310dacc9df31f8cbd37da3eff6ba8219e2664a2b788c38cf9d77c8db682d68caaa24bb3d7b76b3eb90687f4c20f9822d2859326445e50998128a0f39fbcc970cbd93b070cec89f587960fa159fb91158e0664de87345beabe154aabec2995081951299d2b5989e20d43a8fb642e267d977792a8f331142bc38567000767883e4ed4a82f6da25ca1e74354a6b84425fab05e4bcfa12aba80b0bce7d9fcc91678d222479a78817cb5d85b6b72b05132305961ace8d2f373fab49d188a0463e9686153930c7d85980c27bc10b969376573de2128012fd5d00a7be2f403b1e6f7ec00e847466fe9c086a52f7babcafcc418af84be01d2b0ebbc877c33dd1a47ff4da29a94c306024730be7e9dba2fe2f477264e87bb4780bce7ca2afabf511626ffb0d064c12cae363546d873d6fbd0b6a8d91479581c25a429833c2d2225ee1f7dbed9a3310793804d6ab28125885ef", "a1a95bc94f9311d2a22a6602c38dc3c40d422746ebb546d93ce3b789a2cc580cc966698b604b02c6356989a7c8bf3b24b9c11468112ea1f0f57d7f0cf016e19c76fe08b1b8bf7f3707d161f5b4a2fee1ddde8fcc99e6063a04d0f183c7a2ae018ddaff5d008461cc34328f717662973fa48a2f9a6a513ed4ea9dfd716819ce50ead401fe34f7b0a7d0c1810df551d272710cb884b50704e8012da9762ca0673a84ca9acbd583eb2a642fabdc203744d52bb0e619d8bf35cfb8c7d8278dc1a53dc03ad461ca146cdfdfd4128e43ade32e4097ed34888955edc9fac4afa114938102d4f0da64c5787c16a8a48c0c25cdd553f8f5c1845a39b714f470ccc09916dd30795ba48c9fec94e049fc9c05fff2150aa62aa14ed09142d80519e81cfa902447acff8874e77bfdef3e23b07a095bff41bec64cba0097f3b5cf0d8810c42239e450ded75de41e5f8d2e1e0fa12f68d2"],
        ["b8a89dbe5c5db5f9a0fd82247592746d118acc3acf796140468484b9f1cca8ae886be379185e4c89ad290fb28ebaff9eb01e7fd64fe754e0bb977e0c6b7c8e28c74830d489ec60db45c9933fe4ae7153ccf8ae1afd9d8787747f3cb5a931d7d388e07acb01ae41427214a28a2e8bb0d0e5a089b5a5eeb5f157de36abf3a0ae65616ddc387b0226d5bb86c2ca830658dd53d0bfbb4c7d65da33f602d2f8ca82eb1b434772338c92e543ba5e9a219876f245ce28c09d8d54dd97d195b4828079f8d2e38a22fa3860fd80413c41209ba266578f90d84c40cd62d2a3b8c6ae3320598d7555b2e53f33f5247bd075691120570a85191d49536b82a3c93b59d13d6ee64ff992985951bbdf19aa78367b0d3b6f2e0d2fac110e67154f161b7213386cd8117fd9b0355f69c13b49b3487218cba628a923d3f9770b5bca9851c48921df0158d1a2431c8bfc4526ded764cc94b683051bbc1feec7db1e8b11a34bfc262846ba230d46c49a969a0e33db6898dcabf606210d3e505b177bdad100b3160d371d8235b9484f737ad57b49946db9e0e91347ee4c62fb22353de82c4828a31b4f8e5941c343432c52625eed3719334d94fd613251e97d463c313bd8f97831515ffe84ab663a8b2a4591c9b9874dda75c4a739b6a263f2ae669e588aef08e676cd0fade04997268d0f6e8e30a3f9e07e3939", "8f0df067b821c546dc619bb93c5a29fbbf2fc5badffc6170d1725155d9a67176be82fa0684ff5bcdaf66681721fe32ce8ae53c0a95aeb2ca5e2a61e1aa2fe328b37947ec4f1e7fe89519cfbb1ef7f0835417126bcd5540bfc8000ef5d0933a5c85993a20b0c37d310e341dfbd89576c2e1b6914e4dfa7c0ee025f84e5b444787b8586ddc2592f0c0da8e75c76f45caa26ede60485524088251f5af8163b71c13ca56ac8cd362533f7a6d456c2b3f41e108d6bc23bc111e27b020dbf265d9b7921980135277b401a1eed7f08771ad6c3247a3fb42d01b490bf1f9daf2737f43f899065594dedccf5aab341c9fa7a7644d4335f64b21075e756f137ab69a8d5a7ab7ff0c6a140ec3bcc28dbe4e36ca290251d10270c80f38eb39b166e3167e7c784998b86794013b6e4f3dc280724232f822456a7206c313b973a591004eb301cd8a4fcd398f4f472cded64cd34123dae34189c2ae8403594d21138603deb65bf8358231d3510a029337bd5c9ddf0b39373b00335e15c0a009e54c5165c730db4dc028ce6ef9ecc8516cf15ab096c982181a77696cfa19b12a23f83f161ceb699cd4a1eb61ab9f2b1af9ad3cf936769da92f0b12e137de4911eabb69f6608ebe87e15db03f71132c050b6a83a7ff72b29f", "abae90ea8c45e2ebb3ec882184cf1507a7cf942bbf60744be582371f5011e50ec898e1d0fe7cceba0133d9e42dfee4dfa37c531bda15a86db26de2ff561159b557de84bba9fda7d8d9ade98d736de04e3cbf8789d97eb8b5df5e2a800eb6188d870517c6b873950f592ee1a150d29cedcca3b4c171fc4c106037ffa72ea7a8df96abbab428fcad8a2d5cd38a8d662243238939d78f2656c0ba1d4a00ead816e83f6d6b2eda8a5bc2b9eb7c4747b51705615bc658eb98539ac57a2fb4e31e02790fcad697ee58695f048abd11e21a6bb610c345e370fc33cad9e53f3662f8375abc58036955d97bb66e6ed94614b3ec5068f12b0f1fbf5377f35bf163a24b2657b3eec4d9aa5134583a631efd6731180b1451a28dd634623c26db3b938eba3c5adc6f1f46e3f9beacc042f6eb550b2f6136b3850e7ea3ef3dc399c0b66c8b12d308132729f570bb2d5489f13f8aeaf29469ede857756a30e33aacdee727cf3b73f5ccaa863121271d2a30d80c6454dc734245c6b8f0b15eda47c24b9571142993748a2d5806f7ce9a7df9029b1ed0a9f437de94d0e8978f5143a634c1493389e3d4626edb8b5330064ea83fbeb7334769", "b333da79ccaf7a12a3a22583a696083021884b10ce54182ddd99fcb5edfc3b29050fe8d348833323bdeb9bc4d8ddd283a4f4312d7c7f2cfd1268c9ee842cac907c9787abe4c84337e6f1789c7db6337fef5fb417cbe318c24f452e2fb0a5e7c18042df8e516b05a3c91efd03b934907ea909b22cc1492320d6c24bff3aea11661439cf6e4bf5001e190e0b635c0ee0a50a311ba2848c375c3400d1985b541b206fd082682320147bde9bd1fd5b054ea1221ed4af408ca9ba3767ff22702b69d3a31bea4ac5cd38de7907f272b00b800729dda54f23a638a13a4b8cd190880c3fb784f6a6085648777c5ebf973cce50095a98fd7ac52f755645fa1a644fc5cf70aa3a3cf4e1af82e49b34b01ad148753007aac43365ae3f28a4318dd91c55cf5d89e6335af3ddb08f15d5d20d4ea690e23d70966328df98e1f68ba8e63c1842f3cbd30914a03da779cead18d0de2c1fcc54848b156f6a2b80ed889dff9eb1144d01cd2267ee53df15872217beeae48bff438eca458bc019dba299cacc2b0fc7362ef798ed072e43874d6d8893306c9f50", "8c2d07ea514f123c8f7dc134814c172a1f5faf426523a54117a7300e5dbe3b3ade7f07b003f3058711ed6e6c53152ad9b863c7d1bef3d0b050b508f6b90ac437cab4c495e4a7702ff464e8ee6b9fbb94c00f144823421a77f468a54cb4dacc86a190a15312bda0d326fc89046b2e94985b28c67a5cd481ec018d20515715af476bea09c2fbcdc179c47ffdc000f0f0bb14852f4cb229deee605ad979064802f1a54bf558186320a1888cc50b30749af10f45687f9c1fd91c2f20435b29df2af27bcf9aedbf157fca53cf9f680780fe860caad4f800b2f13c57e3bc2be033283aa69b4bf7167d6fd2a840bc4e4efd62736e778d7f4190f54af3cd80ff479000af6048c6b0eea2717e260ce608e584e7f321913aadb7f5e633617007bc395ae32c705fcab0cfb8b0e11c9e2f122ad40f46692f30e92178e2ac476b4a9ef6f6e8b4ba43597fda06c91c52306ce0e9985b1b332ec78fff8b890341af6c52cd8aff3f58c42c705ce37e57f533e72efd71ba1d", "8585cf42d949eb8932021389dadc95bbe5e2e4dd3ad8a4f50b02a85d237c44ef615f36d11a73bb1060ce5adc83f17bc9932aba53cc0d4e345a1b1cd3b3fd739a31ef1f86ee5eb42dbd864ccc3906850b8f25ad30c7e97fd4bb997ac6c2af14f980d903e36a47d857c335677aeb24272bd107fc96c1c20c435086bc2d7890437399f829e0b444a2b2d3196c51ce0ad88a326bdb0eae3889b8673c352134f2daa38beae1678a58feaec612ee6ece14faf132d5fe3e4fa6dc3e368e8d2c2eec28721ec6a916b64e8f8c97a6e1feed2a8220651073037619b3150abba518b1b072051b024cea16a79a9e0e1bb69d56e564b822f268d26e50eebe4747d962977b76996d2343fe6751f1045de9b32937f9ef0f1b403b2b5e65b703df8f87e4237b0280154cac5bad7c0470f786a827ab16ad3f4fb298c4d8d7d7a6041d765b64c9a320c7db709053b6b079c281ba9f9fec83a3"],
        ["88686cdf9056b52c42e671d4c2d03876ea981ae27203731ab784147c25e07d1806b3a59a880bf0ed6931d9eea6877278b837fc544da0c7e025e7bd755364536531d46fbe2bfb3935fd6db0959932c214f5a92528447858b85f5cad60bec939a59783ac4885adedc09e398b2f36974b2acef8bcf923a12a22ff1912846473f9cbd558e6dade518bbb4805fac1c259b57a1de4d0c27d9a2ff485a4e25db99387e08f0f408dbb77c5ec94cae8c910799451426c928e8333bfe56a3f1bc8369d7364d18d79ed30db1e5cd6caf6c0752a787b466bf6f4a1dcb5123b37a07bc9531631669ef3e9a7d0c25575c378b9badb30e214813b305ee461e0f10b7df52dc93778fad9b20099b47e22a6b542ea9109b2c55244f91366924efe291f19ff70cfd01e23bb50566d55924f9903bb1c9e25efd6286aff931bc7a688642144dfdeb1d32eb41164ab9c4aa9130c89d610fd4080d70b69ca9c5f23e5efeaa6c640441e0eab40f3354b9b95fdc9113721767621f55951a7d0c42bbf23204b37b65dda9c98adc3fd931cf59af53b1adc681a92cc896d4e8c24508bd47ef61f125d9c814315e503309a8c12061fb79d1697bf28dd243453e873b8fa758f198d5a99bc7ad0d4b297bcbad7267fccff4bd8285013c30239596dbe6e4f0111bc277e047ec6b6377b7fe29674f3e0af27ad012eefc424fefd", "b1c6721b5ecd5df520c2c11ea3f43aa02342738a73f153409b1b938f03da78841eea739831aa4735d1c23a2d018b1f469609380588b6b48cbf2cfca207efcdb3c21993e5be1e58efc9a6a5ededcbc7d59aed846cfd1d1c1936fc08163e8666e3b5e7e85f2dce25709358e5769cbdfe09dfbc321c11e8df420e01e7ba02e4c1ed7bff9324eb9e24b5511cabdf3de958286b317435a7b941902af47a4b52b7770a3d8777f280cb1c3096b7ccce2940f7225a950cf4904fb177bee1a663e4bd507ab9efed35d45d389465a7dd0666d44115148293404fa5a268853b2d208d1eb90a6b4b6ed7bb57f0d6c1caf8c6370fe24c1eea24cf28746b94d0d61412b27db293f72d54b7ff458ce9777ce1f96b79694849be70b85d608e1536d0e068e11705aa50e36fcb6e15fbae5e687f99cf50f7e2433ae11b7ae06ba18d20aacd7d4582d9dc781851867534201622ba7feba94a2a5bec167c1eadc807284f9b127cb6f28ac50216736e77234f98b0371e3a388ee01a26e50cad4dee84b91ebde61bb060c8469c6a9ae4e1ee2b676a21858836ace013dc9c457a2b63dc241ba46efbac8a3eb2028d41103d882a16e37b03cd81f88e65c18878064e5145a1fe1d63bbef1dae63d52efa92fc161682e1a7f1f5fc62a2", "8db7a695bdeb8618167656a91aa830fcf49ef3c4c75f0276955e1ee7fdc81fded4807be106872c46ad8d4cdf04bba1d497e82f680c7adf8332a035e3843e4c6d24c89823b3797f4cd4cf4b99b725c231c1f9ac1a195975ff0398fab4d9202f3a8043b1bfc672eb62b399d87f6f6427380e7be333a19d05cf22420e8da38d07161e0e9bbc2628c3c8b1ff035c60dc17c7248ad642acf9c319b7c2c92442de473cb47f7d254c5b797d2721524a9251bdba272fd0e237ae477d08ea2f807311c919e1673c993bd12d7a8fac775626d857f94774ecb0fb7cd24612aea218ca331fb8556fff34f66aaf52cbb5be0c3e2fdf514a76bf1511002690c71367886ebe9687b3f7d76bde66fca1202d67cff519cae7612c2e193b593af338ece00d269c89f46b777e5b89b4ef29bfce0f576ae2c1a9218ddfc0f8ec609afc98df09ac20132abf17105be170c0b8eb591a08966a18b6196bf8748cfc65379387a865a303edb73854ee7bba094ee0a96865d45c1b92a321ae74eeb10ff36b5967b90b78d59ca10741dbc129c3c17889bb12428549075f5551df1b00c4637099054a8f06dd0c2dc7eec99fb63061d2350e0b3c7e143cec", "87cbb5bfe771febdcfab713378cd356ddb3895e76de2e9915851766f3c2a9e0204b591d57a0827b527560f89144ffb2ab602553fffeee4c5f0cde3b8dfd517eae01bdb7808f258cdfe262a9e761289fc4e480e789939d9a39df25660672ac28db9de51162309f76ec8b204ad0960d3fa0ddc9a6a4ffbbf17c241ce8188619731b39d97fd98a96c3aab073ec42c7cd5a50d4f90238beb2b4ba124d75cf9f693a064d0657c238099fe5cadd9c1e645906d569886cf8cfae8a22fb57f402466af70c25be186b92860862147909e15fa0a1a6bf2590988452691726ea679495b3012a203ff1c645db6ad6e8e3f220a2e3a762de42dff3724be312681dab1813f8e7b6f7caf7eda11b80065d684fd4f2364a13a215e6b903c6acf3f008b6206a66535e9307be15dd7dd4e98279aebc43aa4ba12bbfa51514f00bee7700bdd39efb118539fdf3b23455914c2c93cf22c9ef932171b267a6918ac34891921fa4869c79cb7e4c31ab572f23952a094e5a65a580517823cf334b9dacb86e63e5539a01a03d47aa0ff7cd79f7c0e51d03189b783f5", "b6473ec1aa443f8650d9bd0202de104f456d6758f47814d8edbdcb2b8d5fce24816208cd14ab40a9030fe94f8aed4ef4a452a7db1ac5caf1dbb92c3f8dfba4cda867beadab4e908a210feacb108faaf18c6aa898f8506dbd8423072e36c66fdcaae2799e63c3c267b3ff39d23795adc4226073f1a6e35daa631ef2f5de5a830b67e29e0d1796744f57889fe969ebcfc8209d852dbec2bd2950ffff1ca2d4b873e23b762cd30faddaff0746c6cf5c2d782f513c6d490de9e4a7b804c097eb52018caf991f8e4249c31d3a0b97565ad3e064a6af90e31953f3fdf0b364d513890dd0ec67945d1a11f0ea27c10b3319edeb3735088e1c12a750809c6c71f78732f2c727bc666e034ab3ba66e061c01c03ca6a5c55032ec99f64114ad00c339ea0e1effcdf7c7cde3aca7b509bcb693e87030a61d993b0de01a844eadb1ecbcbbd0974f32af3eb0b84812306fb3f39b2578b0761d1afd47a808823bca82f9fd8af1499811c7a6ec577a4cc9ad814db05ccdb", "ae0828f5839c92a0a606221c9ba782a11a11437e7d562605cf12b62ca6b63075deda156c35f9013d6c66276eb0473e10ae9efe118f9992db4cec492399b9df35cc2675922b6cebe4e2ced56888b9d1ab217202a8f911e0342920bf9709ec490b9338fd086d593cf70e8bef97801a6945ff50d4fbc9b1f9640c0aa13745ba7ceb54411c85f5bd11224af4cd88f8b329136252e15c70930b5448a102a43811c918a299af28c268ea1de711ab223b388d6b6563d507c84a5b05dff0a73c228196b178f2bcd6bb413e6d3ae72f7b188204054ac58308c73c5d44139d3ff1841681d125e98c2bdd6314b68c921e74496f95325cada80db2659fd8e4ea37eb324f9eb40d8790f437fd3d2a749d97b1fb0d88b52eed145aef5b9db9885469e06e5e89a31013944af5e0bfa7c9b9ca121252234f2b09dca05bf3b70931954f6a976adefc90b8ed8bf1a4b93b1a48cd773d3f0f91"],
        ["ac3f467b48b1ee2d91541089eccae32f5c43c4c380e893797840ec7ec248879a1f22427b87dc7f4d161f006bd3084421a0b5e9756a2fe7fe0aecaf6f039061cb2b87e2d2c3c0ffc6d94d1f841926050f659357abc11608a731e3c87deca33c3ba1a4a83cd2889fe4a8cab7ab710a7f51976ce0d0827019a8b0eda5bb966877e9f8b0fbf74f3aa28d54011f646cff084329369f5b1d2bd71435db36e2902f711e4550d9d3c2667d205ce6e16430510a826223de0b3eaa7826dad9a4b17f00a7931062388f7f8ea8f4e5f9cc23fae01ddd26421ecc911cd772987e9967c282826285a8a8917c3e95735d79e3c1f929e3a6050184af0b307791a0cc149b42fa5dfd3ab30068128555a9c6b86524eab28bd243284a501c9a26f7bc0a10787d53e98e6039f1707728dd309310fc20dc97ee121ecc28053104b6769eeccd46ade99df735d541100cf265c81f8f20dbaf1e6eb16498ecf1ea05b983605a32814f7febbcfbe822d3cd3163040e2323a67110feef44fff773aaa6742f2acfafdd42d3e3c184acf5b2591437a23d13dc5d79e0e248217a543695228b7592a556984cb67c9c2392312b133412528b8e6fe9819710382c2697dcbffc90ae356aec12d7c11070ab655194aac2f2b85357f373e27515cb10e64040400b367e85b5e81d48f16a8f0127fcb912dfbd1df6a71dc62800dc05", "90dc669146a40a508c3e0d754d41c5ed465d915e41f0d1beb25a6f5b26693a180065e56b4cc507de199d700a58d25dda85cad546642a194c439ad0f4fe5a7308ad0493086af88c3051a8b88202d0b5c9ae6f45727124b397d1a28f2d1a73d8c88d63eb75857b48eb9613ca3a4c81752e65c048cdaf50712e8db8ff17f50092cb56d59f631cca7d8b5d8fc22ae43c18d908ba0992ec42ada96f8f3be1ead7f288bc687184d2a1d8f3d664aa5dc848fee227378df944371c737940f44b8dae883a98f91fe8d8ee95c6c5b8483b33633d4a6655cf6aa0c89d7ac96ce1df0ef85fe98b1c3de081bd4d3b9381bee20946054245f9418f5a4c5cd6b91a21502dbf1ae1fc5eee3359d1aa446c6ad843cd3dcd1e14461f49e2b4f6ae50a9e216dd8601f92aeabf3246cce03d7c2f9e15be4fc21f275ad881966ea9cac593f7763585686a2af8093b1f91d6c6bff0f79221ecef6c1e22d8136137943676ecf5dc5ec3a1719e831abb18836753acda90013ebb28595299a49f009efe665e042fed98e54fef7c7b6e38f66bd5b46c129b1014a94a14123cff795e7ca3c0d5e98c85b8fa15975cb79c4575bb6355b507ae368f3e17870ba0cf59d247444e50de2ed4dd6f4f3855923f8e27e7a3d66b2d3b46274d4daa", "a32226348f04d134163283caeef23d2753244241dc0084eb9327d6f86f401b7cef85513398562f02036e6382c46f2123b09d3f9bc9c49e42b6f6f14873d645f1e3e91cac5565e18600cc598960c58dfabfe58d9af6a6b08c2e34398f287450278886504dd8fd704901067f371a80ac7368343621d3dbf1c041d1909e520c8fac1eebe400d848ffd05a36a9e04ad985c31bcb4960fb8172c05855dfb6e7f85960885a00f0ae64fc932b3d3f4663b3774c67ef2cc3e02c5f820c5a116142b9ff99c4828331d32b7f9d05fdf828af9201b8335cf05b86001ff159f485b8841d6f85cd9030c35b0df6326f2e64932735be336fa67c7870cf846590f04ba4d53f8c7e4e1168430d181677257166577ee5783702b3f81f28d6aaf4f9cd76ea020ea5120dfcd1de68c6f3a36362c5ee0d74f90f6f41a64dfa96947196ef1939c8127814ec56c9c32db33dfee4ce22be18eb46cc669cd92497c7586739192855adc888b9c309bc4811ea9e5ac52eeb0be827378e02e6817c9e986a09ef6b24fbac072f2f5f19bb805f29e6af5b624265f5a2371c05cbb0e6009bdd132021b09d510b863a38763ad4148156b1b41c748688e3fe4f", "830de10615e8bcbf1eb5bb1735d4fb92fe77f1e5c36ab2bfadaa3db9bfa4ba86f68fef227848cd24b5e1a51d3d7563bfa3e1b07129a6f3725e72c4bfa4ac3abf5c5728e8c464000200c2e4589f85ff74f7688e902d89b0516212da987967cc13912d40fec4f2c0293b05dd8b4f773b1130d8bbf077e826322a0872fae3319757d9961be70e9ccfa189d011bc0620d40b3ee79708c402ba644214920eaf21ec5d241ced371547a980ba26f6ae1f0a6d9b40c4222cbd2c4a50266d6709cf1c349f098d1dddcd464fcbe7e92341cbaa8eb61123aab44b489a752544f3566f9e804819622bac8c0f22ab7fcc82ebc259c4c15e192a19fd32740f2bb3119e99a8ee26206b9f690a00e0a3e8aab8653b17f92b3bc2e4db1a05fcfc9af4e849030e4979d244be5f95d920fb3dc95967ec136fdf6a371e8d0dacd585e8cff2fa10c8b7c1699a3a1b6926a96f3cb1d28b0fa72c851b63dbcc26162be64c102a4dea5c8f0b106a93f50baf8550e6b50b181c03b594576905c3f0a3bf3e9a9dc12bc7406f551f96d4231c1c9f8fa73beef920230e29", "8061f4c792e4ae4499e33b9dd8588fda56807140884c193022f173a5348faae827992d5627f8397f8b31acba9cbbbbc59378b5b0a3c53e6b60996a93d21d5558d0329ce105e998ff9c893d4babbd14e11cd457ee8366c6ef6f69719d7a73e8e0a85c474838b6d398ba54aba181c15668c20a5e0dabc474d8ce694508914ff12f72a54e451dabf19d7312a08d160b8f6e631caaa39de8dacbb7af880b09a1289fe858d361a9870e3310a8cbbe5ab6da190ba736e17c199c9497f28b278b7c66987c0247fc6de9f97220768fec79a6bb43253c444da6cee8091f94a4f62c8a4e4716807e99f7f78507b9ea790a57b44dc12e269c601f8eb21cc4c72c2b1ff68d406cf7945e4a115dbb1d5562bcaaf867c94584feacf5ffa4771a3884c5c8609a3939c3a777afb3d5b2a0bcee72818d0fbb626674cb89e889c8eaad66b7fbb26581b462d48b35abcdd96052ea768c1447b46862161c3a4961b1edae38034fa50a906d0ebebf1128094feda5742d9ab05e18", "a5b93a937c9ff1e7af56c9271c9f5f8d5fc743940b9278ab16de88525e4e8c0a4fe8d065a4f0578f2432e9b94dba89dbb6e6a8502e6f3cb7bae9858d53e4558676b8cd641db7622f304e36bb65e5ee933aee63e757ca2e935a4322ca327fdabd937c1a39346adaa4c63bc66d72086466f68e9c8119318ee79dd54b80b26af1f0368c3ac820d8d9e5ffceae227548bcaa0f343bc4822cc9dea1ec71bb83db7d12e0b8606f9d5c228287471e48715d66c112ad52cc28bb6608c56ae65402d43979f24fd7af72649f87972a6da04729309f2e99db366e9ac75c47027c40d02883c8f4bb070e1803784770375f19b8025a2910c226fc0fe6f924bf531acee58abdbaa0ac30f45beee9b17ebdf586899b87360730255833c3bd95473a0df158867fe5b4201ed042f130a89757e9b42a8590aa4cd91703d60ba311ce3d20aae1ef847d255b2d644adc49e1d9dd600361726c72"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
