use super::{
    create_generators_helper,
    get_expected_signature,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURE,
    EXPECTED_SIGNATURES,
    EXPECTED_SIGNATURE_NO_HEADER,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFO,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng, SeedableRng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    #[allow(clippy::too_many_arguments)]
    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            generators,
            proof_messages.as_slice(),
            rng,
        )
        .unwrap_or_else(|_| {
            panic!("proof generation failed - {failure_debug_message}")
        });

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let proof = Proof {
        m_hat_list: vec![
            FiatShamirProof(Scalar::zero()),
            FiatShamirProof(Scalar::one()),
        ],
        ..Default::default()
    };

    assert_eq!(format!("{:?}", proof), "Proof { A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, B_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r1_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))], c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)) }");
    assert_eq!(format!("{}", proof), "Proof(A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, B_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r1^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ], c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000))");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert!(signature
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("verification failed"));

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        OsRng,
        "proof gen failed",
    );
    assert!(proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("proof verification failed"));

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert!(proof_deserialized
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .expect("roundtrip deserialized proof verification failed"));
}

#[test]
fn proof_size() {
    assert_eq!(272, get_proof_size(0));
    assert_eq!(304, get_proof_size(1));
    assert_eq!(336, get_proof_size(2));
    assert_eq!(368, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["84cc6a8e2dc808e3658ef8b24ed3f8d8f06c099b08106b0bd81717bfc82deb34c82a49395c49813b457b97b53888d6f6a4136eeb36db1d479d61685e4f59dfe02405ce4167b27949795c10b0a2091dd782163764580040af17e0faa818d6c159a16be43a3d823f9118771da10fccc1ac42bd5da13e25b8f3092817316d04d50ab2f14c4980f553d172713e9833066c7e54d36ede9e5503681a6dcd7a0e7b8391af27cca098dcf289492f5deb02682aad02173b2dc476c6f6ae9f4829650e2c68c39f13ce617ec4090e248e3b1fcbbca55384702269420c8ebde25a57317219c30867cca606938e0841cd11a79310d52e5645fa6b87680ce4527172fd837e635c56f00e6477f9be776dc54ccdedcae6ba6e9c9ed4aa0b733aedaae5dca7923cf115d6595a00e788184ce9f8e781e183c840696120113d3df55446aeccd6828aabf1fb714d69c65f400308390decc9cbe110430e1e5b1bb1158403ac746e1cf9d1bc9d6a6f1b34b918d2e4f5bda5d1b706716267fe5b38d6dad7c8dc45a0c30f44f309bdf3276efd3dd39cae9fb62ccaf61072579ecd3e67e99a09c039cefbcf9ffc4f5bf29a721f827f49e1cf5d478c506f6b6fc6354318cad8105e4032212858a16a7d87322b7eee71c89b91e24342a4", "818fd2abb118d617a835c9880cb8ca207d61775e728e282526d3363636605552808bc4f10afd40cba9a6c5d8ed801eda88f47143b13c57908e33873d414e0a9cdf8629206471332f94775c25fda72490c5c6e1394f7255049a7ddf684a2fb7e8b10d87f124c05b2aa00caab7f6f22c3b1dd3da64f4524d1f1e6261eb94093b70bc21a2cb0f17601b707467c13270c8e43ebfd4cb01d9141dd0063ed0a0aa8d01b3fb58358639fdd71bdcf03930c78e085db262d36fb7d664070a3142606f18ef22ad4fb2d67d672b5eaa05a7e72f870d4b6944467a2e44014ac2d44cf18ad824f52db69651737dcdc176f35d5a36b52342266762f3587a4d5f22e80a380b27ac9e89a18206477ade87838e522d7acdac49def267eb2575b58af008d27763a06a888f7ce3fd902058161ba008b790e37f08e8f65b383bbe562a63c1b7744f0241b289ee313991507963aa86fe1b1a3f6403c4153113d3ecc79fc669ce07f9bb0e0bfda48460e7fa7fd281336359c37ef60e9742418ea0114d653e57685e73f21a840e2a9dd7f3855473e925b1871f62bd5338a21e638eb59c8eabd09e8e3335d035fe318cd4c0d8f08f0cb6ded94e7c68", "8ab5f63adb1c5e433fbf7518aa43d4ea7eb6b4b08eedd271fbe3312d10b8d49ebe1bd48e32573d2de8a8e431a52ecb2da1e4aed4599e08dc266ac8022647682dc0c7355cbd6ff207c5ada49fad36ff40c2b7607a3e7a4e6ba412a471185a3152a44cfb08c706a4e080546b92e0ae49fddf15874ff1005f33eafbce4219430bf03bacc87ba41b46b724e93a1c249f9389528801e1b9195685d9254d80dcbe06637bafc7b780f9232d1417f2a00efd0d640fdfd702ad71a1ce82bb49784663124646133bbb2ad1f49287cdf4df9c1e70ea7098f223e8bb7484d124020c8944ddc507cf991198b31079dd76e5ba873fdca63e48c60a0028155066222bb7892b3668f0b6db456e07d6c46368067ee56d107013b0eda1385b18763ddd1feb56cd353fa9268344bf21bd5074bac77157e4166b4817291657111b81051aa022b0ecfdad4ffaf74ba73c9251122a85bc34c4932317903278f6a97ade645e7fd2820df7148532905165ec34d8fc12c2213875cd8f0524025f7f567aa518b7197df20e41418a7d34fe45da2abe4607ab0ca07a1895", "a5a99fa452762f5c07a70676ac384edde4008abead74b608035b551ce2fda23762b3c5ca99dde401ea06e079cf763a128f68b7ca6c6576add69aabc004cf4c37ceac5ca020026be2f836bc7edb32321c4d12faa9a1f4e304f4f1b06687b5ced58b3ae11eaa1c4066f007319200b31bce2166fdf44fdbea9aff1475a493796adb034d3c3ba250bfb037e5febb2671259f278f86b4a11f502b68da7052aae1181bafebc2ec09b8748d8259d8f4356df0c80a1eec6e0adc69d0b7e20e7065dec94127c6bcafddfc6e9a90b66433ab9635f429ab740c35b5ac2b63826763717e39a332f1b239c3824fd219138536545cd4710841d9f8e751a33e8d1e003215b7ff848eefbe51884bbd9221964c3bf2c084eb6cc22bf634e476262f0bed633058d07f868ce05816ff4b68d542d68ebf26beef65543bab918825c8b5026c326e623787864e4abc0758703131dbf3cea1fe106d52c67c8aac01d6fd65f2ddc4f1c9b17707ce737eac778838f50f361133620f6f", "8019d2ed788638de886cf3a3c013ca128eb084b5b033c08cd47e220a9e8bba8b6bd54a4d4e83d437a5a0f530baccdafa8182905d055b8bb96f00174f5101013895eb3b665f1af6fa3f74e68b1a3a3819edf4434f42a9a6cbb90dd183aba3096ba0176176e5ec2ebe77666d877472251af44a2636e4cbce838f19651e3479d640036b55ba0035d8ef8b228a82070c709f112c918025ce56429cd3baa5bcd49fc61157c61e4ec9cf5b0ca448fa83f2b0ff490dc73f7b13961b85d28c301a6905e962f514c940291d20e7b42eace262d0fa6cd9b16b50b67847fde706702d5d037193c42d0386df7710eff85c44a75193155069242fd40ebd7392347da30dc630c38f1d289a3d4ecce610921fb476f5ea825ea4a3c3950537953ae7dcf3d8f77a5b615d7f4d87b9b88095dc7ff2fcd05fdb6f5162b128e749f064c9664ea1fe1509d61538f08f40958234feb72f4ebc667b", "a3e272b5f50c270e68b735c57e58c5ed07ef290ad077848a2650f05ab956fce0da0e30e9d214bce101ded1940e7eb42dae392eb4e9c2f2dad64a991c3a6b5f364acc9380a8530968f09b4ef5bc85d031b7208ca16ea03e4646c2649d18d2d53596641e63c966d46e5d210675a8058024077b100cbcfc8692fed6e08bfb30f4dbb73271a6caee3ed45f987e76b9a95469336d61c66137915a79bae7398126ce786a59835950e3c1d435baf9efed9a6e4263832dc9bc087cbc153bfff2c811fed5d59eec58903168f05bf213415e8d5bf64a4d85324fdbbff4400a2f960344318930c72bf2c8bb93f34953d60d9a1d88200e6636bfbcad847e3838522bd19ea7b20c3b61655ef367459c2b574cf1d8d20a4f0789db084946a1ed5800b447c2578931d623e0cb22ef4281e9dd5cd565e01c"],
        ["adab7d2f34c22030a03568ae403771204b12cdc85661b6c4c351928a1d4d1b736eccb9f839dfe51fdb35859ace1eea51b16ef981ecb3987f6b02f300f486c8cb3780c832ed2ceea4a2d008f7c78b332776cfd077d613cf230f312b35787ad721a42ae97d4ec256744352495df97d5e63f136031e60fa627d728687bff004e22e237a152cd48ea5c91d2747b91adb37f36e0f50a29d25374be3ae63d392f66ae6f772d23dad00c278f816d1d1ae4a1c086d3564bdb8437a75a8188d04eac70860b289a775e2e8c8e571e4f65c03cb01c629abb4806b4dabdaafd9720ac52e5610dec92f3109a9fbf3f3872c77dcc8a0e50c807c4fa790e7b858d166ae4ba1d8b27fb7a18b5796330090cb220b8014dbfb002bf23f17d4fe26735170834fde5d55b620d58312504113dca0bde5578c12015a76a89617b09aa16f06de2af6e579f8a287f4125a9e5f2adca798f73af84a5059f587872f249dc75e15066b7a866c5245eb37cfb1863e9fffa9f00da42f90f065c5deb143b01eacd87a81b0cb20851de610cf00465b30ea7aa8c11a096754481f072effa51109a28d5a38fc92091ba14b9f4265ae77e8a170a26c582fbb2eb166f0d5e8701d79f7f7a1a3f16cc161f7a331c9c54d81dfd6a93952168de9f4ba", "a2fb7d973fee39f581fd292243e02175a60dafe246878f70d58c155aa966194ae0d92feae6f9ed6b366315679ade8f85a1941369e0a1aa58f15d71c5e1f780909e11005beea99653ef52b7f3e8a035c640141f4b8120e394ce051cfbfb6e6da8a3d85832b04a597948c81e656350bc533cbb6d9731ef74ce14ab58da015997693baecce20ea98ef930b9378e4ff9dcdb041cc372bb6e72e4f72f88495ee336233c529e489db1f7990660b2e766e9c1c512571cabd119b94c67f39d51e7e9b99bdffb658f0225e9a95e6f04bd2d21f13927159d5cc427b203094b2d8b98cd2d39bf8059702d9a3218fee48a74a2a9ad5165b7f77fa7f03f1142df951722028dd262a0bd1800d1778ff51d96d0bc8b31d820f315af19a72f67ca455c9ccc25987d7955daea0881d27664154e4c4366505f33288802c2a1458fef27eedb36d21fece954a91c89523c5694db2c7c1d5d36814a67b1ee299fb166099ffe8732246852adb9441d5ba5d3b8ab8405e4e57ccd0d399c6fd08a15576b9ace2702e15a71a96b37cf3f8143cafc5dd1c5e4dacd0299693743a9e2c8abc8ae643ee1625b3328e4e2483bb97874cbd0720102d3c94302", "871da79533de307e398a723e60eef97779c42c98552c02cd3e9fd2c32810f2d1838989e44a56e370ec52ab9a7339ff7895f01ead8722def28a7ca5d1c0dad83b7ed2cc61e1493e88d1a2beb36322d56db8215c4e462d4e628f95997525e513dea1f3052f73f12a771784183318a4254688b3021436a633dd5c24eb62d989e1de4bc52366b5ccea5b57156cf9fa31038d0dbf76ba0e9789316f19555c3be6f9fc16fabcd7171469939ec7b52e739b32033a8ee03c933bb33a788f83436f4c3a403b2488b0c0ffc0455966eb12e43125f0541b9520a18205733a3ad3fbeeb01e54acecfdb87a04eea71cae30d1981470f76b0d59d0b8ff291288bdd51a26d93c91a1af518db34809bf8c3456485092b5ae5cd94d70021acdaa631d424a1807b8092fdf3af8d03100cb5c51140742f74a0945c7380f5bf3a504f56a8f48b37470afde1f72d13728b79d5f7e2a38bb7ac5c12d2fcfc79190a74f4d4e5777267d7b0f663b5a4eeeff6608a58d21d8c3515a2166629b6b9e050fb39c3b1dadb17c16aa8cc2d45eec5707a26bea3ffaa6fab111", "a8da86c1cfe6f41e8653b212c317de529b80b4c6e593e2a7683219ce2622b09597b7771c798f4052375668a042d7e6f180bcfec281f5f0775d99d72654e8ca7ecb1b56400d92153c8d2f234fc42369863a809e371cca0fcc1012243fca605583b1c5b39088aae2d80623179bbbec333da13690521f5b3061e3901f6b822584168f988dec855d2b23aa33c884e4b124bb471cacb9babb29628877a89ab89e9384cfd7b6c0071fd86f782375efcb13971e09577f766ecfc86df3ca527892efbea43dcd438b3df924d360e9ec3e7a179f1039b4138e908dbc560857a4a0c129de9d1150746fcf6d19a225e1573d89cd9fbe5ef389209193568446e54aabeb706fd24c4437a0d3687663395cecdc11872de009e50f83ab984845ea70b8508b2d25b4bdbd8db16ddc98b8edf8fda333d77c243a9b017a081bc06bfaa7405af7c5dc1a8018688dff71fbd1a7686e05aef34673417b63e4736ec392f6632c7784c1ff08404c9af7648deee2725b0d4b06504cee", "8e4a6cdb0f8473b0bbde29492d1f0c954ace3be33bf9bb5aecb439de967e72df6e4ad30303023cc918c5ae5760be820984541e786a5c8a0a4cc4d7cff4d80f7a7787e8f37244b7c4bac853ada1014de164129271c6c1fe52da36f35157a47d6ca9f65cea62549523c011c2de75d7503c54d1660087b407362826ada36a51d8e67dc0ea5f9a65fca218fa3dc9e8c63c4405779019d1d84fc5e00836c098044ee3150d3969f7e0d4372cb42393d1baba4815ea3a570b6a821d62b2e9ae6a5cb1a30d2faf3dd75600a70e800803849933ec63e44d0c73c91112d3e0fb1574e23d36d198c0b804656320a50e9e7e6d2e725b05d91daca57503829d6d43781065d6c7984c6e243532ba4751b79aec5c4bad7e420b1b47fb29a95c6e4d6ffb9cd9f06f886b3c78798632603efafd7d1a3ed72e69ae7506ab240a696ac591c4ad3b541591c119457fdb8601acb1d133795dccc3", "b8d4fa3386e94366bec6632fc317ba6430e26a7beff982b25dcbc19c33e07126db057c9915884cad616606d6fe8aec2b8dc00de96db65367d8272b88bbe67714b0fff8cca4ff99506dec56491909e7f02edce9076f3e65aec66f6e0246b69ebaade16420c6f46737009f0d680a0ddbf3b835d378329d1b4010b423fd7f2a6dd5c88585bf511b541da4b48c9856638e335c15440b013b8c5055ff7e1825de673fdf37b243bc84b307fd00bd63632a816857338168ee5ff7c490b672822e18a06f18a281133df38cf784fa1efad63aa9b423a6e859499560995642ded35eccc00f6ca59623199d8957bc1f48bb36e9b4cc488faaadbd0cafe138786b68a3616fb0f899e44e2d9b6d49df1d7d37418bbf084bb03a465840555b764762d09bffef5607a5793d15aff54f2a46c55a165d9232"],
        ["b58c1fc7c7630b961e929ee50e0634db10a92889537afb8dc6e803ceb6537b446886da2b783926192289eddf044aa39496202a8020f8ec0052607d1cbf8be997838dc2c7cbe6282ec3c90ba991926b055a00ce33ee58b8ac21ef687efcf0290e9282e66965cde77dc9d22bcbb4585c76a911c447bbc3390d8f75bb112ddbe797ca745b37afc9d9bc0f255f62f57b8cc158df06d4c26aa8ab0b413011cab9d0009343a139ae0252783b91e54a344f15166b5bce56efcae707f37d8b06fcece5b004c0d1df7c88a0c92d0194863241c0c9373ca81cd58144e9561cbebb042f6d1db37379dad4dbdca398bbe58db3b501b566ae879a0edb55e47b609a8f401c01ac0066b08842e45e6a7331439243ae6ae72d4fb2b5bd1475ffaf90d3f5e02e461d6a0010a789b5ec97dc7127993ceea00f515f2ed1b581474a15ff0f271a6bfafff523b0ea72a831749f3acb2d6188a44203af76ec76f9ecb65c6c022df7f83fcef3ab07f84cb61c82a6aea08e6ee651e70e315da7cb016dd081efd397f349e787b8d6ae0b017a54ebbdb847a8016592c11baf3f5249556e65f0878a920f0ff7661559d3f1430d45b01878eb631439c4844e25c0e5a7af18b2e6933443302bdcc2cd297939f47a3b1b52b130c5199ec38d", "8952f5172d6bd492df6616fecef628f15b69a547742291c85c3e8a7f8a4dbc1f5d555c3ad28494ced61639634a237c6f87b2a76a55d3196d6c41abe5cf1732d959fd0ecd3f793983bc5be009cd794d340ad39643cfea086dcfa14db3d2d978668659e0454354c1dfe302b73938f480e27a299a64eea183173427e3513667b2e6d147b8b989067475638e4221a9340ec43501c6e62bd76436d838018db724f25e5f70853c889a46da67cf1f27f31e6e7935de8da976dd9181d4e3d60e9a520c940912d22ffa919feba7dd80cc3796665453416aee9cf4c4f531f2207cdd45fd63f0b37d023e2f11597f46ed3d92f3f3852f30a2bf411a296779236e9493f0df0d3670ab881d2a8d2055dfa45dc4492c6f687dadb851513c8e383a2a3739e8f3d77095f1580b486a38a1f73f871f467a522ca6ba47d7bbc5d6ba497a2d9e388a011f22ce297a9fcc1b6742b2d9f795d4445f59067b668ec158e1cb2e5279500b4372311a7c4c4a74a4e9c28d57dab7c26b175e55597c5b8e28410d2a8c7355f68b1d2bcb1e7831c8936f4c99f107f8c2772e9cbeb860a8dfd831f22c18f48acb37515f5e92bedeb0e6c93bcc8e997dff12", "a293c2fa37d47e616644f003ab5dd657212df6d4be199d06339864ce34d462e6cd2d14b83967274879715ece7cccec2581c184bb32455f223f18c89e2b5cacd9eb1704712d245d9eea439b06172fe9e1cffa05237a10f2b0550a0710ab2ba709b08292d1eed6082612e269eb7bfbf9b8c2b3195bbae43828f84d03671fdde8844e6f58336eb1c6737d979b35a9875655093f4d57b667b195e0141cbdc7c2fdddba181b8daaf31d8c6c8a928e9dedba3c726c1a842c85fdc1bbe0566e32d638cdc2f3e1d466367d756504037f22ed8b605c092a7cfe638b39dd2d0e4b2272d98cf94277821d90725e338eb0b718bc00ca711e1d9e5206b1efdfbdd71a5eecc2d4b402067f579415891f3660fa57761c824a6ed7bb0b0d851cf48830fa1169326fbd42bfad8b926921e1f44d21f8ebf1756d892977f1a3a301a6b151be708e5daece75d6cd665f10c47dd5f784e360b6dc0b1e2bb4752d24fad499e6eccc30ad85774df03919e206656c718748cde9d0f35b27dc7cadb31256cf96a3ac7aae0b07b16b19e838a8c8b13dcdc48bac526aab", "ac6504841ef85e8baedc94c68bce32c5847bf066041bb24fc6846f6fd3414d602b3951a9fbf3b29164a0b96d0fd649c080a8911f54d8f77dc2418f30afece1e37a409dd44457373b27ad6d6a80f5b0e6e2047cb18f667da0af2468017190f084b12e560707358c3aa8497c413b905b931ff1c888bd849f96c12211f47153352688451443c5045efef338de8092f1301e49a1c4caf7c895b22547fd58905e5150cced44c2db0f96f641357432afa0d66c725a67674da2388fd97a6129824ee866f16bde1d5a3a32bbc4168947abaec948020138c09ad2d1b4019a8d9227520cdd37944767c009ae3c8eae4caaffcb798b194a47100b1fe1a1edaababd673e23f3e38b4e866e667e90cde64eac38431a6834faf08eaf28252d4f71c1faed3d1166451af887e6f28e1ce1e48144d19cf14c65b600aff53c13ac27e13d05db64c937e5f26f313530bbb78aa14e0ef6314d521b3b2802cdef51133c4b072217a1f4ff29d196b1f1cfcd81622ab9ed980357b7", "8934644b4424758a9c2f684a8c6fe8cc171cfe272fe5864b8930c4ea09be2164a07c60f7a10db198a4cca4883e57fe5ca4d16abe135497a9c15d1fdfaa56d91d1cdc8f050a04a8e0755106411f487f59462d4861333de2fa0aaf36b8037962b3839f0107e099e49a8cdca6b89862e371bc101c3d7edb7a5caf6dfc388cdf11dabf2c260a0118bcf9e10dcd24c83d442b3377ab33a36dea1424d6eb6b8e93541dbafa9ef6bc2827575677afb6f8837fc847ca1ecf4b7e2b43d6898ebe9eb010bfa419c047cefadfc16ecf1ff24665ea0e09b212da347a9ad19f4f84f1563a4b4ba7e3e95940774635726b39ec1266754f3f3d42f2177583f98bbf85913d52c7cad7c5f20c473c732fd7c58ab5c126ec5349839c5e33cb96c7c0a994c082dd2b432a073f5976f4e55ae6414be8be693c812cb8303119f5971c817ecca568a72707b1d92508d23477b525a770663c06ce08", "959bcd3f8e5a3315865baeb17c189471d44fa98669626d791e1d451f140d286504310ef729838ebd7d5fcdf38cc3b26682473fc4a41ac79cfe585f1c49e61bc9330aee4c11b1a8b6d37f8d56ed3fce6716f1f800d0d02b08cdabb2665a93f2a7afb7f4868c78cafc252316eb422bb6266e28a18325a092f1fa9caaae3c43a51f09cef92665226171dbf007baaf23f31a4441edbd2190830b71959a29d9de7d7045b124e08ef8f5551d833cc2f48b34bd1e124a4c90d1c2ff8f8f7d043f676df2ba10ee9320766e4cecc2a567340cd4c1676694e8a09141fb99a576e27bd46d5cc9e7d0c8995fc3fc29c424bbffa393230f7d6c2f754967652fc50d9dcc5044ce0aa3e1e4f62253e50f220c36ab58e3f7121dff303e1d2727125ea22212af7338030ca44a35b1d108dd0c5627651287b8"],
        ["8fa700508d8dc1d1209d93a8e7c3f4e0beade9170e9728a7873c9d1dce0026f4f6e5e0e9bee81817fbfeb52201ef322da6656847ef059fb43f5cc4b4acd0eca0e955546ba51a9c7270e03ae8723f5b9190979c1e8a8fb96f055793295ceaa5aaa3a09adf7f2c81c5d93c078cf78fb177fae31d17d15085e2ea693f6e246d89ab5887442decc4e74c68aeb3ed04ef80500e7cef3f794ecea9917fc46b8f489d2c0bcdf968b995ed35b6f6cd7ca50d07c12b257e16a86cf5a8c16037a87beee042d7d17b24b4a7076755bf1c62556bd6b2625ec903c2a934330525c1fdfa7c4363c84544344e7bbe35b07858b089a6c9460f0f35f65ccf27cab9118f635feab35df4400c198e7b75bf49133dd2be40232d1c7908c7ad8bea3e6a912758f77d282f78691c531e2043f979080b4bca61b1576f320ee3b4b121baf4232873f9caae087538db3f474d4409692e291128b1fd8a49b07b7a28ff7c79dc46da971b61918708372462c6114f4f6306b6c2e2debed54053ce11cda15b7dde4550e0daf131bf048a68b6f65e877de7e018813921a2e52c2e537cdf384042da35bc6a08e303e7ee143e644e2dfe565de687e9023c9d4533d76e92364abdd2e4be43bd457d03fb374580031851e164137574f99647ce0a", "8bcb6f042bcf22aff791510c33705ea1f87ac4f38c6be6523fa1918b7a7012f87a31a21f06ba37955f12386a84628da68f286b95f746dfc346e86fb8a8ed41ec534cc7d3fd541f8982c70950b0e974e03435490ed2c67c5434f997ca1a74c72d816a52b5577cc75e49b59013c722b7286e1bc2f929a1b9984841a88e824801ac81d18609f0fcde1217338d5681aa40b56aad273d82de529c40ea0c83757e400d23bb6386495c10abd1e36b40c5a913176fd0eedf835fe717b3f252765d2c6e15ccacaaa515445009b5aff241e5ec43aa6b695216c6238827d2278ce997de65ee888e92862306fda74aefe326ad805a58732677ca965306891b074af4a5996562005fe218a93ed910b1c32c27a7725343011234b4a297b4935f38aaf98daba791ee6fd3f28f81dffb6ba527123164c7312f4f3f93208d822ce2d3d98ea1214cc2296ab002d7e1ea3731f5e974ce54d4b84f3b4ecd73bf5ae1501209cc5b780f9705621105f41a23ccaa41bfc7fe0ec4ed27c02c88af6695fbad2cb62588d60ffce26476b3337a767796266bd334d1800600dec61416b838bc9c0968050393bd1239caf26090e2a560577441c2cd6e2887", "894b4ebb44cdf471633c44b436501b05dc7daff43e3f944c9b37214fa878b7fa3baae9cb0c3c4c5ba6d10e55a8687fa5a26fea3274c964ea474acdc7f758c9065fa729d6547de3711255adf58e0b376a1836328d9ff119dda1e1bc53d85f628daec4ab28511959d297b1397210d894b5a8500080ee0c0d99899aa3f4db6a409d24bf443a66abbe4a185780cc60a285e03344c1aae6d614a11f08857d3f5462256757ec0e45e74e174ac9f19278b8198c37de2759f7856679ebbf1d73c65aeef5f2917642fcba3755b30335ed885fe7c465ff7846e86f7c0dc96e4b2932974b075e725997782a9dfa0f2aeee56178c6490142253d0848c4f3caa5aa4a45a89c75071028a9f786d37241f5213add9fb38746d49407a3d1e8d7087c3e6f4c02e8e98eea78d942c06193e77fe5b851d28b026c65198e4fad613eb86a8a406f7306cab6ba269467e4652cd862c4f1ad77458203e06152dd96721f47a9610533dd5f9a15e43a2397982454738d07fdda9010712e51557afc2d6014e6223888e271e360d03bb8e9dce87ad124b2641928690940", "b1114bdc636d5ba44d41f1bf8e19f26969478a6b7464549b631b19556e0b8f4ae75504b70e383da1404880946c4b565593df13fa804ff702308d8fe9a5e6e6750371703a94f929983fdca762e3427be74da59f47faabe94d4a6ea0934333d926a0fa2ad44c69c8c6033c57e635346a7fe39ba8941c6ee48cdc6ba8713bdd3b45573878a3909577b5227d54f5d9aa10735bca6037e82d666d153575d25e2fa7457ceaea80277b857fb95383d2953886bc2d147247ec00df5213e094b602af1cfbf0132c0b544c25451d5959413ad67d9f49dfb2385830fb37612af5258a1680846c0f94999d7da4da56ab4467506235632477e0137df743775c017c85206053ecec887d92647a9487b65be363ad0242291e5e9271490026efaedffd9f9f1a53fa339228695ac327c15076482fabb93ce7271888ae3639f8ef5f99eb8f50f680b52b2b9df3d8f82e4ce6b536ea5f3f879c2135230cfc23b34bb30bfc7333cdde3247dc046e60da3d945a50658c08af5b4d", "b42698b13e438abbc2eb2a868358b19f80b2219f848f2d2f798f3267e1ce5ba0c00a549f639ee9fc1227a1c3c726782da8034acb126c1a9d641db9d1855055b218aee84e979fe4dde8e1469c6ab8844a715087d778cf2ebdbda78b1c6d009e6fa03d25ddfdaa90fdf92941965204fa25bc9faf45b98a2d897e1eb5a69979951d3b06fe1a97839653a94bfe53576ed3091ae879ea058f5243e6e9e81d62f98e463abc97e57454b582b26f774b9dc0333207af7159fff6c5d2f331756c6825d86a9d878b2dff0276d6c842b0b599a7d22705b9964bfcb7d3d922bc888f79a4b7103adbc58328804a4092435e5ce80d5a496e125521c463b0aa751a5306bd5f1503ca18d144919761951b7b0bb8e68eb42069df08b6e13ea16b080e4f4d314748cfc3671a8bc851f62e067891cbf2a630731cf561541dcc7383ca158316f822b8213d26f9af53cf1f503f0cb2beeaf14e4f", "b6b48885fa9350b91a861b7f23fe20a86558c964be29bff2c9fd92b7b8fd707084062ce8996148308b9cdce409052499aee1e2c92bfbae2f6847faf936f358baa181b9523c880a4e96614ff29c52250183c5f91856f490f3ff1a5d2cc5c67fe0b3bf5423f03b53aed813f1a71ef3901a0b0a97b3c292eda239bb24e55232dfaf81bb1358c311e60dc887410b1617c95f038cdee7d4c2718ff14dd98697555af0bf116c46e4ae324c5c1028666c5c78ae5dfe1b7d21601a954c047d099fd49659a7d8f84de21e151ae129f219e6e468ff267f9178452886a30f8effda89ff17d05a1dedc0f8aae74f811edf409bb19178674416f2e677a81d774e358d9f2c4bb8ac249aa99a064e3fdcee61a4822f48c4602b634e081b1dcfdb2ec6dcbc85dca8fe691c721052d88a3bf2c5f87a6ad2fc"],
        ["a5bcfaafccd0811f19f9de18d35dbc0a06c25118d9bd372e25a8b44581e819a72d3ea190b451daaf589c6ee71c4258128e0e860e6eb0a66907a7724c856528bc34621b43da015bde58d75a3290086b44443108af92c207f197daf8c09859f7d2b9728447c6d114a5f90b9695fffb366f55e0424c1d7a197a292b62ae73dbcf69c034dfc5f997caf86bb30d437d13d4b61b137df9c114229704adc0584876278fe7dd946bea41f4b9190baae7e34ec4624a3229900ef298934b6e4b7ecc56b59373c2bd38e1cd516b9a84dbbc128acc3528d2afb590e238fe506389ec179201e3f5cbad9cf3a6a4a0767e1e46b0c3491a45d52aac8b02a4f9e0d24f822b863e1f57d8c1de72b1db1e0408a1c5ad46c1ee0c22cf93bd8a3941b385aac658f464202cd3435a875bfdf8ec52548bc7a46bf250cb39fe1782fd1e8b109f96737f5591dec7a1f1f628ce88e49325b53b68a2be6af562f0d34622f4df591c93814bd351c75eb3d729a784c399968d751dcb60bd5c4e7189d97696e422f9031811dd69a7d3c6fec6f6f10a323a6696a0f72d45d327a1b7d81218b72ee57158a4f88bacbb81b61c5a117d2b8d7776b3034f5df36d4c53a2d54fe0dac456b863194ddc7036444a4748b33175e05b392e3f282cf8d6", "a4265ad1243fd87fc8f573a83983238c6ec8f8e7a8e24985a06b6b304607adb6c2e9de9788af3afbc17beb268e6e86628bbfc2a62d95fd1e43b6442207556e0cb606baffe39752a4ce17168a28195c6e7b39c7264da28190de7f9085f5a54bad8825672b22b47292fbccafc408427379d9284e0236aab085d6d04ca7d393d5a78b16f7ec4bc63b2445f3a614d540dded378df0c14d36e68f7c616c4a1ad8bdbaffc6f3067b7195d934014bef4ea64cc7447416633f9f8baf9a47b65df0472dc74c5b502879ed2408a76f5e99dacbb3d20520e1a3d5008b530afdf499cf9763efdb01b3a749b3a9f166b80c2c1654ec211772c36fbc374f12a63cd5cfb5fee32de3053d83e66008ea711bbd070b80a64149d06f3f0e185b32ccd73f78a19de907c5eac13e1978b70ee2768e06e352f23b6f00dd3bbb56d14c9261ccdd025e01d4daffde3970efad3f51a1957a2fd65a2645c05d0f979a7787a5fdf4f6025c13b724093055a165ba5a8cdec0701e71717a4746697f6f584b1064b63bf5309443e88644efa0bf4e5e472d386c4a6709f18141aeb116e8733f7349c8201589688f2d147b01cdefed509705094620f6c33b08", "ad3bdc47d639ea1baf8d047e47694ae79a710f6d04eb6bfc2807321664cc694f524203606998cd3e110bf6ab134640da92399c4b042ded1968d6f1337d872b4853446df8ff72517bc18521138c1a4db45bf16183653fbcf6f851681864f582e4895124eadcffe9fcc592737975529ee436d11a2337c5cd9618fe009064e3fc7369219aa835598ac563d034bacc62ef3671a864159b2afbf2b5bfeb2afc743a57c7714c3bfbd30afb2269afd5dadd00ca273f96faa6db1f3db7aa3b5b4ae18fd47573439669d906e2dc000f781f4a67920b62e81c3e31191a44e9157c5a20d658bc866967c71ec14bb14b5c4a95beab376adc051c436bb8ee3c5e0aa03fce90e08ba9ad275e7caad0ec3865f073cd6ac8503d319a75db7bcfad869a610ee1863a55dc00931b5fff356791a7d0f1ff095b02f3794d8174f996ac93000a6187575d2e3c6eec7dbd505e34e7c794281733f236a6e11b077499877da13b7848cc6cdb95580ae736283631f51df5a9781ed209237f4af0f0f8739d007cd3211a391c7c10f9bd1297dd08114723cca31a050149", "b2dd2c0fb1b7a5a6bd77f6af3a22a98bb10751bd063637a69b5b52b6e78f6b9d07be70bf7d79e2d77e20e877b1895f93833edb023a55e65f07e8ffbabcd2bc2e4f7b86fbe1a4c8df83e16ac18bdb0d3895f3643a24e6f5701d451978ddc3b863a06116d74b1d793a72b2ea298beaa20863be313015ac3db35d9abc558c15dbfa8a93c06bbcb6193742c5668681ffc1e566cb4d3db341e2700d26d610127b48df7343b4689aad7f0ab8f10b9ffcb7d17f581b77483caceeb2140e636c6a9747cbf443bc5d4279e0c67fcab99a7b4c912c61ca5e902dd9ce6bbb5c9eb4b0f9f71987a45afc81e61464fa2a4de0b5de98ed4b6d58593a4db81b80687fccc9387b914d1042dc7d857fdfc5686ff6b77c0e8b39cd70717795256db2f22e138045bfc3f9318bca15da9d1fe5b186d61a0f0bf8426b0d3e99f37f133230bdd17679fa96dce1b6db9cf6f3228b517ee73199d2a34873a53d1dd7c1a060f9d73e6797ee6197fc4b0d5d009cb7514ca3c4839db373", "ae80a4469831e9a111675b6b91605c01008a8d52292b84c33a78ffdd77da0ab5b8fab69767b2fc9e8ca103ed2ccea376a2c30d1d19cf274aa67da45e0ee35596ffb8f38798c4d35cddb75ddf770726407aaa2b2de09e76d164c9bfb383810c1db9e38e9d3e735d5def7b92731ee405f6e6b0011ea8d7a8cd86a5c278f6598d437768a36eaa8c6471cc6454df3f16b1242a5464eb073f130a6c947e8ad90fa2e4ca2a740c068ae3c3381134ab884642f16c990385b718bf1f91879c1bad106cf84213b809c7e20cd4f831619d0d6f3c8955cbf0277f7378f74865ca1d2794f5df6c816c74ece526b7e0cb9c6f1c5d8d3e71ed10f8d2ebe1501411f31974646e3d35acbe26cfe9941e9319b75601a03c4e036987c85b9f75745c5c1730fc621cfae0223eec1df43dd1562094daeb6311ee414a8a329492c3662fe56ecb718e85cab59bf3c0c50f913a8bfd689dc59a9ea6", "923bfc9dd2b7c68dff504038d0e1121e154257037d1508c5a3b7521c0ae32bb4c100174bd2cefcfd01570801b3361851aa5a5199f578d6ff3bf595b4238e7fe146278ef14f36eb20d0a34fef903ec2c7867ae1dec9ba609fcbb8299ea0973dfe84aff82fbbca1acc2b0f22fcb4bb120b17c77b6d4e9d68c1801acfe8f302845d2f2627dab21e02a6f1e2a4642e04f5ba6265284c7e1f9a9cecfe0a6110a65c343cc22361db62b67d371487363ef7398e35161b6dd5792960c2d77b1c5da4cd950a6d27d7d7d909e6f02a4c93534540d61e45f0c145336b40df39f739abfc3edeadf78aa0c65547d75c3681c1767af13e50e623d888e364ccad97dfdd4f5c07fc1a45af1c104e654a7733e51c33ef9947106e0f8f14ee130951e58a6ddce19437f84e2aeb31183989f3fa5625f3a8c83a"],
        ["b6ce8586d67cd1966dc531f5e641f8c04eb3bce488b4fc0af34529a944b5900c93e2828e26d94249257fdd2ab54622e3908e0b43275a1788c37bcf75ab9148e280f13e2f5b5ed58523f8959c31ec3e1acfe19621967a71b39950c6317ec2e2658feffa9b7f0538b40d69c2bca334b90eb11fe7ce14170219e88142dcca86344deb3dd31069b0d69433b8deeae0ab2eab3ca69368d278a1f6bdf8b377eadaf968c04f27b6f85b4befbc1941e550db882f6694a1e72563499e1dcc6bebb2ff9eac4856ab7755faeb6507f1a6cdb2c230e7386ee440923df7d5a4bd595037c712447b0ad94a527a7dadc27115e57ef863480ca976d8069a7bcb6e10614389372802ad3a5292bfb7808e718c6d1987de50961c4b483d8fd9bfbec9963e250de9260fc714bc0c1b48e11a7596076dedfe3472221574be57362f4a6a4e076aa68b01214d2c4747d94fbc885bfd9b15b2f3fad4595bca7ba4bbe52a34c48a681c261690e3c7385600ccd0074adf197bcf6c17f2040e7933df843019496a60ae7d2c87ffc33607b26964a929b7a081645d9c62e455c3ecee411fa6946de8503452baf2bbebb951cd93f6b8c532e8908066aaea0a490a532dc11dd5f64217534f373025c8abc66a01c88034e4210ad9338a40103a", "8ebe172f1d1b01db022981111649b95dd98264521551065dfdaacdb5998d667732dd6e2360404900eb41d8a02652910ea90a2e6a50d869c562c590adce53b3a35be46538da04d1c67e2a059012a1efbb4861f067da99170e68d5478bc11a665d84a41278d02812c03a74a5ae333f9583d52cd65aa514bd4d7a1796229d6154cf1ddd88f6607082059ccfed486b69d8fc704f8a1c7ef74bd2c05fdf5f0bb6fc0ee5d4c2e1c61726314e939b5daf2bca255dac4bab0324e21753409c83ea2e145c68799ed52b872cb5c00cb42ca99120631e37f84a940861f2d2be71392a0262d681d4523ffb0d96713a0118a7d3964d910f774cd1c78822880c6ebf7d33907ff0085b4f21c33ba2f2d5e2f2e0f65d12514ce476b58804e5a392252beafc1f45d15ef46dd2c1d9eba48723ab4863d0a5b23dd6fe21a5f1dc5f02d276b851c143028a0e04d03b7504b274347762fba87d9d081fcee8b6a3fca413e5137bb13715b846c9f3f61af86ccf47cf95bab728a8fb269e888e56c1aba72f37cb42a27e1c77ca829ce2bcc0d23d1c33d0c680477e722807e101444e7612e6b3599de2ff2cab5a21ca836f6ac30670c6102923696743", "94b61e88d8393d2cdea2cf737bc83130112b34fcad71a5afe70c86616cc89bbbf6546d062b02237aee45a9816776bc03a9c5b6e8bb5da3600da92d4fadea3c4d67799438c4cff0cdee1c65777d87a46fca42a575b80b4f69a31361b335ff445e88450ab8a651d3133aa9036c4a681dd909c9f92e6ee2d8679ac6c95454986ac4a6f360bf225aebb1168f439c6ed2964c288d77bb1f726a9151a59814bbf1928db88ed6b7dda85c8cf22f58f77070f927587df7384435626ee42bfc177999c76c9d003afda6668d52b00c16852d2fe7975611de0070c64710920549157a71bb3e86b4bd2e246cbb81999eef0a1b50b0b92e3e390efeda595489caae24a0609b748e67805d390dc65cde1feaa508813af26ae176567c69e4c00caaf6171e619c6c73ea78142d1343f841afa2b42b7efcd602b967ea6d5fd3eaf925b3e976daf00206f3f2fcec7dc957495b6672736e6bbf256729b23ab7433250f15682e782a7f96024411ed65ddeba6637df2e895b863c66d20f7059f2b3e835bc9a0a08a1c0f631071de60a2a9d5de1c415d9d349ce16", "976d23f889c794c7d0ebfa1ef1619452f0647e05d16a8f6f226013c45518699e9216c8c81012962cf4a10cd1857427dfa2c3866692918d4bda8a6dedd81a4f67f3aa9a83537e35bd56299db259277c2fdec5fc37dd3786c5f5bc2546e527f044939487b3513770837c65a4fb912573ba0ed60d668b81cf771903d10b75ba3d88eacf012987c787d80eefc86aad1927354f3479c787870bfe5bf5ab8c6761339756cdf512e670b23313e807486b7da62c0e2cfe1e604f01c8223821ef9a9edf7c5937dbf6b2047771c08cef412c4457bb6a5940253b2cf732c3d8f4162b68d1578eeae5025ff676ffdfcb652c0f9ef1c50bcd9870f02ab82431236e7ce4da23a61daeae91cf498a691ef36284c3515acf482f45898914c91ec4a4a437221e7c24174c0e5451b474d33642e665a18d7aca2c1856931cd9a18be80175bdaf9058b3ad3b85fd5280324b4616f764a6d7c6e80a72e9b283b8e4287a641ffe72af39f368688aafa1fcaf4b2caadbe4216606ae", "b04f4f3db20962e06efe52f3a2677adeddb6f6ff57c50bbc3d0f6d2a1c2619e75156c5e9d9fb97cde479734472e41078b957a327c4154f2b7fbf2d0b2323187a64e0907112fea71dcb17cdf55a7644612cd4fdaaa22b5c18b638784e3679446d8c791a56d483dd80669ba78a75429802bddaf7d69afe1a742944722cea514ae669e5a16e63360c976d5df546fc260c3b619b2dd09fcf33e5566f124d2f8b6a16dc9d0efa979704f8b0b6123513a26fa9402b0adacb88f22ff7ee782af3a4a359da3dcc887dc8dc4f59b6cdddb5ff6fee63a3b1b9a99e20fb7282d7687fa882853545d4786e6900f747854fdea457b58f4b86fff6b0d3c2f9eb8c7366d7e12e875ba5face728fd36737e21d0df6833846351654db16a2f94eeed9c3152d7dd21fc030d4e7083e0a28eb4a4642356a6fb867ccac8ac9d7c928e049ed91367abd50c910a4efc90218906b8a343e01b39778", "a03590ecccb0677c62526bbd14503b5ba69f36ef49eca3b87f3a702c61139cd27104c29c66c2d4069f14887ee608dc35805f6fb7800c87b75fac83dca801b67858edba3a58e4b6294b197cfd2a69f9df12d5f1a5bc896d4cb44fab2de32a4be1b6b89be090e8e9da2114de4d772b83366f393b451a39289192cb2be1b9c17ddd3420b17fb979865158f55b36ab701f8a461c0a9ddc4d8dbec002a16fa91ca6ba61b087838a964f555b2a19a4618fee0711c664be4aec4fc7b2ab94c04cfa44d6f23f3b13e780a4673c9c3797fde34e96119c7d13e8f5e210e2b8ff0aa9152c0450616b4646d6cdc3cf02487cd3b539c332e1cfef2f9ef38bb6b1f3f2d4ea915543ae555d6c33f0e961d4df1f4ccb65ee10a6c3a1b63cbc05e9c6d9dc6767633d7775955cbe233d5c5a33585a1181181a"],
        ["a384e899bc0a507c74b2e9695deb20bf87e34806c2293e24bf0276f569976deb41cc011e56776c1da5f33fa9ef7c5a56a48b6512334bb6d07e18522af664261b0d5b868bfc15e204d9d54851324d3d38aa050244ca0be980fa6f8b6683a409aa8da47da9a4f57c7175a3639bd9bd1d538511a4eae0a0650169d84e32b2d356ca0b0c7c441ec0c97cc8641c174ed341de0f3a0c89c91d3153bdb76253d3d1b97fa8da5b9cdc2d87d6f4088dbc1fd1d12d599d2f600753c3047156f05141dc346329e0af869d20502719105168cbe001c528032d08aa1a73e4a4fcde0323299eb702de74f43a13e60b6da7e4e41f77364c678ead91bfca40fe0256a455443f402ba0d08943697ed8fee9f63608028ae8746b9644e3eb51d78ff48ab43d705c446fc3d8485e9475e8443774a6bf51cf3ce26f9d05bee4763a992fa91bef5357b61fcb0bb5532fdcec81a74d9c64ed6ec9ef057254af7e94d7f7c851f38bb3a5f96c8fd2742bb1c2048cc3a1632b66e8951d6a3353bfe0c11741c9797f6bf156fff8e23928d5431d1542e157929f65ac34e429fbcd5236ea90534290c9070272c33e41d5a0a4dc91de2a356e2b1e7401ef39302bcdd738997c5768df9f43f8473000941de479e3e35d796ff45170e54a1f30", "89d282d4a14e343310c0cf4b698555c49f6fd8101649a869113ea02839dcd271584059639313c4a7639321fc1a65ec2eb935ef3967920cc11739a0c6054609c3d2ebc88ed9bbab5a9287c9351b2b11ae499886be5ab03716fe1d6c5a82cac6fa8fbcf6f5bae1f9a2650f302be29ab956873cf155e0250d54293efdf19212503fd274c9fcdad1dc0af655b8a92778cc0324ac6d7353f46bf5a74352d2581d07639c2cc0220d5827c4dbeb445e69b96f6d6c181b688d4054dd564aa28ef53d25881f0fec23ea7f39fca352315262b193235334730128266621768d951af0e287fd3226bbb9d45b5f58bb172f689ae0a64754109972780180418aac0435504eb836b0e65d7368f750a24919900a89e21197416e329144571d2faf6dbc98c31b85662a8c769dc8ec95328edc4e8b89f02db430dafbde782d0bc8fd0838ca07290789fd69fe7450311ca457da9753e6f24be601d6eac80cb8e271dd1359f5e25ab1a832a09f5ad3b070e4cf728ff296f45ab602a6bb31ac91b0acdfaa9f15b48b15a0c6a5947ec6f9a667012b60e68a9d86490bf752fa80b4aad48a5ba0e9c0102d4f4944867d3dae4c22ce0ceb41b247e864", "9730f79822440d10f4e5329772564034c07c7d6bcbfa2936b405945c7fab76102eef4e9159d2f2e6130153a9782b7affb5af6d8ab787e85662e1545bb0ae877d97eab990c92505e37aec03cab1beb702c22ed53cd373282e3f2e509befabc2f2a51c79b87fe6fedf113c084d716e5ca1fc1ad4d2c030c1dc3f5699731fe531888fbecc2f53a012f08319ae7a6ec17508721e3e453c7899d680a7b6bcc293c3070f615724f3b24cb0824d72961397f7e573d064e4610eeb974270dacceae774ad7314f5f8a03372219419ded63a2a912556731be6f9eaf84469442df2bc5a8514de40bf66cb2f71e15c77fab0e249ca6460ed7f5e18667353e6b14be1ded945e65b6c92c8315479649d15be7bcc43ce44627fab9c46aeb8114f877205f2a5e2278e021e67c81ad55b9eb0c3b33bb116a266a634bdd0c3ba979777449dec47ad110937fc54f6a0aab2b915adba4b77d2c237fc0acd6552e51a01ef27c5b8c62eb57fa37be01ad7aef565eb2e8b176e53854ce36546f40b1675714a60c34fcedfdf6a565fb237a0e793ca91f0bad5d92ee8", "b43d0d5c763c7993e7f967c910d05fe9dc851534819ac49ab035d700f7f56e01115d63b91639f8a62e24147e96effa1db2e6c7892b40e8f7802878304ee40dcc5abd4e91980f286edeb704a2cbdf83b740f88f17778864c56085ae84e0b518cea69295573e88bf7e86bc7693a3ce610bf43a7f1bcbb998341bfd05a458a4013cbd3f3623700c2164e56111772c0f08db2bb038d7e4594b6d8ef8a69a2e347ab18061639dd2e85bc950b1cbd3cecea4453558c9c7909c1b5b0becd0e9157eb44d214c21d4ac78ee5985a13892447422e007ed69523eedf4bbdd3d24ceb1a9de2b031872e91f2988028ae809fc5b80dd301566f3205aff00572d4a1ca773ac3440a1f8f0a4e811a2be04acd77ab8ceb76b259ccaeb72f35427f3f88224ee00fabe22b71c5a38012e43d5e1a464af2de4f0582412b8c44d91f1cae35eae848a2927f06d1fb65f87bb78ba6432b50985ebfb1365ca042cf3b3e417d10872481e849f1ae6bbed6579309ebd2145d0aaa915a6", "8a0737d43c92b818ea52d9ead8421219cda745c027768d6327165b3c6c0784ab096817af186f7f8a075e95b95fae755098ece7fad2de0c64130ddf2b9e7edbf03b9c6e40c2a7168f1922ced8127a4e6a86ced67eddd90d15a956c501fe3b9754a7aa9432efe72418e3f5ee077b923113f0f7cce64303d04719272a5ac403b9aacec569de2f0556a8920f285b287906756fd972ad04573f364f76f49faffe822614c5941e4db0cfa43d6e0e510f90d9f9464f5a3323c99a109b1425a1494bfecb8e35fc8d98ca02fc825586de31a350b119ea2f6f0f16465539d454d2dc5762032575f29b48696616cf832062d1c9dcf50826221be8086d95f0f7b9b439684535e75dfe41a869713effe942a3348b2a9b29402b50496f06ceaf9266d2bf102c4ea323b50c7e6006a49dd10743c6e54f6b6a8fcece89826d7465fb0ef4b11aefce1ac9e7d86864d342aa506f375f8d2992", "a44da4b55b456eb66b326f9aa96de480ba91b2fdac4ce14d5235c2cb2b5580e6db4781b7f95ac4450329f67d66bbb715a82545c36da1af2a68e39dc9c3b94c87409b667cc3477de3def4c521d0a5f6869583c56646fe8f2d9122dac34a7130338d9ccfae0fe6b92337059212d1d04c3de56ce0c15926357caa327a622c7530cef802f10370d5df6ca55edf1ba9fa29112a41914e98a87ad0632cac87a31561b23e823b95fc78846e43908423ec558ee365030f5eeb5423580e1222e85aeb1a43f1bf73eb3dfda4a7c467921d956d745349aba255dfb7c59e91b7650bbc15f532ceb1997302627485f828678786b9f97b5059dfd1f4a25dc95bc4134b90a3bb23cca01c52709d80c9bfbba684f2185efb2df1ff387f4693b27669cba81c307f73251b73563a44e816221297e50cadd87c"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFOS[i])
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = get_expected_signature(EXPECTED_SIGNATURES[i]);
        assert!(signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                &generators,
                &messages
            )
            .unwrap());

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_msgs
                )
                .expect("proof verification failed"));
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test no header and no presentation header proof
#[test]
fn no_presentation_header_proof() {
    let mut rng = MockRng::from_seed([1u8; 16]);

    let pk = PublicKey::from(
        &SecretKey::new(TEST_KEY_GEN_IKM, TEST_KEY_INFO)
            .expect("secret key generation failed"),
    );

    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proof_with_header =  ["a09d674eb3da7a4000a37c3ef802c6b74fd2e961dbea3b575ef30d4fcd5f90ed5f3f56d9bc15c5996cf84b64ae6ee853b347ed43c839e2ed1b4a4b3c89f8bb162190a92994d9e271022b6ac3cc5c35c7d568609178091415e0e855423ae1dfcdaa792fd110eaf7aa63c9da1af9e030231c14816d2cbdee13dd4a887c221ae5fd4985b64fa9a3f2b1dfe7ecbb06e9edbc6626dac179b1fadcbe9f7d806041d479faafec51db258ef022638da3fee5127f2f9d5bb6f2d77d0462a0c1bf36e0a3d42b0dd5082e9b79e95e5bb6bb0dcb19aa29f69ebab48af4c0d7a7a44342f3cdf8e28d0466de7ca2ff13d67bae060001580e2d20053cb6b619b4ab0f671bf40c5885844d583098dd5e00dac2eb391f340a5ddd0a74a3bc5bce6a16e45ed6ca62769462adf5e24eb7d05da00d2c3b756273442397cda80b487432a1084cdce02224541d4e68203f7b1213161c0cf271f89109cda7804f9d077f507dc0e954201d491e1478cf77b93cdb1bf80f1e9494498d4657dda869730314a2270505ba702d3a1076333de37be30d98a30504a40532b11f191cbfbd4a0161e673479dfbc80ae7cae00cfabde87b1cd84960dd565a13fa001908a7104aa5c693751a11d73342b47a274c09e4e71a9e7e914ea8b4e9a95b", "b8c387b83f915de336807166b044cb8a9ae282d14c5657d7634d16f0e1a7f7fa5ed4c8e9cd35283eb70aaf857adf2b5ab5924d2cf7c3ec4740c524863ec530f01f8270f99f261ba854dff9450a14e9abecf56f505354de9eda998ff4d0edb82786b328d5d0aa6adf75921b914f1310ec8a5b1ae3e04b389973d54f969171a32efd7d64730d2d20b796b60e5ae08bb3a56a4953387e03c074577e3fecb5cf3604ff702d7000cd43621412ace47d54081e67d3b5b2e750ff0accd90efccd00841f3df70676b31e8bb9786b5fea2f886cbd10444403b770ad5c2bb29529613dbddf8042c5a3ecddb586d6aa4fb0288834cb334125b4627c094551c7456c140fe5feb4b0171fd9660a87cbf3c7561d43199137a0902146de030ca9f5a1727dcf46c0d60ef31f390b4374540b51bd9b356fa52e6bafe54913ea73f929eb7840062c57b4a89572482ce8677c2bdfd7542a6c486995ea4d7241c2e02a751ac6d1420e6c47709cc7e63d2f20c3a62eac1407b45a23b9fb74a33eae4ec5ca57e19bc755cff806f009d59b0c6a51955f63642eb49b0b27711f8d94c68871cc04203c7a382b2b1095aee088ef3ee61eed3c31393381", "8930b04d7b0c7c87f8f24457130624cfe359bddd8929bc6e7c7d5939047c2ccafaeb65fe1d22bfa3e6de4e26693f475da32f95c77bdb88a659c7657def2068ba2e053aecd47c9d430ac1ffd726962bf1d8ba5100846c75564b1513a1585ef2cca32603edeb780a700d41ee39a164784cb34108e0701e8b5cca88984fb695d0425161cf6bb6a0abca8ad9250b1b5866cb176612a0d8e0824dcd9d4e65aadf1ab50e4b828e88e5593f04256f0019bc9fa01a53d38e195cc11e4f15de6432a375888da01216efeaf8c4d2e9dfb20dfafaf4268f6d0e19a0567cd174c07242187d18d4fbc5bc40737b14cbd1f86c5e66c8ec43db36953fbc1ffc511ac5e0dba2d4af8acf0c75436b969bdde647a31a74d81419a5e89114f88c2f3300c5126dcc9786fee675b42cd13302994292afe3d1696a462128483894877cecb5ddaa8b8f4150e60f1af1e9a634beb7bb9a5c9532883b07ff959caa963fceb6423f6903052bcd3a0a68566069e0042b1d3583682cd8635eef3ceed9a586b10b77d01ad8671800773698919ee156db2c952e00e86de70a", "88cd0240c217805ff5142695206f3cfe026314cd5dce2b49631c370f705fb43c7959fc5985de48f998f4dae853e7f567a3edcc657b1ad49567b8e5cbbc17e469697184e53426bf19035d61262a16cf21479d72225adf8df2aa10fc9f345472908dee762fea8d22088119135dc105e28a66aca7ed1866cde2530b81feb27a13a37f85e92095c1ab33aca0b9b325e106434ba94af763efc92d4f304107abbf51b454b42bf062e12ccc3c9fe5a1111782e10e2a75b39e00a189b7242c47056facec155cc4c23a463f2a9c9eae0f8bda4f5c05a9dd22e5c014238c32f43ec032b869e25f7806f8418c099cd68bdd06e8b22d204c4cb36cc01602519a682c473aaf580a789630b8f022164354235fb54d99be59c7713e7dd20e63abbc42b42e7f04a96e8242150e7d515c41f91e4e81336c9948bbb96299623b331d4feef11adc18a4f784e4179b567e138c6081097ddef1b60dcdc5f070ea0010ac7cff9e35cf102b03f9f5504077c1bf42fc5bc6954bf5fa", "8221691c7862ee41b104dee49d61dfbfc646859dd41c823b8590ef045653e25bef7b6b982dcd4819f1a308297aa09f29b054a0b72cacbf4bf75cc532aad25884dbc3413c2ea6f91adda3f0a8ae5a37bf635f2e5636d9f21952d0fc9e83121ae3a4ef3a01e7af7eadc4826aed480a36bb7b4bf3e93982a4b151aca19981beacd89849060622aa8015a11316c5eb479cb02673f7e15e13dcbab59a613b3540deb6b06fbae3cc72fd9890a4eb8b5796d67c5dcace041f22d07f1a61c728bf375bef49d3c67d28b906cab00a5cb0a48db5956dded33b4445cb41e132b82b4d7c3d5866c4388e3fe63fbfec2e535cb68ee2b12564bb2135b3e9f0edbee1db28e808b49f914641a21654bb3299faff8ebab71d33b23bf29335d091a7143bc5a70a2240f7c1fba72deeff6f9a63c32295722bc206b90cf38332897bcded95a5ac55cfc23a9747e1b2e1601bf180079187ccadac", "969c5fc8e24bfd1d0ad264094ef67857197b0103ce523d3216862b034b9217b9d89f21ebc6d3cfbef1d9d771a0c69834ad6617e8f297685baafa9768b15a3196d9e308ddefa4784189eaed04fd9ef22b3c2c72de4e92d905b52eb4774ebd9ed2a5d3fc35c726abf149acfaac74fa22e3a8627ffc459f50922df9775a984001370c0924ff827c3de1e615624979ccc88056c5e248f004c80e4c0645fc411216ca8b41b8d8c425f8075620e3755a8f65a34f4c41ed2b154a7c9c60b4ee63fe32f59c0d1fd68ee8171a6bddd6280cd73fba2ac544f434a330b2cf25779512c91a0e88bebcf91f64ea42ae915ebd0da7005f03c254fbd742565202f2312945877028fd456e80050853aba4bc3b495cdeaa02691fb6cb4ce13f382c29e0a005773ea69bd9d896acc17eb61c8755defb0e0fbd"];
    let expected_proof_no_header = ["a11f444909625f9611e063d8cd2dbaf0226a707b02515306cbd55a03c992e557bab4aea2b63d96a7abd904ff03dd4351a98ee3ee5dc521faf3bf8b1ac513d32ccd4fcfc7d386d32c684f4f992570d4d102bfee5cdd56846b923e7d61149c794086fb9ef9d6386e91bf7d993a1ce188deb70ba7744332d22a1681821f3a9c6d0507ce1b15f843fd893b146f0bd700a80b7312cecbe9317c4bf13a98550b0227d4c6c870989d719bf439accf235b7ffe2142cf50f12a2c1630e0ba617dcdd67cb0b5705e47d06876bc23f2e297422b78a7146ed1393f0dbd9292eceba8268cafc1d105a4600e1ff500b2462eba327704742dc6f89fb146fc18cd78c602ad65115929ab0792195e0cc99a24215e3ea1b18e4f57b4fd6f5616e7c6f795b257970e4fdfeca8295edd66f32b306033039c2e273c6997b9f88faad12236b457da4d9c4f2519158cdddfff196b6b679e2f6ea2a2365f373b685bbb150e619b4c5c268fdf5f87c020ca88486e8a5ddbcce0c642b24df902fda2e588db14755f3b51bcab988a176dac27b6cece59a0a0102615abbb6f9d0f07ce149203bbd6f2172f5ffd87a3e5d6d3348f3209d0f9432b9f7573092339e3b254edf7a482db4a192b35f006c913c93c51547e84679ecb519b5174c8", "88e593f3deca9ea392fa6e3617d92dd4ac62753584a64a7182ffff0149fc84d01bfc8d60d4422515f72da9a8bfef666b818a4a0b75c0473b25addf1ee40ff09552f4bf77ef0484eb1ab91e791f087a296fa8ea6ae6233e55c2621096b57f77eda6dfbcd806abecba0fda8f77d4c929412065912886f2332896056e295306e3d331ed272ed6eb55d42bdf5e3c9bb030a14b5e0ccb0470d1196f923b371dbdb47585c14ff7018ce2009d8df82407a10d0f24091b678e9e0891435927b390c4cf9765d0b6209a316a4462444317a0e8fddd360d0671d2749eb4ecb48fa58635ba781ad9478d57514e7495679f26cc5cb736035e535b8949cf5799cf769782ad13629e27aad3187d3bac6acaaad8c16d1fb6065fbf89b7f8e9938e7f2d28a28c4115443a68747cad951be4f9a72c83a51fa20f1de6b6eec87efe6cd5e2a1250cdc8f0099fa66ff632cc33c0ec942acc17a504814f2c6d5299cba80049d7fef3bc007130e1632c60deb12293a100a0b40a7f66615eaa9e8499bbacbcde470661154aa046ae8f9cff50b5849e827558c360c3c6bdc3a9144dfbf96d6e9a700d40b4ba5d11c3824e382a10d583b9c2da205cd2c", "ab4025fd19fb90cf5a0431341877bc502a3dfaf72d75a47b49f0afab675de50be72b9e5658b6e12ffb445fa2b405bfadae82240acd78f62581df98d808a9761af13256b39926261c4a1a94c91e334628752edad78a3d702a6c292bf512f7edd5843157ac0bc19ba7c6756bd2ea229a65b2153bac68b1382948519f3e7d22ef30329d8bc354746cd08a6628237b1952445065a693b4d0a33e80e7c0eb7ccac5721e40751bac2696cf907ce4d7a8f0d02e3bf940f02a2a4567d4243a824ce6b4c5c148d05083010511212267d969b0ab97240f8c337907b4873381549bde9fb4d1df514b79c91614fdaafc8c45e135074f3013724c807a71ade697906c6f0f97ec8a8bd1401f928ff7433b54f2076111e12f81b4bc2e8fa197799ae191dc4537ab6d8f8a04dd0bc1f68eda9aa3edb592ce68cb96bff2af0d74e9c9e477dc1240cd5cd7afbeab8875c9ccd4b51e9f9f64192a46f497aded4878a265381cb0f5ff0f2fa5e5eb39867cc010876cf9c51c2dbc70cda84e395d49e5631c6d0a39381db5e4577fb6e33ebf168bb37642eecf4265", "a838daf2edb2250d5c5e1ef47fd63a2aeec9aff75029604136e05e3a7560014024491d975fec9355b2b4295276a210a280fdf09d508f0df81795272dd9c7512384be977aebdca976b7587022568a4ddadf47ebe0141163993133fdd9a34c522687f3e3524e0968cd2c4a6848895d6a2ee92a31efc2a1bdbda606f6cc50ac8b6426e74bc27e6673f24c2127e9eba70fde07b6dee97f52107c11a9a9f7d952a73275c911fb8fa07dba8c4a12b2bc9e2ed759f8b516972084769b223d5d9f5bc32c351f8999b33d118e8bf5f02aad337294671357faddfe61073aaea4f5f692586b64f3be3668f3815dc8fe3b924e91f1cf3f396bb8fa3799a461f4e4787292c8935d59a56ae7cff3494f94f3e6ef3f1de122695a2b78fd86cd3655c1ad3e5ca13bb59cec41379daa9d86999864fdc5f2c963bdbee10f5a72fc6f34d84e20b0d6571652244e0e22c7c49877727862585c1a6bcd0c15454bb05df3619f0164e2e5886da4988b86b041eac495ac86939bbeab", "a2a87f7afa42b50521fff7824b166447438cdda9e2c275db27f1b666af6ed84c3fc92708094d828b0b3e57ce14d3ec24b78e6a812454c2e642537e95e01a07cde787012ba33dea3a096728c4f9d0bfac12195cdf068c60250971583aa232ca3ab2ecce0d37cf65af627c956505be0be199693ddf36c3f2c3fecee108543f187885b42846130b0303df0d15ddc4dadab8426be5e750f17d3c894edf6958fe334110a3a20552cecdcd143a23016b1a04083b2299b4db258d1b696c0e62ea21a78956eab4e7a448e10a1a72f1521b6fa873734de63e40b82bd147524ef452159cc81551a98e77c0551fb46eff55de9c790c18fae21fbefcce95c2b1e609d946365fc228a34e7fc4033384ffd1b329a0c2bc1e84f7958a5e68087c6bb07f6ea8d4b409c191e38ade75e58ed7a621a319929628496f835770378cf6d45b9279894401f5c22cd0af6b8b9b0f1416248e932b4e", "aba68e8716cab82c3217ca36269eed66076dd2ba250d78b633df1822e0526b4f1e78f5ade12dbf03f5d115514d3a671ca7aaa4232b15d64e6122ab405d273843971cf4c446a992fbafa10838da4f92571c0caa6a46e96a302546a83f81d5b21681784b424d6da41b4e6edfd69140236d29d8f294cd828f81c64c55b9c5a5680544853b15cc057df2ac27c2e976db4f706e454e78bce89c126e183c10dc2d256895ffaaa565a3230c83c43f6bb465f8aa67bd9608f281d79e77b69425bbb7f1dd753685070beca730a927c7de7b2f89592101fbd102634ada5fad60d63e92ac63c8a895026f77a2903a97b6859e570d793b17d70c734ba100b9d5eb6e8bc88d3669b833d83eb02db83d53082bf92a1679363af6317e59e0501fa10c1c34aed5164bf214e921c6d5b8988e11f04cf929c8"];

    let mut proof_messages: Vec<ProofMessage> =
        messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

    let signature_with_header = get_expected_signature(EXPECTED_SIGNATURE);
    assert!(signature_with_header
        .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            Some(TEST_HEADER),
            &generators,
            &messages
        )
        .unwrap());

    let mut proof_values_with_header: Vec<String> = Vec::new();
    let mut proof_values_no_header: Vec<String> = Vec::new();
    for i in 0..proof_messages.len() {
        let signature_no_header =
            get_expected_signature(EXPECTED_SIGNATURE_NO_HEADER);
        assert!(signature_no_header
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                &generators,
                &messages
            )
            .unwrap());

        let mut revealed_messages = BTreeMap::new();
        for (j, proof_msg) in proof_messages.iter().take(i).enumerate() {
            revealed_messages.insert(j, proof_msg.get_message());
        }

        // Proof with header but no presentation header
        let proof_with_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_with_header,
            Some(TEST_HEADER),
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_with_header.to_octets(),
            hex::decode(expected_proof_with_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_with_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                Some(TEST_HEADER),
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        // Proof with no header and no presentation header
        let proof_no_header = Proof::new_with_rng::<
            _,
            _,
            _,
            Bls12381Shake256CipherSuiteParameter,
        >(
            &pk,
            &signature_no_header,
            None::<&[u8]>,
            None,
            &generators,
            &proof_messages,
            &mut rng,
        )
        .expect("proof generation failed");

        assert_eq!(
            proof_no_header.to_octets(),
            hex::decode(expected_proof_no_header[i])
                .expect("expected proof decoding failed")
        );
        assert!(proof_no_header
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                None::<&[u8]>,
                None,
                &mut generators,
                &revealed_messages
            )
            .unwrap());

        proof_values_with_header
            .push(hex::encode(proof_with_header.to_octets()));
        proof_values_no_header.push(hex::encode(proof_no_header.to_octets()));

        proof_messages[i] = ProofMessage::Revealed(messages[i]);
    }
    // println!("proof values with header = {:?}", proof_values_with_header);
    // println!("proof values with no header = {:?}", proof_values_no_header);
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            OsRng,
            failure_debug_message,
        );
        assert!(proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .unwrap_or_else(|_| panic!(
                "proof verification failed - {failure_debug_message}"
            )));

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                OsRng,
                failure_debug_message,
            );
            assert!(proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof verification failed - {failure_debug_message}, \
                     revealed indices {revealed_indices:#?}"
                )));
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages;
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert!(proof_all_revealed_messages
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages_same_but_shuffled_indices
        )
        .expect("proof-verification should not fail"));
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert!(!proof
        .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.public_key,
            header,
            ph,
            &mut generators,
            &revealed_messages
        )
        .unwrap_or_else(|_| panic!("proof verification failed ")));

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert!(
            !proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .unwrap_or_else(|_| panic!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r1_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        r1_hat,
        r3_hat,
        m_hat_list: m_hat_list.clone(),
        c,
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_bar.to_affine().to_compressed().as_ref(),
        b_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r1_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
        c.0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_bar = G1Projective::random(&mut OsRng);
    let b_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r1_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_bar: a_bar,
        B_bar: b_bar,
        D: d,
        e_hat,
        r1_hat,
        r3_hat,
        m_hat_list,
        c,
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
