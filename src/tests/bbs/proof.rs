use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::memory_cached_generator::MemoryCachedGenerators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_g1_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::{
            generator::Generators,
            types::{Message, ProofMessage},
        },
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R, G>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &G,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
        G: Generators,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<
            T,
            R,
            G,
            Bls12381Shake256CipherSuiteParameter,
        >(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let mut generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let mut generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["8f0d037fced7e72d359e7b757e8f41e2adaad987257b642c7200bfbc6841971b0b8b50f77c36107304b3be2b9ad5042086cd4a06db4b8656e18d5d6b389bd34399de2d7142ac6400cfa859d0e8e2d68999a88f52ea946bb71374c44fd8aff690a43573a16e17ccf07a3f027bec114c825773b67089dd4f85a743ebf8ab86947b547094eddcda5772036adebde94e1de1490dbc20586d073c8665b434b45d9f71ac4dd0761b61e109525f9889d5b95be83d1ae2344daa1518099cb226280685d891b9101996169fcf675c26969725b9386a6bcef991772cf99db70ecbcf2bfb58b606072573f22e14f821de042b3aeea3575601b9bd13d050f1e04d0e28f781df522add48e9a38652d5680763a8b4bb65358283e8f4e477cdb8f0b7ddd25e5dc34349a1d4bd30290283c951672223c80f60d8c1f79e4c5a82654b276a532f109640a15e700656a178b4e2255670b54c6961d857df13269a939ae0ce6454b7284d30c19ec9c135ccff9f16088627cdfc8d39c8615868f5bdd1aefc6b7b039724ef846c267a205b3e687bb1c121a6a1f98761973e7f198dde5afbd270c1207f9dd63aa77ed373aee2792ab5b02779612d5100414a459bcbbb7f858c50d8e8c7582f2c688848d7dfd9f8ea692bc94ec2afca578ff2d16b68c725d46a5027830b26be6950dcfc6eb64ed95bd96b2ac7793542", "b017a0a1e9deca469e4d5ea11f0895fc55e29d24047a923b736f7fc88849e8adcae21f03635a073ae53cdd65fe040fa48aab28ee286faec267fd04690d384895a6cab65f96d5061bd6678809122d1059c52ff479a946294c5e404145f14af0f98e54e0f97288dd5f02a263b986498d1a8378736a5b939dfcc533260240fcf74525c27160909e7c9d182b567d405044c83f8b409074b5103b83f82bee866db675f6d5fc21daab2a729da3fd00e50d40435e0b2c5629a1b4befd363cc091caf24f6b1f5250b32c8618506731d96c63cd8a0058c6300a33f6cde1e6202ec3d039c6873b6413426a81b066d0d0c668e437180bd92e683809b7d7d1aa9bddc68f04982e003a1b502a278f505114dfb2f043a72fb2453b88c162eb98a2ed26b009f4bea2a346b03ad5fb79cc6db286ca78268e1c63c1d5ee7f42f9802cef08bb8cfa2d298e8edc90400ad71e5fb5ee72ab1c36335edb113d08b2ce60c456f4b747eedc2fa838aa0b2e3cc96d1fbbe5b33b25c327d8592c0678fab919450bcb741ea57639541e752b2808ceb2596a44938d7c954703ef831e069bf91620d6a3cc2ee3833bd0e0316ad19d0709626f3a7c8088764c4be3533a0c7490515dea56e81aa646126b7f22c17abea86791a06b1e4b94aa", "82446fb5bf55ef0d3e12ce7e97d03a59bac32b45331d3c814ba3441093246ec4f99c618cd8cbd661a093f1c52fdd86e3b9d8f5029e76a4e74ac63b0035bd6ea8a3c7dc73e9c14ec1a1d73d0fc940395338d1172f8d008016c4c74acc66716cbfa57fc7958b92a2b2a45a175ab6d0094993ee9396c00d8670010a8e5cbbc869b2715d3139f31c474e31415a41efbf135305a945567604655fdc3138d369904b20226171f40a22dcb4ee574b922785cb16461d1942d9de41dac53c427f35e2ec782b53ffc09b6daada96474242bba7bebd3aaa54b0d4d336c1ee5eaaa80cbf1b9f19794155fb39e5c97abe7995c75b611745a62de8216872109544a34e8c02ae27baae0b5ddfbbb7cea811e8a5238f19a7709a39a8a580ba3a6bfec4908b710f6b202da616d71aa3309b7e2fa3f2d0c58f6e578d0663cb58375db900ca5817c5a075e52222c16456063688d456f03bc8ad2fdd5c465708d0c45568feeb14438adc5c36de36eb2f470ca62f8837f9fd0b616a743ba46d35d6aa96033c531e863330254496020eb9040abb197db724e3174532b5c5b30f59cc66c6d82ac4959b730684ad8a4e66e13808777843659ce80ea2", "86ee33c7e5a2b1cec11f9a2debe9f101a11f6f9f36765c821dcdc215c816c7e5257f69e2029b333ed664bc694aee5c18870c39c0f91da98ee490248938ab45c91343eadc4dfd5c82854eecc928e06eb1ea2501fd34889efc4d864daa264d399b9305ce9571900536689d082b331c93b4778bf3e47c1807f87c8089da5bfc40ecf67f0963d9a2fd14729711e561f0b5c916c59fe98a20eac7c59100c2460c8cde99c615f861a4851ac8be2fc68bb0963c48f09a84b2847752074947ecfb2cf8680e9e8127b7548e9427446114276ee476598f0aba6dd687882c2fa8747df271021847228286977b545e9affe4d65ba87a67451b20370cf868717b05edf1dbcde7646a7d252d9ecbd2fd28085a15b36ccb6cb00ab8967e1bab80602cb8ebc21ea17ac2d9aeb883c549e826e0e64e4c123d12144f915864f9c792ba82ee0ea867f9e6ab042eba7b301649ee9d032e17f4b91f358067f4278e0e95c42566e79635bf343101054eec252562dc9836757c10993cc4ffbae1716f181707149e6e3f8860ac8bdd99be2fdbb081716b01afd0b710", "b28101ceef47a3262a7f1b5e89ab21f7e45bc0ae3bb649478749a3e0de6f618295dd99a94b6ce51ded722e2026acf8e0b7dfb68397b7c297c716a8eda1ce4054e47cee3621f85758d0c440c51c941da472ca998267a8851404ccf85fd4b8e18bad9be78a3dd80af0bbfa587613adb7958a874d4c525426fd782ef2a9078834cd6d620f3ec1f5a26958da56edbc157059063c9dfc2d3e335dc14e407db97c931bb66f79f7413852f8aaecea13454ad3064423157d14d99554d334cd199eaa6e624757fe4cb525a6816e119d17e93263d76d227d80cd340302ca2050b85aac814251359938850deb03d9b05ffcf1b8209f5bb2c6df098353625578c0f864860ce22572986fb6ec63cd090e17505d2740ec02587da0b3dc2190659bd1e79eb7140b9152662940b52c957fe92d54bc17f24b120c84b9181b4caad7557fb96ed8a95416cd17147f32bcba56e088f534bbe48e156e177afedff78189c60860b592ce7c633310a2d523cded231f1a2612ce239f", "b55c1a8b25686554c319da04c995c91964b09dc8ee15283d1f79cf7a22f84f302688b6fcdb495320c9dd85b65f36543285594fd74e11eb1924f8d9d187fad293362397f727620b78bc10065fc67453ea5a8a6d76ec2a607db8313a46055dd2a1ab6aaed70ca8932d25df64bff25f352d127964a459928c489fc05aa3898c66fa86f737fe8fb982105512abc6ab404728036419420ca1f1ec70cd86e8ddc79704c002e3344d314c2ea3192d377fd465e7368e838b61271a708fea4b055c05b8eaeac9240a7090f6be8987ed1fa88274ed01f98f7f157d887e63483abd2f14031dc6ddc5e74a6218923222d31f5b0f0a645121030ae875a7584385608bc674a9d577a95e056c7e44df1f1446fd1adde0c46d85223a4c0a5021655813433bb17b6ee58bfb908813aac6fcc15aa311509bdc4cee9825fee260d6b8ffb41057f02fdd4781ee01dc0f08d623f79bc853ced8ac"],
        ["9819adf17bc52075d6adac02edace3213a763221cc18b573729284ff187b7a8d49642cc8e3ad63955ec34234bc3bac2497671d83d392feb4c1c890cae95c0a6a456507542ebf0a918f1ad4e1527c0cc667308a4ec1607b0f31bf03fbd3d94598b97b53967bbd86dafb153e0dd2cbe1a5fd09f7dcc41e45a206654a6682c5a53a2469a8138daec80c9d654633f5355e5d62a9c03494df741e4cb4d87f87c334cb14f78d14877cb7c2fd4103091ee5cafb3c2e103ab43cd19c61c7153165466b7b5e27db6a4e566c86c53df21a63fef6a02f72e93cc18f8bdabef618673bbbea2b4fa34efc9083b654620632fbce651c9f48d915970333bf0d812d13903da945e6ff2dbc4fa59540058e638a001ceaf43d4de3e708b55f742ad4a7986f9871b9aae260d5c49edb57c71931550dfe3a7fc1050a807bc967820f4f7959ecc455ec70e1e97cdbce795a1cb74d1b35b6caaf824fbe1c6c4b147708948473a454908e76fa245a236e3c4f0294f62b3ee99939c6633e786f95740a1a01b7bdcfc97b1e1467ab96f649bf77c72c902076795aa7d30e3945134f560201759c0a25b89fee46ffdfcc98996e707500b7180caac327aa394ebe3d95ccecc0a4f04cede2aaeb3a422fe1667c5fc4c113e998edde85f88e482a5b77b1ce57e6ad86ae3841605f1a9c11cdb5fdee704990b3146b76ed032b", "b349098d52988fcd83110daaaaeeb32718eb365f89e75703068ef2faa22bd118014656ad553cdf488d41dd7d031ba7f3ad31f95a319413d77ac9584fe95b64f10432da634723ba3d7cae4912522e4cf2a985113778bda6e67fc6623733dea69f8afdb41a78e7444824ef1b35a91ad3259adf6769319da9c19ec25959e182e978a1b881fac64000da121f0481a1de94de67e8b800d0b5d5cf9ef841874ad7cb710c5f18f2294b85fabb9b7aa71aeb929873b03cdf5893f76bf441df63c76c83201e1042e68e87f8b60d54a180f01450be6a51a26e2459ff01437fd8f64ab8247c1370777844194c46206ffe95f6edca7a01d60b40f29404f41986e37d3e9f7491bf8ca36ea2807a7a32bb19864eb8e073724d0314fb5d11319d56c93861f074a180524d376796b70f3199bcc5ef2617e72a4e918c6ac200d57fc16e6a16e473440a7b333f14a33108279e0264a6e00eef0ed5e2697e079a2b65ba94df9068a52a03ed509fe291deb7f5b939a22fcfc2eb3c27c5bbcfd7358649e0e5189e979a25ec71bb03afea8e416a4c1a8fc03b8d855c07a8886cc41c82b55187c1e407d004cafbaa123d8883f589a660088b6b8f7c016c9394123a3ae51cb99a51712b8ee24ae2ce793b31d26620ca6e2e3da3fb8b", "8ac207d95a3061f780bcbc39bcc06d8eaeb91d929d4b58a7477dc62f6bfb2e03f1345e981e6d4d02b1956f456ea8a36387a5e4872b3943a39e09f62bb491b309931c072f16d998eb5237cd5a964af266ef547de0d916e8312824f0ce273a307294abe3a533e1dc2ecb6692d01565e16bf2bcf079f3781c8c3abf03c8629673a94a543fbac4da0e8927e809d125cf78660acfa0053516372c8a505db852526afc38b27ab9f6f5191d28c1e48c2485573a3aaa49bab2ea7780de06048d38c25e73dcf776916a23cd411cf5ffd4e50a42ca10fced50135821d16fae0026d51557eb2b3904e89030317464405ca8b17150ee60797e55120531d3333e1a9a9e6744f1bb2fbfd6b2df2d0c0914f376560e31952e15a5d879da9539e90288683ea2b48ae6f8d7616607626016ca03e911e940a50711049b693a90bca966e591d24c4093a37fe2e2fae2f293e2de03040e869636455a9298cec2f9697f5cd24e8139a131fbd30343bbfdd6613383f18c0c8cee6e6732574b43b8f4ac241dadcc3d5a76eff3ebbc4d4c67ff42f1ec1b13edee07cb1b9a8aec4fe96e971a3d4011399074116e8f1b8616656b09172b0db5d1b0a950", "9181a5c2835ac70a33c473d7db7bdf8f7b39f6e740c457b83739ce473bd96491f01792a141d8d2527b256a2260176928a1fff59547db5d12d2a2dffab20e3c1ab5b8ea5b72962d53bcc854dcc81387fb65c4c80714b7f73e7c397ecb86039a36a9a3a48fabf9a001d48a61bd13a7da3e22bc8a9eb876b7eee6bc04a9f4c8ecfae32fc49df6d0e31b9f3747a4f1100c50459cbac7f4449d298ed6a71b2d766768337878bf4a660040e15058609070b3073346033985609c6bbc6fba3422ea99814877123afb33b71d661264911e31f16169c96c0592479145d4a07e619887bb5e4223ba35c49fa5629771814b909cade222bac66f26e95afff65b8e21ae5f3af68c9092cb8f5f3437f48c1ef82afb50ab4651644568b69d1ce42569bc957ce686eff057458cb7d6cf62d64d1da8a573e80bf5b40d3c7bf3fdb865fbde5fac561935e4ae1fafefca48929169c7b581a28403aaf882435e6218e51ccc19a0c3c43bab27b3b61d1822c6bf684677e63136f7731dc94466eff4018868da051f3e44e358a45ca186c21adc50327804b8acd7db", "b84bd960ba76bf5aa9cc0534eb16be417aa23102a09d4a1464afbee8928c70b5e10a6a20506a656c18227b74417b866090afb9f0490461b511c27e965166ac9a05360868603a22b7b9bd06b004ed6d20e44025e88df3b1309ecd007cdf3e303191aaa2f13e5daa43e84b07937110942986ddd5fe5856851ee91aaac8cf6a91e01fc41e8cec9982756a15fc7a5318259302585ddf5c0e7a477ae9a5960f91addccf37a51def282eff547accb3b4dc90ba0929088a37b118ef8370a2b78f9bddddd9703e9011a9aa7d0b62759c769b93883a8c951e66dc571caf0caa3aac5c1204b1c02b11b55bffb5f8ea4e23a705f605719fc278104cecfd8b445ded415219fc08607e153f4d5cee823d1017ad04273d296f0f7e3896351359a55cc96fa4cb1217f3458ba1065c2adf7f669c8c9a54371820432154718495b90d97bd97395e36dc473875ef83c522642b17a07a712c0d03569a5fd6e8a1dcef9ff1482e7fbaae7193a3838595052a9fc2ff209f574f45", "889963dd851b7e85c3b28fc834eff6280ca9a1981d7ec0b2ae55c65373ef4b2a1b0b0f4fb0d1529348d4ed4aedcdc65e85b4e0cf2db2e16cbc94858075a9386f4fb4bbf2a0f69a10669be0bca35b7df11111a9e56326c19423a432830a4d49508f8975cad531b7e2a3b5dce91de080f40dc1b3643974050ba1ea05b5f4507eda29151797abacc407200f98bf08325fed4d918c47799ae4db148d245fff1ae20c7a8eab08ea010a6561f4419320e608dc23f98d9b171a4fd6bcb466f4330f385d9d27dbef742be442274a0ecc24d870906d85e2770de4c54ae161d8207bed16851ec1cf23ed04255b802bdd0a58d770bf2b244e49b0ea498e896d134b02a19833d649883e0f653a12b5a2de2fe4b5eb0903a602834d94875ea89b5b03e4df94c86db8175347e986e276f522c12ac6860032565db2b0b384418a1ac0773986d20132decb9dc3316e5402a6d91e0aba0349"],
        ["ab4ee5f0888f6bf38a9da8736f2e10291cfab9afbb83becc1e4f47ac19e16a73d4d80ee4f188243869f8d203acb539e996885278d656b0b0b267c6f1d0f8759e96743699c06bd6fb24fbd59e2ac08a8e5e910ed7f9399b83bc8b5851d93a444bb0362c40305ddfaf3d83d284b24408dd0f6fac7dc86eb2c2e3fab09a8503c408370e2a87b3a386c04d0d4c58e11c71a15ae88e0536fc67f3d17a317ca230938f7df768a5e539c0acbab31a8fb4a5fa5a416b306571fcadde9bea7a8da2946a58a0be9ff679245541edf117783410421d21b1c22225eed1481e829c6af4e1b09923ae0d4fa562d2ed768badd181aba0bd3e47d468b54d5abb96f99fba8d07ae9e42e3fbf2f908bdbbd6b94d1bd704ba61376453cfcd195f4b0c06a8c3fa3b79b8779efe80901599c5b90d704a6da1ccd44d942c006c8aa2499bde38f34b400d051003a301ee0f7382dd9ec4c5e7d5a9cc089fc67480c7e5e682988a18c1be6b2cdd2302fbbf7587734701eb14e2920be90a5fda1c3bc8741864c1fbff55eceaa2191e34a75fbc73ce0db19ea859942cc7581f00a3531f2c3d80e70bf8432834b0bb496158e41d4a6926735142674c467b1915b75dd79fa00968d9fa29cd3366c9ce1fd78f1e3fd96caa04500baaf87f162334b8a99864773a46ac9b34f4e2efddc23455b3de376305098989c400fb9fc8", "b7f5b3ac0fa3b79d0571ef971d822d9c800c2ec081359e1806bc29b7fd143f7e36de577ef1d0d0c2f5cca7ef99ea7868ab0cd92e51af9db6f09e04f36f7277876d6e7e60d4f178fae2104ba5c3277180756af86e5add3ee86386a421145ca3f7884e4eff8c7665259fc095bf53a6650a15b01ebb72ae2b41625d64dbeb218fbf0a5da7a228cba19360513fec2d8b359569fb827f105e610ad5290467f6b3149d13896047b3acd2af8bbcd853c2140f3236ab7f85ed019729a8bcd687cb60a95519f7d975ac05b13b69c82fa7241700262942a49128f0537321fc86b7734031e942a129e567e07060fc1f6d8ca10490596b6d853a06a3041c491e06055ad71ab50be38d9f5fa1eca6ac2bf94d66e210ac3884a1296f3fabda32dd69fdad8ca2d489dca9033d29845752f08cb084c0c3d100c1b7ba255a132063375b1dd40f3762e2638be68ccacf48414acc1d32ed27b733e32756acca9bb8a72bbcc29d44dc754f545b56eb1ed9b6313ff1c08dc699f0256b14c56aeaeafc179a639679071091065f6228485a4759b41a8854177691275848a3ebc21cd45a3526f26f5ed2bde44e4a5cd4f1e2a1d330be45b061966ce910f2dac15b0a3a5aa308800dd5ed3d1fc08698ad96e2fbd65fc08cc860631521", "aae4ce8819f4753721086008e615bfe7e22b0649582fc79a2b479faa38e184a7b41745f02c27f6cb7891a2ab6c489306956e89af67bbabd6c94791a34d0a6f876414645fb36915c7e18f83bc51e7d50995b6cd22dbe8fb1c7897434717e0d2f897ab380406ad9b7b628a256873e20c07fb9077f75c9f2789bc3ff9f31e599b238f9e1e4542a56d46d29544d7724b3eac7219fb2e057fe21c26ec1ab5d6c556b476d3bcf5d0737c463317745aaa58fa2718d358398cfe331aadf92edf94f507fa7445e04c1ffb67611acc70539ee707484f220cf4cedd3cf4b7704fed7d62f7e4845b3a4fcf43813468023c3168b013bb1a3e48ae5b39daa1f2b749369bac0bb8fd79cc03d5493c08d109bc79bb01bdc82588577af9554a2c25356a3bcf20eab1dc4039df745c622fb0fca4c765faae8d6f4ed3913c4b54b02ca506b91fb32146109fafa8b85164f5c405fe6d9101df3664f5d9b816ed1568b0627f696287116b3b226781bf5c2c1faf4b22057de0d48204d74871479a0468aacbb532c9d2e0671289a3c30b1c5cbdaa999983efda904d06d2a7ebd9b250720f8a00f1b2d2c6404dc274bd3958cb9aa023e172993394c6", "8cf9c81ab07a58bea05be962832d367d7caae0e5988fbea0b03beed55d95d4ed4b49654e1715c2e53e62f67fdd68f539b0be5777e7bd0fbb81f8e59804e2843abad5a21d2a685fd760c478d014a1b4758b9d1d85b797c59bc5de21709329fd2f87013cb7356074a4e92019d6afa49f0235110445692011587b635a156c150bd85dfff629691c0bcc8892457f912645421e51a0939c179312d5f77b9cafbbea1f339d85c00657b6bd7d45f40ee1f8bf0a174261a89c1a248334772caf4a82878e59c223d6a563259562339fee3e424e5c42dd6f5ae7c7bafbab768becc991d8f2ec86613e4cb8bdda8c42243eba73164c462094652ebbbb684157394acd1a223055e0db0c2974d73ec190c82c74a499334502656cfe8f3b197dfc40aef02c04bdadf8b72b7ce5366136b682a3da132f451e59fb3549a71f745690bb4b8956d7627e8cafe1f9e8ed47cecb1ed2577fe8b918a21c7206066c9ee5add8a5c90ba87fd40a5c12da6fd82e374a44bdf8b6475b183e1d5552c7c03461efc0f1e81228e26f027ceb88663a3f91fd6bb05520a018", "8ebe2c8e5ec2c8705f6cee3da44de6a030087532eb1462c80b1812ff3845ee2f4446c1186decd0eca4658bae50a27692b42c1af6f6cd6cf7e7c26966c790d4e6b0060d394614d431c43de78192c1936cb89b26b31656108121da26be39d18a18ade64fdf5b516e337c494007aa6126b0aaabec0979aefe2c6c6907b28176a072bfe83824fa8910c534c2dd72f45bbdd22656f4f35b0fb3a68fa0434398f83d156ee9d9d787a350fa33963ad1956185b863aa59824c2f786a5fa62d8f336edfa49a5f70e036f4890265740f250f8ba9a73012969d71a0c41705f70280186ad43143006db3c1a6a02a6ec7a0ad7b7c473c6c8daa5731cd7feeff314bf57fe7cf4060294f17ee9986c9199393577958d8426f27fdbbed22d91fb400002ca7ef0df65672a8b62c3d8f2f51763dbdf38cd3ed51fb76e4f6b83a54b9e4d856515f3eb4ea6162fdd5740d85a0bb9e648bb9a21d4f014d95d02b755bcc6d26e4258c766e1c380d559e657ad2482128419cc80e9d", "894cb47718b4827836135b95811d469860058a35d98a73e993d390bba2ce30349c1df7d08a9cfc3c84a4cd84b0a136ca8b4f296dddd1458e0097eabc7d74977e6b9f3dc230daa1a71e11d02638e5ff86caba768ceeb81f9d6261dbacdb81cb73a33707b0c85d97e7bc9b9d409a280d9ef19ef9fec3d89dcf8ac3c0038d00306374cb9b38644286d887ec055bb1223cf96842b48c44d398730868974b439af6af2649f2c6d2b71103ff9cc4dcdd17aad64052e38c76b66255c4a33d96b610637f160ef5e3cabc7384081c4baeabc68d64108744724cdb0322761c7185eb0a17e7f75ab382092ad46e5f8e3d7f401064b4115f7af58c78130f91ae2b45631d1ac9c774dc9a35dc3eabaa81d653c2017a2121f7d4cc2337cedca0f59de2b52e295b09b722c14688e30e91092f7b78c8360d2be15fe1eca9cd640e9106a5e8c533bda711d9fd8cbda6d024528425d979b843"],
        ["8c5012b9728baf2bd7b01fed02f4b90f6ef55e8e8eda30e36352c4abf308b92b9ff880fba5a0d213da051aec5e0f94a0a07c03231320ff10250e969b8132c4f2c17267b15b0044be199d6841b93c393460a8cadab57543362c3dbb112d706a5f878659c3f33938459aab323101bfc06fc9f974025a8fadfdddcd84fa6ccb416bfe9e8354ac1eea51947261706fc427ed6d50813fa3cddcbc5d3a9765ee4b816ee6e74c13b595e4fab64443a6a281c3ec4fcf761b4cf5888f02b13244693c248f4904e78704682e8a5ccf1519fdf0c0d42bf93e175bc774d555a6c020c89c93e02bfe863da4ddde1c87da8e3f4daeed684429d7c9cbf6ccbd99bb87a7d4fb8a0b88d1ab1b818fed214c63e239a120a07c01edd8f8f4a39a7cdde8ea0144635e69be79dcfe3fed8b3c27aa08dc4bb3981b5a3fc8d12b0f6d2da7d5bca86ecbdecfba7e2e53e757c80d5fd2540785393cfc6e875b89f3039d2305f89ba7416346ef5f5f10366ec05e1f2bf3d6367bff2792344569e4ffefbbc8b6269c689791aebf9f8fad1e9b133c6e5e7ddf670e50ffeb5f832b9efb1af27029e02d59b47e4cfc823b87418ba0da74db74118b2c466ce81481caa77e34affa34c123e6425fa501ec2b3b80c5345ea80042c426a13f119a0e63f0a441aad057e2bb6aad0355bd017bce92199c153e8ab88ce70e20014d1f", "9772d1ff58883ffc974f695bde582707222a76609dd206247fb9454ae8a4d62407da5ef9cd0ba7dbeeaf189f7abf550888fdb77586819509e0d9da3b00b099bd8ae1572069a1c70bb8b1801d88439101c21687dc0eec7b05d1403bc3f566eb1a8ce684f77472ea7e47100f4f68e98991f2d09920eaa5a0e880841dd4e95527ddc9e9ea6322f8b7865152dfef2aaad13906dc1a8dbf91bf552e4b48d5d454195bd18c6ef5d3fd570126190b8532e0c5676c4b4cb4d41eed19d7147ee307c4612cf7e302cfdd69a695763ebdf24812cb980b524d108236d155395c2ff3ba1a60e5624b79dc0f5e90e1dbe03f6e48d4b547708bc2a95c55f7abf9673890be5d25b8de74f0feb6085f521a2fcddbc2767d5441eb65436efbdb1fad77fb95367f79bcc9c0bed540c8f0999477a1870b2ea46e2b02175c208886ce7af4e440be6044e6d1ccc70a9c86b6a9eea63e4a53c70279214b9ffef908b2ada68413c56b9bf178a424fcebd1942d71c41a8db909475d5c38035566b7d0a71956f866d679ec98de59895a3fdedb707bd884060bb3e07072603e3d4b828f478fb276eb659e32d5f6bb2ff0271f58ffb12243e8f332f014690f6bbb4043c6dab0aa3deb21e17bbb0e2c3e27754a791e3e6ad6771d1eb8a979", "ac88491f84f0745dde7690c60a502bd2f798012b81eb8eba4e1e195a4c384b98f09d65cd41a68d43fe33bda3c0186b6f85002dc28be67e1353c37352eca6fed5a39428fbdb4af27bf332e09f0e5eb1023712f14ba05ad3681c259e0d8e7e810cb52d2c986009ac53798a1165ad121a1864b30ed4d5b2098fc789dbf08a659620e7fdd830130952df83230bea4af9db59246272725a64588a0885cdf51e56eb88d8d9b6c56e11cbcc971422164404dc2e3125072ea0bb4ea6bcf03e82444292c5d640afd2c2fcca3848646db6c91e12680a5c6a2711ce978ca5b6910f08a6cff81b1005dfc03271b1dfeaf13d4cfb0bb707e95434a370e60a1f183021b4741b229365f16a61be54dfed2ae71c09b14928703c0d83fd22a312151b9ba2e9145b9658b032c3b36a5a2c9e9db53cad9befab193731ea353400258634410ba118e5493d1b7f1f0e3e46b8602e343e0d6b5a1e6b1a953e73a0d52e6596781d137a20096c1139e80a00967ff3e6a0b019c15061206030f740ef0b4f11d459d1cbddf05bd63f2dfe4e558e3582b473330acc3fa2606cf459be93705c346a90c684a262e0947ed4e0d95a4870a9395e6ea2f4dc33", "b6d50c51c990a12fc0036fad22c6a593536ad532d0108cc52e544de0aa4729c7a47e402e24abc2e718d984821090050b944e68d4924242fa49f904afa62bf4ab2ed174d83a363d53e4c65a1f258b0c50c2a057b36350da9ea09941a4dd5ba7ab81ad52ab076f594af9461dbe9c3f4e340df81f3035f9af8a7e9fd4021840d551c3b26eeacc7a8471840c64279e9cc0f971b722585af034132206192130a56464c434c85593e04adb94a5bd8d100a726d153a1790991b1cb348fae57c63e1e8593a356d8c370c956105555f416100563921caba7438cbb8ad7046f465f6a35824ec84c1ffe5b16bb108cec5961ff3a85320943b4ab597dce02512cf21bb9d85b5a6e00db18f5876736a8a0fafbade05755ea0955af05d41062add4716ceb1a1d074fb240f071a3dfd94eaf57354b288613e10475ebbe3745e8515ea1d81926a3295e842657a0c73bed0cf29ac8809164451d967f7fd78d609cb2b15c8b14b3d9593bb37c45729328e74b8588cea23f8d2156b937a7db9d06e8d11d304bd977fda5709ee0b8486da91df4e36b10592953f", "8f34b666ea7163cdeb6c5f1c843a32ec4669e32ddd75a5f7b36681729227a058f28555687feea84aae0d67f6f4ed95318be45e0f5a8d65281f716f6f1d6c7d71b80aa5a74360d261cf398e9bd373372ea4dd6b7c1aeccbd1d7328b0018a2812d8124cd8d087c0b896e2b30da923e58a0bdee6c1df70f7bd9632edc9afbe8a19c4cfb0606aa84ea39aef53cf1661a601f3b5e85061fb6b6fadf123994bf0c94f1b037076e98ee9d71f2af1fef3d67e12f11eaf80f1098c211e79b3549064dba743308d4d41eaa706ee04c9118e22552cf2d78f18fff31ec20ac512297eb07819b8621c96cf65d64be22f8572a4c05efe92f7e83b2128d3a56ae73d64a163ca1670e4a431643983360d11ed89720b91a8b29a39a2603ef31d7efab994c523c7a2110089db8fdd215d0cf427aaf26a38cfa53f8a6b0c7b5c7d65fab10b0fca43281f0592d9185c5a3959a7c1931d092e3b320d50409b131557d50eeaba9f7ef33841065f49dc2ac0d69aa82763ce7e9367e", "8df9dce2adbf3e3a19bbd0edb98333e424f62cda515ffc947425ff0d6f74a708ac9aabc7f7f5063812302cd79a874e7c8b3fccecee203dd90dc0a2c031f1b8128e156dd437fb3513956e4c3ecc0013f205c0693b1ce50a74653d1cadf4ce90efadc9c081a6b21c02dbb733b0c034c941ba3a804e21f30a72612544a6ba5c3a63348f27826a4e75d49dabe5c4a6fe755765bb41765b416aabfe9a396eb61b1777075d4b9df1dd8b59246f4b96e80a032c0bf12827b7ead467c0caa48aa8d2cb78e505253067257044eaad59ea2e13d5f835677e7a8be6ee89492fe8ea6221355be84c7ea376c1dc3030b641dfbb5b1dd21d833cebaf9e45fdc362b0a9d70560b032c2d9b08f0bb2512cd376b9795702050232ea36e11d490f24f3b5d03dc496a1e3bf4ee1d67d9fb61666e4a4649e269608b29f82e2a51e420926e42580c908a19b5c0c52797d74b7c36291b2e009da11"],
        ["ab19110f68a344ccbb323e23eddc0afe6a6ebeab318862062c4d5d5499360db857481e0ecf8f2cd8badd1e389e872253a67eeaaaf529266f87eee5e2c19c7cf89354f50c4478b1b0ef39782b4bbf8f15d7cd5aa5fde1e28168d2d1d42df80139b6d30168f039eae6e4b378380021ad55e0835f2919d9a8c8344dfaed7c551e16db00bf45a1a6407765229f8665d9ed245b068344e5eacb606bbcea81ca223b4f75f944ed0bf7a3316bf0dcf6e969f3a627d4b2c0194f52639b4285e14360c5295dee08044a6e4aa55a0bf5df9f8601cc18b9e2ad12c0e89746f730d768c7a420d23b35d3f5961478ffe7b9e70a5e77c5729d4afa20585c63f6283612ebb18af1640cff9da57b22ae0b94d57c48493dda1d1dc431e2827f477359eea11c7f96a05b2832c788ac6dcd45e511737e06ce920d00106f495450d588f90133f8397d3ee6b8d62855a195432142bed157e2a4900c556e5769656e25aa1142470d39683c72db4f2151ff63d72fe570255fae91a217a4759589c59f4fc97476f2a54443d423668097788b029f8b6702205c46dd1a6c8fc7f9b3e5b7d7f9c0e93eecbc5cde4f4aafd2b13e11d7ddda0c3a537addfb26e3c7b7ddb8859f9542863d8558075bb151159925c28ed94763a756af47b7111f94a91341e79c18726817220c2a97d96849860f0335efc62e0c2dea8f7de10e", "8069ee68dd7430e9e75e540f9c762de0a56a7314facde505837243972fd7cf309f35d22ead9faef09bf9615b5c13ff20a0f577b28698271728b3d3bde9517052ac9e99cacdc180c6aa4ded1fe7deb4981fe755dac7966645a84224bb8d5f815ab481caa71bdef83893a1640fde005be19d679c8290d2b01f2b15962ce7f273c5e7c78ef07cbe017211c02a89e0e9f2406ba83831a6f79fd5104662541eceab715dfd2f71a73f605f2714d647e5d2a7ff5e1e073b2880f6731f409a11f8eff9299803e4f92d6e1a6cf2f4e7d41545d783296b40ec73848b37700c734f1ea8f585984aa63a1a9d588a14528276c2c1237a4ab098ba91fcc72a55ee79f5998b86b94d06574a41f11cad5308ef47d7d8a82445e407a6df091e77dc319f22688e881d83ecee366f841f0645c30bfa5cd969076f85193800495cd252cd34405f5cb6f7236503428a4b41658d6687d6540063a62e88f7e99c8a8caebb0a9a30d2f3e10e7a31baf66c8ce4749b982b575719d9bc0df38a5ba409a5b22c6f377bd4e88c852bc7e23a81b5e9f5edb6d4cef8ca616e3be5a35a3285e50bee886e453b3911506af33bd5b279f0c498524569d4ae4aec0d1d670ba1a3ef118c4993625502048242850398fcd6eb74afbe7e5b73d10b1d", "adc113d1b3dd2449fc3840e3c9de2a3c0a0967d4c36e3e38eb5d2f978cd55c691d5e9f97efd13d6aa8e5174c483f828f8ce003d40dc84311ffce5077e959b3aa918f3f13ffef2db1f5bd636a1a1b42ce828074c8793124ba54d591da811cccb8add8adf7d9c5acbd5de030b7352be962771a6a5a90b29f188efa04b0c95f34a8be74f8c9015b1a5036a98ce889be3afc6ea083774170fc3840dca984675ae0f02cbdb6b9de4754c27ce2843e0aa7dc555deb0a366bdf60e505e05663118b287b504192d21e14a1338b4aa45d3d0139bf3c7d567d8c4cd918a3c3206d20b9201f5c453c11c366f8d1650f79daf771c17b1e0e3f010d03fc7fdf23d334e591c984897db0c6d4a277115df27ca5e6cc718a42426249aeb0f95884f84793b6fb70e55fa9a48e18c706b91f27295fdf6eef4a1fbaaed0b435e4ca0c7133db6be0bc4df1b875bf0889e375ac706883c312c30450678b7bd76fa0852f0db9425c9c85a00c1b19c9b85754c5a013a3ed119231830a061ddbb04041ae8202e1256bbb5fd3fe4106b5dba7623d596979263bab11da5fd0ea20e31236bb8712ba172304efff33dc5da895e2e8b41ced6618b87d0d33", "abdcc4341d24ebe77eb1a6a6077b506277842bfd6b3888bf6ae5b4dda7fa9f70b93e2d18391b63cdef2a8a3ca839e6ada863a7f266e843a95259de04b0b48be5a7b81a51ee620145cae59f23ac684a479651a95b0289ee183f51076076dd83d38cae0ba71b04677e39530a01b70c20996db6758025930f24c74a04a1397b1ee92a81dd30793967936c16e1fac82cf2ac03d1b3cac1131a28bead5b6c1e8580e9384e2960b213831bda1058a457c52e3003e558dcb5d06f64d3188be4c91c798078cbf58ecda5c727b5f1687a5cbcba425b1cecede4371f16f4b159041371aa57bea2fca84e5ed987d47477aceda465011f70bc93d24074a0905e4b89b55f2fef1c9e1234303a6183829bea20c9f3326530051ad48c56c1650d4e217b04296dde2c3b2baa6d4411ebf0db3f0d5c8350147121f2de2d355628138c7dc97f7060538de9cc8312ae86f79b8bfeeba4050ba31646cb6fab30ffe10522c3d0910152eb1cf4c0e408aee8441e66e092523893a51efae565a950a0c031760ef737e5ab38e0b90b0d53e7bfa9ccd1f954207cdb10", "b407da58501e32f661776b85d0be02467caf001bb3a055af466feed952e867384ad17d02d5a22975064bff487351ea3da7d46e2643d378a2512db5831211305f16fe3d79b5c71daebb4055ea21919d6fc0fbc8a6859a91f030a37cf43d1a17bfa96ecb2eba56ab7b5b8a81853318136aae94356034a7b5278c1d6461096774c2e11320d621f917f0927362b322799c623fd4a5cdac2c5f5a83ccb7ff8b06a262b575116ff7815ba0b3812054a822541b225133b99cfc360a95955c38f0f605afa86b3aa3dc0aa157d1856036b60b832046904c84282a52578c7c1f46c4eacf38d1e34ff64c1e13d659fa60a72f24e10420f40692f0bf329d3f28b75d180168994ddd9a48414de013790a59eff44784281681ad349ac5e0d9446daed8712b7d0521fcc62137838c0a08c0d4703e1f26db2d90b3e32a2087ea08dcaf87e9f5fd5e50b8c2283e922382c4a27632c57c3eb6499c01fb41721edcfd1ba3e05baf32a9b71d64c60c0ca0eea8c9c2c0de545139", "a6fd6bdd15150dc683e7dbac2742ef1f7b77493b19cfe27d71beee05b47c04258051768e86d63c4ebd0f06dedf0e0b7c93b49d6ed921b5653e63530eb83b0528f667c75211b18a44e5cd4ba7b88a35c6eea0ce09b2c96e38d8d426efff1f007bb987f4cac80094561da0753b66c4b97860d569bbd33f50d4652cf15322de55c2bfff7ed9e78bd567e83f88508f04f96a01ffd9c6092b045bb8ddee99d3b4f692e594f3b497a328a92a8f4fefc08267c96f49a6aab50c382b31e42c34f1bfd75759ff9e28568f3eae353782f241a2f75d6a9138c92b2ffaf9f3aa5a1fb1fbe987e83f2efc16e6d3e31b1dbffc7c6fa7ae641e5b8ed7c73f8b26620919c7657319ef1e17e5953c7a5fcb1fcf80ab58d9d84b7693018b45dfb5263f3e54bb9a0fca0e110c7a81a1dcdc53b532b3eef7902609766bc5255b911aa06aa06fad1a09d05a9b906b2d3c519823d8eb99daed1424"],
        ["a663bfb8d69157175db4fea2c2ee6c44918723a9aead2c0e6eb651c5d5e5b211848dd0e82e182e2cac155b380d64fa61adbf866c11dc8257d16b17a47922a06d3b6afe3985953991389402a9742fbbccb6429600e282255693bbd7cb2daf1d72aa5d084e41a6ea9c6f8b64a3999a37b01f88526fdf09a43597488b8300f81ebd5304020148a7122430054c7540dedc0d569a687e358b33282a9913564d1723474b2508c3e0d03085022876e7bfc168e42f2d8eecee71808247ad5a92878d6153bcd9bc49d2a8d2299537abf7869a7153690998e8fcfdc0e8fad39602c40b373d3c896cd3d6ed421841777da38afe70c21e8223b6dbd842b4a7a98df550e4f587065e9922f593092a2f310876c63c3e3552927cfda350b97f89f716b877cce5b00c0a67932acbba1d9aefff10b29e740d2b14bf814a0756262b8847c1d27df8443b7b2e0a476910df201149015e290ad42b594ecdbecdad462708b502eb5d523cd481d7749737f120e09aa439d08aebe60af4536fff851175a22f80b9a194caea4d8f38d8cc547e0498ad184b9839cef243c3233a276097f8093c0d0877e9cc095eb7c9a9448d8c7a3d2514771c5311182df9bc52aac3c8574890b6dce22cfb54a6031c3c1c4c26e64b2458ebb8ab2d2842d7f04291cf15f0f894467c52a9b4a7abb45658a397f9ecd8c7da1057cc3862", "88c1459700eed8771d62c716bb7537669996875aad1c992b144183b09b5a027dab291716572820b0a5b28a7a860a0163a6ff74eee3db40227a34a713b974611d71df6c9896c03e32b8151a41da94f8c209a66c60ea9f6860009a69e140265af7812e49bb0cb266a36c21ab60b5dcde574a6d4d1c8067e97647b45fa55762acb59699934d6c0fdc92740324d80a7c12dd34fbc44cc5296bb0adc8e4c67f867a6ec217b9f614d3b1cc3fd6ba7e4fa173ee414bf2242fed7e97a981ffffa24cbfba074877373d604c88d7e230467112677923fd2360e81e1573a960fd777860599791582abca3f05f97dbab0ff0672521f01830e790603a0d761fcf185419b34576f2f178257473076bca4838308bc742a75c49b98ebeaaea25dd872d334741960296d880030c0140be1ad442e162d851bd2c235123af1710ba81d610a717beadc4791b4eedd340f3974ff545b7609eb92933a2a60b66bf8815b84aa011cdad406f1f521a95e4d4253f2ec072b39da557400d35a15e5881322c2e5da9548a0d3705efb5fd7cdc84e3ec5c9a4624f41d948665c92aebb38d8d4ec6a04d97712d9918e21311f3102f11cfac5a3e34ccca71a25e0eb137f58ab77d38113ef5a4456e99a21e2cc5d95c0718c74082653ab8b4ce", "b6a945ee1c09bebe5c7e2247f4ba3d4ac9d4b8fb6a0e1c34617b320a73394d1ef87ab42f19490bfe01041d5ce995a77583275add86c5011108ff1d276ac8286b071b3ad12bdd22b26c7a4e2c02bb65ef5630fbbdd4f50a202374297c4b698463801fbcf0e396c106558f111a98b331fe7c8dfdea331dc5c532d488c91c858d67ea239f467021ac39055458e7b48756c52cca697cc7d2639fde747fcfe949edbd1785fef939138a35d9578dd52cf39d0771ae036d2d5549bf7bbd0db3fd3b7918458c1284259379b248f5d804c90a5c7b20309b889a095f1d34893530306461efc61b00d559f7023182a80f7a63f733bb06366c42b7232ed0c7cfb60d17efcfc97490aedc9641b444bdb84820c58d9cc605433d51f0afe3deb36c78112c6da36267857ec4357d6dfcb675b4575def98341c98fa1f381c2197ac88d97fe2538511030a08fcb3b8b5306dd41cbcc0a59da002799b4f7f5a487a4bf3f25ab7bbd88f0aad1a6b32f530095c3f33674d8106184b96d614db291144bb1c8ebbc2b90bb4e9f6ca121bb02da9cb73a465c15232ed02a8cea2f60caa7f1cee1465edd3aa369b61b29902ca492790b6008e4a62e167", "9133977a69df072d8a452e8ebc92edeb58374ed3060deb24933f5a1fddcc6db4ae657acc25f97379a526d3c0c5fec281997544484bbe02a602654bb87e82263abc15ddb629d2103c115f1429314b54d70df13af5e7636dd66e46075ea30184a0a2c1ed335b7c47308191de70d72b9ab33638f2cf209fee4b553cf3bfb0f8b57aa0230d6b7f9151fc40a1b4a714a7c32f135dc8570b350fbf8967a4af92d4cf64c686310a1ee13344d8cd0fe361610138589dae25976e116be6f244060c3e974cd2f3db30a79e8cb5e66722cbfc95d166133d6480b476cf16945ad2d0ced8f1b2367aaea2b787f5dddda31d2659bea89618b056e1234a8176889b7710fe1e1bc8ae820bc7d1589b9a662a848be5e15ece68371d3a9da8e1a2dd1c9671555529b7bc43e4e6e84d786403aabcadcd2fb3095dd9c593fafcf5db32a34f93a1554084898ade246db27a7fb6720ea3197fdc4e6f888949679a8aeacce1735280705bf862a29671c67ecdc42640b5be7f7a1f723dad84d9d303120cf308fe7aeba826a65d5014958ef46591a8a06bc7c23c0e70", "99ace9f82f8936e6a24e5eff5b833eb57703015b8f695d9acb7569f16c6de3c8aafea58122d1216ecdcf18c59b11ff74963932d97c576553d240d0d7311190898572dbec3ea4af3b520fb144d7d0febd9f92293f849d96581c1fd37d82422d8da3a09ea656678ee904d5e4404192ee8d7d375067c6c6f9c15e430d89cef6ea43e13263c5bebb67b882ebbb625e3cf8ae58833f294d972f36f779ce5bc7a86dc5c1f9e98d123ecfbe2c067c47294aa0640bca3dc4ee7f6e9f56221a97eba1a25607decff41ff42725b600fe8ddd69a6a8010554d418119507ab4784ceec222bfb33cad6e2f03d7221a7cc1945a824a91f660533b72ad969fcd466e58fd6e723609fd5cf82a39a26674e3a3968070805e11197dd6532970fafd6038684bc1a79a046081208e4e08fe2b4f84811634ad20e5bd9be8faf1eb3df028c185d8e2ba5be6df702628040eae5404f14baf95fa75e6fd6b2b38d0ea9cfbf1531f0df4aee59b2e46587a17a6029b1796672ef80df4b", "b8c4bb0a10ebba6ca7e1ecc7ddc04e9ea8ecf933d975dadc47b5df245011e4127245bc89308214b48472bb54382a45e790827e8116c3585496bf521cc79bd7640bac63b68d1f71fa09a752b77b45b7393f89cecff7448264d526192b322fbe15814fcc0c6944dcf3c1e5ad8e3278f960e91c887d511d2c8a194cdc5116c40baded66e0b9c23be833f81bf45a18f14ff220f9ed3d0e45d0c20681a0679e16eebe441d47cf50200cf422ef4aa27da953bc25cc947416bbcba55f36e276be23c07c4cf5282539e8498ee3e260e024d66a216238d9c7814fdd6293fe532607d98e6a00fc5f8042b3473842b4f6bb1f243fb732880381841b364120d51c8a46a6185815778f1747a92b40bdd9a23f975e023f44d1988da05eaed8a4eb21b31fed3705cecae09e7f0319803f9478e39cb7d4b15489447be1b8fc778dc57945416a0ed99449a00fc48b069f66cbf4b232a23009"],
        ["a60b6d9aa41b38f13b03b5e2a7e9e466802f7d17c66652a2ce1803b2862fad2d2f6655d5cb6e63ddb4f0bec428230d08aea4ddb3d1c0ee0b90c8fbca45374b0f4841a733f9a1f387fbc31e78fc9e8163ae99ff67662e6187797c35a177aa7fdfb161a81fbeeb56a1a50d573431d49f29571865adf6b4c36b9930570c10189bdcb79a2e1d646b0f2e1e23e660734c62a62f7c502e391790b7e6b355ad06489921410a05ad6247341f27d2f024ea5803810996012eed83d8ea4d6d5e16ee6192e87e4ce7f62a5989f12da38bfb781bd4d35b44757bfe9384c266b0ddc56cec2204be8824ff7a451ff113a7aa9eb978dc3e641a89f8017067146c9e8b7be813ac8b8329a3e6a36b51df0e0fbf8c65f938c40e76fd3250d9704f28210113f04afedf55155c70d124b284730600443131cb4b17bad57ef82246d31c99e81605daabb60eaef6a74c684f1f16e840aed45316cb68c3851592a4120617a163b3a5961914357cbef18e4ce32bc319cdd38f6121132870984ecd2e72c5d1f751799f6bfbfd0f4e9061fdb007a60fa60e91c089fbf76582290eabdfae397be9e3b31e49f3cdd02aa8793ff148c6de44362bcc3581f6596c271dc03e374df7335a29c758cb924762cd54075f33bff5c82950382c26bf57efa01798058419e5e1bbda702be9e64184d2548fe2c5d4bccb0498d4531682", "8a13ce0a226dc35199ab7e3438a505caed66b7462e5a314212db7c2d8b9a136f6630434062b95c956d047b5c7218de11905f3b244a7ca77ac7d9ce63b49f3299d4a23f5c81810d8367189bfc2eb5131333fa6ffee2c96a055f8730851fa82f8daddcf770a2276130fd27a8cf3e92624e1fd787f3d754b0e47597e9880b20d57d730da49840b713cdba4672c000b11eb74955a227ff09acb8c33f8c3ad9f159e3d759ac579c947cf8ece4d0e1226a9206431471e38a098d3ef5f8e8df172ebac514057749e51efe64558159b8fa1828821e92d37b3754464a6277658b2b992172b5dcdfdde782a982661cb36f7f087eb25702ec72d7dd260ed479d056806430d6706525655c6fc1fac42bceaab199c4aa472e768f7f09884b73116396dab08a547ce0ffc759dfdee14bd66fe11d31af285a1d88d3c3525454b00357d9cf64a05e932adbe8f070925368a6b1950a22a56a122c25a2dd2b398401bd161b7279a8b47166b69eb744855b217c1a452f4811101ddcd1015c7fb69b95edd80bf1d7ab773d71c939473f042e5f79b23cc517e72a612facd8dbc99240fd297846dc6fda6d826fe6e991790f84353977e25c7d5af54f9178c2e30b4d575bddefed5cb7d17a2654aec7939ea22e3bee2fe64c4475ee", "88493f4a40acbd121bc9b87a23a8de1523217b486d1ad411a8766fc979cdefbbbaa77937079eb0d49c5546c1448b80e2b5fde256adeeb555c28cbc53d2e02e0bf6ca2d2a998c5fca302e262aca7f956ada0543dcfb219b98b4acd1a56677d01c8181149dd3db2cbbcaeb3a4a2894b297eb4dd031f352bbdd8432ff28334415a48ae9e5d0331b46472d6fa28a28b7dc33045117067cc106a32902b86b653a2c08459425e95651b1fee554930da6a1e3df3bc22e62549a0305d4a865e5113d9bed4dedd4db5f93e25cad2050ea42012efd1b51680540e35084d236b3084e28fdef2b66e8d8648209ec27c8bd8098d3437f232f351d29215b2f7f7d8f124c3b9c3a23e93203e0842d79f33b68a0981d22d31b565b8a547ffb78999ad54bd132f4ffb01532f3e7fc8524e8809eb1d8ad81fe2f2fac50c113aed499a53e9649126c8d69038f247319ac269aaff917c90c3d70692d6651e76272b9d9b90e01362ee8936d73f99a501eb9d16dab934bdf92e2941b9288cdc49607b662002aefd6bb9110bb2499c1a3ae31cef8bb44ab037db0432a88357782585f0c1b47d75e925f7c9941cf7a3cc88f5c085bd416628b6da3f0", "8aa789d741452db252f78b602c08b1232b6a4843276b9abf83d21200f86ca95aa479bd0bd193a297c095c732924042e38c300d9305b29676701ed833afe76c282296f529344c9fe4839da1479555858f8e70081ff234b13e506eb50989a20371b8454510fcee732ab70c4b2faa977d075a234128e546e6c9e4348732775ba25171a63733edc8a8b852ec6c400a8ea8dc5b223362525c6d5c141371fd3e89d75de87b2627eade6fd91b2e73a4c07d4c6b1f0d5888bf9c998fb48a267ee0217da51acf4b708dae097c52fea65f5e58b18d042183322109c96860a9273af196d0e32e26e1be5d204c412a6bf86d185b65766e994478dad30d15783fd470837812a721028bcc89a25ccc93f49fa729073d1548a4f7e11bf944f9e12c8871fc48796d9cc356e2715da2b0f52ad4f5a007851f6ee3bead0ae4f93742bfa270e087227099f1cf2d64e23bfa38beeb75dea67e705ab0c9ab3d9c18b022176fdaa2ab7805c4f6fd7bd63854c5d2867063169641f75d5ece85effb9274db3a9f77b930a77fb71af3f17efffa8a8f986bef37e36b4a", "81fe361ed95db2d05f5f27d9ea2176b21f1337760424b80d789c5f8957c30e0fe06443bd9e7ba88d8f90593a157903708435c9b4c1f6aa8368312261063de338fb2aa5b2170ecde4d189dfd9576bf6a147364a5959a40d4176ef9c649de47ffda721f356dc6405ab60c170b5bdc22775ecc4fec763a57e857c01d475260859b91e624d39e5e97dd70aa00f41beadbc4a47d2f4efcdaf1a5f09e5b1eb20ad9967804517652483406818b68f9858009e7a3b660ef8f8823733ba1d51618467bf1424dd4e05acb6a93ec02486d410bc57bb586255802437c1835000dc5296622e491a78976a79d02fa1675fdd6e1768b88565bb74f657fdc4ef858b91ca926b57c1e765d6eb87b949bb9c441f6d53d766e955e26ea02f994a1753ae8df2b295c2c859db930e4a38370b22f10a5a049f65ed6b2e708baf9d62b65a654beb0b821276a27e20c6714267ca3e8e54232d73d8df09b72a14c729fa0cdcb54bac3002c84425d523deee691a156307fb90f0ca52f4", "873d8b99bb396829fddbd731f45d575cb2d9b845bce8a43afcfa9bac5339f233f03507874b2788965cb2797f8aaa3b94b0d856afd7afeec87e12820d78af63a52e9845b48fa28f11a99a117c9f9ab1c86289e40243a4269c9f3e6aaf5b8bf6ff83cbc8e189b3c33266fd26c1559b6a9832b409a58f81d016d4219a7aa3311c2ab154f8e7a6bf6799ebdb62517f89e85637f05ff968f0a44e17de9c41827d6e0041cb14dd21e3bb7a64ee697594387df147d64544f383d9d99ed187504e8a894cd4f092dd2efb347db5c04ef3f7ce5cbc0fa4576580825804dc54ff098d2e225b47607b318c3955f5af47a431ad90da766189210f834c2cd5d5401d4e598c8efa6cbb4a34b3ecc80d55dc9a6687bd59322b76951da1bcceaa3f679acaa6888b1bf74559522ada4e68c641ddb0dcd49101428d120b45d30d758dc2870f93c2419f51c88857d6f55ffdcc7f5952bb0bdb47"],
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &mut generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for (
        (key_pair, header, ph, mut generators, messages),
        failure_debug_message,
    ) in test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &mut generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let mut generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &mut generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &mut generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &mut generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            MemoryCachedGenerators<Bls12381Shake256CipherSuiteParameter>,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, mut generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &mut generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
