use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::bls12_381::{get_proof_size, PublicKey, SecretKey},
        core::{
            generator::Generators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{hash_to_curve::ExpandMsgXof, G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use sha3::Shake256;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::core::types::{Message, ProofMessage};

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof = Proof::new_with_rng::<_, _, ExpandMsgXof<Shake256>>(
            pk,
            signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
            &mut rng,
        )
        .expect(&format!(
            "proof generation failed - {failure_debug_message}"
        ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature = Signature::new::<_, _, ExpandMsgXof<Shake256>>(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        &messages,
    )
    .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, ExpandMsgXof<Shake256>>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, ExpandMsgXof<Shake256>>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, ExpandMsgXof<Shake256>>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["8e3d9fc410126ccb56c36bcd83dbb3a824e5737fab19b0dcd722a726a7066eecdb7b1ba32f9a37cf4b99c5cc6c369058a6d07b71e46fbdcdc14a19c54635b5596c459dd2d48b606bd6763e60ccd8daef592bf17a198e7c74fc656a771e3cc840b1777c2474773bbf07807dbeeffadd3838154642b8b546324e92d72c016388fbb73a2c6d54727e774367dfb038fc68130bc4ec4c61ea1619ad99857c39a98dac2e568b53dd6809eb9f2dedb00f4013e02f991daa26f4e2cb29ecb51ca79f3d92076347953873c808c9cdf155d0d101fe5bceb8ac386c00525b226b25eebdd4bd76f2d87e7f306d6fff522347d62fd1d46ba9d3e2596548b50425decbce57fd2d1e56f2d4a93f0620a9ba971ac8ddc2f904ec6befb67796425150bd08d32592e3a5f05f90cf44644e5d83c95416415f4a27ecb7e5c2ac1d83918d8360b4c62a4ca2110850ba8c692b0a6d4ff6c07f4a6754776bd8ed88d4e305074676c63fef2512fd33507e0db45c5f9825bc2077194c502553fa70a7cca1999ef75754fb96b56f5c616684124787bea9e181458267984d081b6a94438dd6f07e6c6863dbd0576e036fd1e96a475b6195f8c7a45953d740cd3cc9ff02213b2f37c3900f970e7747661b09f2dd1606b462df0c17b36ed628280f2b1e700f87359e6751d9ec08a9032628d5a0ee9fb0728232bbc0315588", "954a96e797209ef41c050a8edc6fa69ec5d1864a54bda099ab32a65785e1a8a7b6c553103b3e7cd236a2a47ff6b2b1adb4a889892c84fedf00653f0750a7abf54ff00ff7544793935fd859c7bef4faa50e715f0416511369b47c368567179e2694f39ce0abb2127fe1be46bcdf9df0d2c470bfc37693fde2b41a80e0258865697c110a0f1f76448a380832c763e6ae3c25a013dbf05f98e66c9d129328a5e3ed5819a6d7a1377a5c358bc43db12c41f171b4d4a005e157c1b3f3416b080071cc8d3f7ea14cf540f0f5ab24f4be228b1d2276d7763d0b0c1fd9ded038bd2d0ee9f2ee66e348e186b944fecb2e43f87ddd545acb19cd5401492b75ed68d6c35192218f4011139f46b3497dd82443e841655f32295b85ffecbadf6110226f16b3774e399b78d16fc00f0018f1f5ec9f610f175328e18d6d6ab221cafffc80475f6e3f7c787791bcd35adf27afd36dc175db35eeb5d745b69ccb72a2f620dc34157258efc1c7a6c3b327cb8c22b0f5402500413cafa0abfd9ac8f6fb3f719e73451084685695aff9fff15ba883a885df82580e3c1770b6881b7e890d866f6fb99abc0fc30dd6384482a8bf19ae641b261f3d23627aa523bc5645b1dc2b3a61d34802238c977bde3b43e043edbf4f29a255c6", "b62426f0ce04ef906a78f9f25b0f9d17a8e20e54b453753e54a5ec3a0b0874fa3ebb5192764b66937a8dc4ea15c399c6b9c65e1042106258b4e019946d9bf0343e37edb1ad70abfae62e131043e0f0f12988b0b2b11441637897fce3dc9aa422b076f374ea7e970e472a2b31b75a6664a16b9b76f8511563d0aa8a1b174eedda7ccbcb0fbd02a1fc74b43d795902a3082b9dbece88de5aaa0c25453f9437735b1a03b05dd339138a2425110e90f4235f43b02af77e69aab3e87041fa1ede5d1607349226593ab76eef864523234250b90506fc0ed6edf69c81447b8d88b66848731a5bd2219214295ab6823412c7e1ab41a548901e0c5208722da2ac2b1e38759af83d89f75a866ee3411bc58022e10553364e0464379a9a1161e8a22b433c6e7f4aae39ffa47b2088d9c10553bec82a0445f04e1130a3e87d74954f5b325069c72a82d18d55f7f060f28cb06cdbfb70118bc09d906942ad68cf6fe84d51612a5b9c275c41d8a5c4b68e7a24d520d9de07f07252f4bf9f26c887fcfee984651964a05eb507c5b86c943e37335a2c3c5d72cb31f0018ef3534ea92ac87f6c53badc05574606c3d15289a90c44d7d16465", "a68db492406f8ea71fbfa7c13ac267fe57169f5c52123b24e3fabd78a463218a857c512f32fafa853f5f1703c2de73c98428cad8fa0eaa0fce0cbd48886790f249b5828e66bea787b33a68ed243c3488beaf4e2224c27cae166028f2230d9a4b8ba0c6bda9c224fad3de9e709b191c8d3d457b0ad00bcd023fbaaaae1f925fdd280fe290835e2fb3f5362c38b246bc1c1ff99ac0f051410d5934a8af480962bd2fda1361cec56ffd0f9e9823d97402e96b35c90b23d79f799a9efd02a2bfefe6f318b9edc9729c614f1ffd20ce69479c6784b65f64821d06a0523bfd23aa4c8cef97c9996f1f155a9782e2eea9c2112d63de8b528aa518bb6b50b1ba19ddd23c3a71d1bad816ad90256fe6c912b3a9be496c13943fbd05a4572d16ebfb4f010f1fb903af45c87c37179d43de159b042272bf4e0f32a037d27bd9a1e274b3a660996af7a552aa9fdb67f091d9871e06a05c0356e210cec3a7cca07b085cb983ea76b134f36f9e9a8e9adcaee4451b3cdb208f633bc3cb6a7b15c80ad6e214127b21c5f05a417b73afbadf8c62b070abb9", "a7b04a28014e8c7ba8a7cf6e6e5440e728cd3b0a2195bc410a9a4b6ef6af593887f922a8991da8073a93292f9c87969da479290559bbafcb715f41b124bc37a1f250d45612506c9d28a0f01ff91f4ab030820736e8facf45fb0f2ca2fd4ca1d2a00aa32bd26bb0ad659c381b277b0f73d390eb75da6e2ea2172a3c2c9e7c608eb5936b836eb75a0de92ee92f7825ecbc218c194f2c97586c2a6eb3c88b64658d3471fbcaacb933060116613f0e2d28575bd86e64a96019ce3aebd836cfc518182d7bc54aed0a74852014303f9d52db432be52d2ece5996965e0811587fcc3ebba237cc5599cf432bcf42c46162479408187b8ac4a54ee9c1f86e6f1912c34024db6be10038508c98704e17267fa834695532c31c5a2a450dc9284091d4a99fe08abb2e59cd581972ecf783e004dc5f0319c6b40ce0380708510a1cc2fb4df53acc125feb42204b560dbf50966db9a5526e97ecc0c30c10e3601d73ffff10379d6327d048c638378240ae93d9fda1ab05", "92d4eb0252d93d3ac21c6825b3894ae71aa23a4ca521f35993c68f4303cd30ca3a3f455c77eb47c714321b105051e89ab65bde139bdf73f5ce25278d489927671963049a35af5d2767c347c92489355ae77401b258af0394d750b53fec19fa90b4ea1d4f6d2360fa21ed3b1baa8e98272379a1d7d99b503ba45cbbd575b640887b9db3194abbd7f06032863af227c161088701c462324b2a1df04c672375dc452f474e558b59e991a4ca873fd4502bfa37bdef10950439208bdc2aca2a9d911705e5135c217a07ca3dc6ccdb22f1af285b2b70b872fad97e4dc3261759bb4c7fe5388754a2dde9d82e450b56cb57d0a03dd9724d0c2d493750b4b026a2413f0686ef592d9d225b1b0218174b974148e943d83a457d1e4c5f7153a841300b180b469bf23503d88c196cd875182a531b045caf164207ce032a18176d6acdf5f29359d19aca3f54b24f5ad1016f322d4b81"],
        ["8b7052f6a564a59da5f8709bffd07507b3878efdaed3ba42916426ac8310b82f4c588c339423a95a9905d3cc3c3594a3b49d66ec09a0ec133ebd0036253a14c761a3cbddb741667067849fa70b08c32f19982ec947cd97bc8aaca37624592189b8e175c05d3ecc15cc7bfe4365ab98c39d7028547ab6687622e41d4c6e2065dca33c9dbffb7cbc2b97e9ff5d42b0471f1f0ff702cdc085da0d65b600c8ed37475dac50fb1af7530995c27a009872535646473c5dcdde17d61bde4f42396fdbc6c2a7b719ef36f7909ee14b770c0d3d350114126631e31bc76e1495899acbbf639fd470d868a1ff160fd2b104614c5b303b5e860a516c2693a8fbb290f48a8416a7b3344f394d3ea5cdfd372453ab91ad1bdf3b987b42ec640629a6b2ad3403ed134aa03b6d9564fccbef03f56f6ea9535fcbace6b5c9bcf5f363bec6b106e35342d36f77810ca27f07022b61bee9e18924ec04e43bafe37fb62c7f5212818877b3dae4e80b8d0f8451c4ede416ffe10c50c8f1efd1e73cca99e63d024ed20d6d30bdadec78afcad88f744bd200b3e8ab628c513cdbe01c4548343e85dd8e56221cf54da54e7b1188a25f4ea7602c441114cd2efaf4f377a885a5d03a654db1adc5a9663d6a8fec77f27f3f0431d47afc2955472b646aa5c064d26341bb4599193c9c94c6494e293164f4ae5682e37ba6", "9333d3cad608b808e29bb13993722729e27232c679bade51a7d4117d46eca0762a947d6c6547f0001f9e661910eb9d19ae162f68cc04190e89bc6b9d5f2e20dde984608a8308cc7bb0bf9e22960777e9827a6b404c21e8711fae28f44f2989b5a096836bc325d0e8782f7c0d9665f353a6e704f8fd10b0adda558be4502c64e69707114445a9a312477e8b7a3d9117a7041ffd25cbf1c67d73334569ff6988ff6f0fac7aea5362bdeb69c2a72220908d3cf5b97c2441aad4075745d1da0b9b43000336c827bb973db0ad8c1dddfdf9d332b7fb3a950c8b802500fb28d75719cf7a7f5561e0f05a1875397e4e0091f04d105a80707da62700557f422cac10ecf0fdfcb50969fd4a96e1efe1e8e26d637d0ed0ca6ba78cd67cce9aa1fd1ee9cdae3f9df99f6729ad9f2d6f5083f4755c9a5dbf3452b3e2a70e474834a55588a4acafb6531246bf1802c3381aa1e9be7da33f2abb6ab51f7401c78c0a37c243927b0f0d25a1de8a8e9124d25ef5515190cd72edbc6166ec15ba45562d9ed488e10c28cbe6779b5840cf558919d4f3f050864f8d4132d1abaf8c23e5f33f59f5234f48bfba130326321e4435070c616ee12e2163b799ae7a19aa61075b0a7b5b87da77dfd4c48ce9963093d0d9cdd263c617", "8b643590ef55dfcf4112a6c15a811408c90f55fe12618907e393abf9f74e31415af8cf74c4a91da972874cc3dea674ca944067df534e04e0e10a83794aa91c7d44e353941be71c72d4fda15be81ca55c785b3e2bad063fad9034c5270350b16587390f7028b0aae757388ada95d8529b68d44d37873fad376a3cc2789167df8133b243a740ab9749be7c77676e7c269d0e35e1bde4b390a5a480cf6ff9bf44a14da5c06669c02e8370d4fce135afde8216b101bfb409fb521843793f718e2e7c4b28c1f299006cf3dbb13abef2a39e9e0017eb7c702241f953cdc071423ffeecc14fd685fd7da3ed2786aad02341c9b10addabeaf7a470bf4723a877b56a78561fd07e55641e362827d8670d141ddc053451a97b06a8fa187ec537a21bb0c86cbfa607b8e6125f83f3268b8a1e3509fa290a75e8299ec1121ac95d17d7621cd44ed5ad3a0a0d7969bebd34c411f473c44b458ab6a7c6573aa313fe6759be50fd431ea94fae8e19bfca3e06bfc9fc5a0d084aeb76d81fb729d38459f05b00290f3bf94ac6ac5f70364a376800592bc77c487a7aa71360cbcee99afe26e28fe2d0ffaad415df75a4db457693a172204cb1", "8456a8f88bfd006f3ea43defeac27b9a1d8ce3e9823eb80b53b2d24feaac8f9a0b37a603d98b5090d2edf69241cdf1d695c4813a1b09837693cd244db712c0c08b95a50fafb562f7cfeac7b5b9ce7397bcdba9e5de26c96c8dfcd9f8be89071c84ea4c63276df69cf00d69404c581d9cb1e522c2956442dd133e641aec7c76c7efa0ffa27995711502f6aa96b5a52d0901bcca6df64bb3abe1fe7f5dc14db03417ad2e3843f7a2ad2d6d10ff08ece5b66ddb604ad624a280582a0248bd101ea67d85465f9dc7f41b43e11c157b5cfc67728396f0d06862c827f8db15a83c67704fcf4a03a2b94bcdbb87e55094042054247060db63f99d354d57e72501bb97dac46f9096d51c880c1a857fb27653b20d173962e2a068093641b205a36d16c571bf8c387d1352ef9e7af2f57276e780116e283e8e9ab271b233d417e95684d3c7ef401c0420ec73ba007af59c764b53d30637a613309d8c37772264a80d5d444ab6ed9cf844bd652ba1777bf75b8f60eb577fb45a7248862363b22b5d1ef63fc740553695c84912d6781573693debec62", "89e6f3d46d167bacb937c92bdca9e66cf0e83d77c34eda10b188266a5a1c471b054f133ca7e9f644eeb08d285a07d1eab24e7a18c676116d658fb6964cc3f792a616bd5147d5b2840e3944a6ac73f5804b153206516e8d18bfe2970a4b8dd38e905291d043c6756d275942f5a71849895dfdfd5de4c0f5971c036894d233a61bc18c94b78a728604d65c38d391e7e37a1e1228af0a02e570604ae33873dca0efabb698ce8fe8746b81078df617d79664425709273f8b3ca0a6b29aeade1533796decfd622d22c32b8d72777f170da77516064e9f0530d660912100a233dc3168eac8795871812a8030b644ff2b58cc871145e1cc1e35dd51a3cbab90d152a26e9fbdf676a9bc41aabde454481755fa9a0da7c5738e5241039411031095e3b266929d4512a46b3d67a220295129e1b0f6143ca90a66d4ff31f2431337ec7a94895be4c00fd7c393a987bd19466058755f30053a7c1a8a95f5d9c545f6fcdaaf69294a0bbf687bc5d8d01b68b8cbb641dc", "84b52ac39e160b43abd785661df937ab545c90d6c8256ed8c204a3ba02ce520875f433d9ad115b76bcda58398c9d8ef7b0237ff23f93c4c29c23c93320d9cd1353c23a2abee92b0b9f1f20ce7f21c09e32905f5aa9764b8068dddb27ba82712da46be7f2e609482c60c5e76bd4520e5398beb5f4a2f4b8191c5b5ed2b0a5ade4d52dd3f208902ffa077e6bf523ffa34d1289941534701b08a140f2c5f88c9b9d2ae07232fee00f83966b479de307c5480f59e39de91136ce8ce6c12762abd2c8128fde88e70fadfe378e741c2ced52cd6aabd7bbd66e017fb4144b58e42a2083029903ed204d64c313c3b1c0205a74574b62080640204991d2f5b42bd477cd68b3df9a3a43d7050ac3b115f1e8eeb3ab0f384ea8411a70a5fa3c7df5504ab33fb76fa0f0c57a2b67fb54010d3f85da6b348a83f5c4f71093b165654928abc9a5345f38aae38e64712b654337dc1ace94"],
        ["b58bdbf4cbb17c4cef07d55815d473ff652cea71c2235ce4480f072127ecc0757707f169578941f08ac1689cadfb11a4886b8132ef3a19f2854aedc50d0413a1b5e9c87ede87781670d6c7432677c849db6d2a6958ab578f612264b5e8670fb69850d49a26e68331e4b5bbd0f2ded7161c6d315e516182e8f0f0cc83d71eadd373014d76d734db4aa92e6c46220ea66e4e31698d3412c16a26c40f53f9881db6a727ee8b0ad3c8000d0b5d735a8e738109d592402cf4630f9fa4d02b552ef14cc37ee331269ee17f82658e24d4f8f6160c188eff51e110ce1d3178dddc298b2b9c18b2b86ad7a4a6f1a2e268b72aa86711dc064845f5cf9949509f1cd5d4a439755e2aa171c96beb739c0a6e3456bec061bd1d9e0b10c3c8fc50706a44c6021361c0e49b10de0c4fe4febee7421ee5d03f5df4d6eb24ea01812b014993db22d4dddbd83d8500996a0201b2d119cd940d2da29498c29dd4f22177ac991f78c03541782d150059438d2b9bdbb23cd0d9286a1fe2c6739c5c683d414b64d70f7028db14357f6927ffce339fa60caaecddf173b0cbc16a8c52061700a57042e4a3afa6bc3fb69e7c143d54c5e5a5cc59407f0acf7728d43a60e96393654e24ebc4506540dda35852d106e0a4a8e55bd89f0d17f5d2475d7309226e3b0ff2b56dc8ce3fa001b79d638a88ed704eb002f392d2", "907733874a68d98aba6d4dfdd9b250528c9569359a9087b6ed97b2e7a776418256f79d1f466e86bfefbb4bb0091b00b8b09237fa549f985d26ee0298087e35c56f05ea30262c6f176634e295204a9c173e56a3f1b31a616052879f0b25067600b85417678e268920841ac0dd9f1955a5d0bf2ef838efd11e896c417b0fa4f347a7697ca7de7266b65506d31cf0de21683feed2ed330838fae021c4ca01b0c192b9346add28ea4b1cfaa477ad6c969a335cba0146f53db4fccf4db47f0e2cdfb3ad3907e22009650cfd0c1327c563eeb35107ae595009dcfd083e1fe4de6ca908206821fc263d1986e8ce41eea9f2a3c051bc1ddaae84af1d5384a5a5257e5af9c4fa663ff9206dbad4fb89744fbbbf0d3c4e53ae4e7b81eaaf5b6e2a6d73260f0afb82da9e450a4e70a7d7e4cf930b1848c46c83efddd63f9be3219c0331848205ba03ecfc51a08fa39e3fafc777e8f95c0c3065711638e857c142a6940dd1a54d228a7c0daf965cac39d096f7733c7043aacc1c609d6f332253666dde68ff3904650299d487d383a10237337667445a5f52d86e534dd781c3f1fa04c17ddb59b4571ec361a503b6e69e0fd292e986541ae6b63edbe8a3d377369ffea01f6ededd59e2e332c046e7549952f56d523091", "90e4c74743acc3594623ba8d820bb9a89bee3b0f7e17ffc899dbbcd030e2afef1095dd2a52e844ace055e25252fb6afea319c2fa2406e22c2267ab3c418ef8642fb6ea7f82e9743c947f1da1153fae32d0af1d565d242970d14f96ce1272d4b6b955b1f7cba1ae05709d3b3c03f443ce53b02f59ff6b62cb9a75ec6f8bc1869d2a6c63158f8dfb0a7fdcabd9d19718c26517d7d75ff269bf17b0da3d82df276ebaa547b265d139efa8aedadabfc1286f17fe1d3633c02067ac724d14551c075a6b8e2d3eb35764526755a72daec9283a01303dfb2d8f0e0b7d853cd49df1a30a064395b21ab0e83158b4063732d9f3de7156fb49d43dd6ecda0f94b3890da66c18900bcaec69cd1b2710a6f99bcf573e3fb7a45b081d339b0ba1d8848ee89f0d484b735f3715e35f607a44baedba6cf048a471f6e1bec75013da8efa1ab41cbbfadaaea64cb36971fc5c68c64001f8f81918ca6afbcbb3e6df7ad2a6208cd7198bd010dced5cd6e7be25d2aefb8d5f516c4ef52befa60363303e751a6383f62f7148c6b3dfe4ac321accb011e77526c827a3ea58802aa22740de3cfd57d3e3050d9f8b8a72e1bd7833466b3dc990988d", "831bf5986158748275fe74adfc2f160fd922f326d4a821e20437a4ba39ba218daae939987a937f1db16fe9d2748f6a8f89d2c1335a444645816777e3e43c4d244b564b7bea578092683a3430d64b9268040aff984c0de26e52037e577a915d31b9d2dded68e8b493c6c48ababa13d35de82c6ad702d804629abac67e6f7b9c2d737290e4315dc757a6fec45c9c2dc5480e42516b19ece3ba895a5c49880c6f1879499c7e53028f4549bd820080c5959b2aa475a196461fb005511d22271c87601b7a7f9396d2e1b60882da7b15a431ce0cd5c4c2881aa1a213bb57fa4eeb3b24de15057d451b867bb7166c92f6d44b39257c21aa7f91f5278c3527f301d0b717bde2edcc2727fd9126a70dd64b77f3453da47e7a6f3d89ed0468b51831ef9da3ff3074a8db137d33b69882ea75fa74ab38b0051704283202e2ea64082b2a6c066047d89916ec8ac705832df96b27d5ad3ad9ac8b549ddd4b7bcc1654ae03e273c0b75b5e55042ced9fbe6e80707cacb825614e1080fb4c48fec7ffd42ae370e3f7a630729d3fa809610bf568cebd8975", "8091297b69c62dd7256d9c7f1c0aba58c410cf989847475501a50271bb820193319c3a4771d6bd3125a854448efd1bb584083193114fee28e8a60990aa5789a99ce968b288229b673064d6729af91918669583ba7d02791146813c5b30d59cdea01f93febccb2cee05e9a2ddce9d7d68b11ed49071e7da98f56809896e234c8c97a2d2f18ab2cff10bbc24770cf004a6362fdf1fb8e1327105e551ebe06eb02b462da929cd88238a44ab0bb82546cc0b50e7ed3228430f10a2df7cfafb9bdb8c4579e85cc162d7f4b59dda9c7a54f1f35817fa9a24c8dfc43162295b0ecb4a1f30457c65e86feb0a4346f2d650847d11073fffc8d913a6c8fc1ff15526d14e431f777676a18c437934d6003035f5e2902cb060ad0197c58400932991b0ccb1a1c948df17d011ecec21115755c4e679b2366ff1f8fbabb7ed737f12128fb12c1a1789f95d45d6b8ac1338ab7c4a795528491434e8557031bfc229a7cefb23cf9ce92f4d5387a55a7c7c6e987b173e2be3", "abf2c96fc77b78172c5fcad073c213d3b59c336584911d3d6a969be2dde1d5fee4068d552c1d90a093b68b982dbc2e55b71de2361efd038fd4f764dd41a1b61f05c84439eb14382ae35fab19d208209c6dd38bec498ad4eb007c1018babe486f82a19b90be584fc388485eb8aedb741e09d9ce7e20a734fcbc0650f38c178a072a36a66075b7ba95d325e7dfbe008717479d0a491f61359d6e6a064b451a1614cee48b88a8fbc22b4b63c69b47b23151550fa7354af7ca466721315852e12bfa3f3eeb1e7ed87d7f3de51e9d308f18a628be136c036896ca3e8239779fadf0c7db571f1adb426cbca592fe30e780742b052b47683f82c700defa10984470766dce76f6ded7df4141fef5836eac20ef20630e812fff7058f3b09b91f03f982dcbb1a2d30723fcf950d11a329c45ea447c20a57498da8634b16a39e4b432dc4e8b37e708bf2116d33b59aa8ef78f45320c"],
        ["b2ae1be1ef084c1775a55bd483f2305135040f44b79be28f01d4a182d0703867d29a043fecce59fd36d893b8ba0746cfb688d5386b949b8f31d21c99e414d071883866fc529aa2c5c853b433bc522775376552b2500e1d03e5c6a61cb7b999ccae2544cb0f21c5e83f48c21be8821f00b0bb7996aa69db6380fcd1c6993898558baa3e2108d8fba9a69f2129d13be5973763507ffe42cc4dbf6a6cebd00b093c0e5e65f1afa95325bb3832f0e0a846260a93d3ea87dad583dc742f5d00ce21eecd360aa1399e299adf15a4e6c23dd60e4e38b6049074998e2389f66e35b72a5131b3cda4211b86b086012f06681d8dcb3c215618678cf028fe20fce919d07fce1ec5a073720f41d46321c4144f3f04301a0380659d98eae6f6b5c2c11859dfb51e26a25264240d202d516fbade9314603bc86ff70566b76b7bf3ada198da0d83cead346c737ac46876e4d94fe9ada9794815599f012393058a1e92d371d74bd15366eb480818ca68d0bd095764bcfc6828128b4efe7aa4089cd75d32af992cd5e63c36d77999780c298dee2e824c3c2565f128fd4a3c80510cabbf4ab9a3d1cdeeec51e35dfb62ced22cf4be071fde5e46e935b7c753bfcf5582b11198e3492c21951186041d95e5f3b8966ce0fba8b42e966ff5828875e16b2079a4e08dd23e14b3777f9a21bda1d778296636f9af1f", "ae5ca21cc26f31d8bf9cb2dac8d84e2a3625f0c317d3a950edbfab60aa188b61aa4fbc3bd582f65fe7154c778cc2c7088ff12d48d989a359595023af41f76f9fbd4b5fc50ed6594bf667bef9331823c7ee7e856ee7c6550785d7503659986f038ba678e6c5ad4d3890cbd3c06208bf16dc31b9db57d3b14a765bd0444032ed5b5d587e57a6361f9ea632d0f65ad0d8cc6054979b820a4ce79f11affb4580087fdc98907d6a0bc9d24eaef6b40cc0ec7d0cc4dfd5c7eee1dce3e381b017526405dfab50841d79cfe06c14c4ca64f8afe369d2aaaa2a718a12aa24005726df0930f0d5efdb2613404a189bf99abeb21f982e3274f2636f839347db1120f01d693aeeeb15a8bf7461bf6b416e991b34bb4159d082580928852e4c93155cb20d1e4aee7f9926fdf45ef9ae4ba9d4dc1089287254c10acd88fc15fd3e0edcbf6f6a60c4480f7af129ace24f4feceec8fd1d726ccf96b3e1ae45595fde3fa1980d097c58e33b4742124e0cb677b981f415d44a545776e0a2f9eb3f6e2225f9743db268f13616451787c418d132ad020ddb215843551625c344075581905e5cc48d4b8be921bd3b3de159d5fb7c936bed3776346c2d3eae4d554f5d7c9f931be6c9cc5532e4e3aca4a2dec1530b0c75ea927af0", "8e2795fd903aa992abd4c7d2b2f63d7ed6626f681cd5de1edb25f70bb7582a9a1045eb401c599d729357ef65f4bf9a9caf5eacb7b1be0beecc6af841de9154558cd9414e257868245bd2e089a7402b32fefe2944eca6514dbc0e583aea7e8df4963e5515092fb648c4ca6800ddbe9597cad6fabe971912faac7529379b9c61b3e4b0b73283d617fe703acdf676917c0f60d5b8208fbbc52e6a6745cea76cdca697c8a07d25c90886f1de03f82fd0f565729aedb5666820f12df8c8bc63e6f11dae4ff233325012535c0561a6f85c3bed44b6f8a8487e84c437822d04ead46831d9de6e9dad6599f469faeccebcd076cd5d995f16f73676ea9ff2b3e265c3a903986b17d4d34d70e2925d2cf71d42f31c70b234947e39c3661142f3a9f475aabced2cb227169563015fa7713a5ed21a8641d00902afcfafb298616930beb36546bb754cc0fc04e9d6d4cbae800ff25ea74b6a4ae1c33e45ebb366f788035a9b996061cb2f085949e75b9893452cdab3184d39274d17c64dd2a057dc743f84c37e3cc5ae01330ff36c8cfa01f6b2e990ab4be549a7a16c7d99bc9f700025c8de0b413c05c66e068dd0b0d1a8a358502501", "90756c426f99f7d1c8a6065947957150ebdd4703118b11ca1965ee789338d4a78ee119b800026b84493cd50c70b22449a106ad0b97a24cc46ee64cd7797d416b224950c44e702140496bd95d46169a2e5dc35d696586e124fd936f6ac9651d12a1ed4a0d5d9f2afc7ffd681706567c4384d853e776932869d25f1c756f9334dfafe62f06c747a7a49e97588dd4dc6f616e9678e470d9094ddbe406b1eb3bcba503d92f61301acb374762f95d19009d4c53ec3a8fc3ec4a02fc8430c7d2315fd21725edf91f62856294d43db4fd0a2c9c10ea16b4da95081361d001bbd8a28785eb90525dff3b5e5ed9ac8daa39646c3c64e42ede0c4b9b2032d1db9f6ab89ce432af325eb0cf2d38845b220edfa4062520637896434869b6fda7abedd94c6b3502a70051210e71f649e74397a4659f4a3e34b779dbae98866ed990324507e049b69f475924428103c182dedd7fb3981a591bf57e6114f7d377191399febf4502cb0106fa2f64664c75d91563475227ee05c70e1a8ba13c4f717d711adc36c453f10713618bce5c52814c60d030f1a4f4", "94afe929f551315bc58657be96f505af6a37cee4f6f47f0f49ee5aaf174ec7b1a739d7a51b03122e4462031a6eac281b8d88898b3eebf8ec9efad632741bcde1de4631c4e34a4e915940902805972ae5ba9fa718a6d4040203da2fb40442dbacb07808a2bad33868671d42af47dfac365bffc5567925efdfe4e7fa0596ac53c3739e78c2b8697d8700bc065f2a1f68b01bb8ad5ac555d0f442ba9dd80b763d4cd66eb3e6314cc235c196621e7db1cf8536b9ae2b86456a721ac64daf4a029d91ed4de7a122545698218fa9fab70822da125f79ae86d7492a9e635853dca20de57ef75b6a9bc8855531ee4b3268edbec021736faa940574bd2355136728b4b690489ac57cfb576aed23d20a02e4693f7b5b2b44b83a483ab13a49bf6bfccf2659c2a353fbba158a5331b9c18f22b01ac82e2304e4cd500594a05d8272e7683010c36e5e74d313e01470bb70f77a630e2e3db304a67feb9a00026d42d98250ce3b07bad68d1bc3e648bb492c898cce8c54", "996428b5c3eca793cf32809e35f23666252e5c924e1f7b3c8979bb9dc2f77bc3ed9b85c3f55cef2fae17f3531958fba186b58817e591b821a63058fdf44fc9dca7233cde633abd1ccb5d09a8a8fbc0dce410623c9d846dbdacf6366faccbf555890a462457223ce156c8c6072090c10a7a230fa0bfad7c4d6b3363bee091219299c28320bb48f6d74669dd2129f8f75e43a597fd0b7726f14e1ee6c18d0e89a2095c8001ce23e2dae808a10ef89af3ee64e75ec328abe5a9d5f640e0ff044edf738c8719f8b747282505c34575d7bbb91b32b8e4f8345fd6bd7419ea0efe18ba418456c9b6353b1db4b151c9b2e0cbe217f5d7b367161ddccd0c8ac6aebd0df30009acc3d4791b26f521e4d734f3b6df419d720a1c6632b70dac3bed29ec39642f7aefa34f0a941e471b203fa9f31745177fbc544bf9c78483b093224b4d423db0f3ec7a310d88f50ad450a70b56f6c1"],
        ["9598e7c5d9c50d3ff5fb3740d947c6ee53188cf481778f6e4d432af52aabc428db15dd847175fed8f190f85a03356892824c50dec975134ec2553119e566f6514245fa6a7e9aac7739da4de09f9b822f57cca8cb441552f3233acb231249b21ab39a0a4661155728f81b639a875ad1544ce6a441e73024f5f48e259ff706831264554cb97d4850bbc915cfd3cec021413d6ce9811c3e452e9de5819b079a74058008ab89d2e62c0ab54fd0b63224d96a3cbb2bcd19b7f41453dd68d7af64000d7433220df0e1cf97022350a40925088a4cf14cd424b1489e0e60ad848b6bdc57d41135a791c05ebd16a57e43da3836a6404314e68d4b28699045f1ea3d1eb18e12dcbbd3f881c621a3db2c5c7838a34713020bdca47389836156b0d2a2b82aad695fe05c66a28eeb1f961a7720afe50315deffdf804a6344f4d3867675cf14dfc1df8c00baddd923e2d7602fac89d205479fae1b1268a266ceeccbffa4a2fc488eafb68eab31dfaa57133a395f0a6b6f4255672d593e99fd38e3d88db305f60cca42944d60432ff6c58e44e32ba3d53347ad9c3bc91457d0887412c94d9718061a7aa66b00e8bc1f3b43252bfe6da3c411dd5e98da9fbcb7a56cb8da70b90e1b1af0bb9630191db31e14d9b0a372bb522a44943ab4365b048edd3dc6b2861089bad9b12416a2f8711c3e71d86a7ad45a", "b25e786cf212972996e50bca7e7526651dce2a3264ed80437907998c2458c165843b46f63ed2de397f7aacb24723c4f796403e1a55bbc87c2373692e24b25379a031e4ef0ec4f4a277ad02a7f494b9cc3d71067e594eee7c4dd1a251fc5c1c258b831719f460d68231ad2704cf551593d76f17e5605421809550743bea3d7c40c02a9410af1d4ee8bcf922b85fbbefb731a16765a68549cfdcfcec565a54e9fdaa4cd99ddf8a3fc652b756f99dfa6ccd460573f6b1f4b93a11d11d2f2bd33d391416ccc883047567242d657079cd710d17914f99af768736663582747abe5a3c8ff3cb85aac36b06feb037d1259784dd5e559f9b7a8566016d83d127cdb6eee8de7debd14bd43239ed73f69b6e0b1a7a1ad40757b84495da7b44d97148c2440fdfbb11e19e83093660672ff01f89e33500f6551b05b2faa82f8acf74c53d4f521766c0e64fab31737a2b0e8f20219fc735bb30a067e3c2a528d6eb154fad1a46c4f1afa03e6b1539dcba6a087fb0e40745a1fd7df5760f6f859ac8443fb500a6fbde410d837429a902fc0b0ef53fe7301d4c1af6ad81c6318302d0278ee8a17f13710c038a4053b53b21546af4186f146ab8313328b5ecb38a01ed0b9f7bf51be66dba2b71bebb9bede4f037b7b11ad6", "b84a9c4cb51a839fd89c0ea6589e368aa82dd7f35bf1f519e84679c0f3a6576c01898b4e1cd0032bd727b6265ff32d87b137acda70b953e016445194ab3f701d857e9207e1a2a8925c8bbfb259b360e5157caf6884a26abd46c9a8f80101eb348c7ecaab4045bb8726ff7582fcb505b1c3b0f71916709e5a2b37b691049d97bc52c7e34acd5bfdebb605f2f52f58e58d554dd4326a48bba864da1c409fbf4081361c26264c3de9458d00b9a31165dec119b2f32eef77c0aedb053117e0681ff3211889b5440fe7d40c9e1ab9c9feff946e04cb407c4d4aa23f466f3db32ff91daee59332f5f4cb92ca7bb87f7a304d8b59918f36bde9ce18015a93c46da6f62893de48e8386636166f283ae3f58cae672ecec90dc514b2c093d38a0f9529bb352ebf882998069754109167b93f9ecc731ea90664364955b1ff4304ee4a59b6809ad1d17cbaf49b9590a4fbd0ce6acc0e50ec75436d52f54ee4f8965752b40b0e1237b6b12a79b316058f1bcf4ce9834b4231c0a34549d2be861913bc7c3d6cd220ffe9e63ad5637de844fbf6b31ab7ad31c86a000ba3e6240c03cf9eb79857dfecbfd8c09c0dc7fa2837f17fd5085242", "8482f4fdb355ade9c651dc533f5ca0c7ad57a3ae7eb98c980616f22ccf56a26baa352a97d9b59519cdbbd3abec319644b72b5445cf29202b7ddc2e4779079ba2336ec979db95b2c9592984548351d99460c5cb9c8477f2341d6830e99dbc04b2aac5055c6501c69d300d7dd9903a161e5a8dedb93dbedd62f37005fdaf26d0a9fa69edebfe7e2bc226cc24e3855bb0696418fc548a92d297067c1df3616fdbfd86a4304297ecafd08e5e719adbda602322261aa4758b1fae12f6de29a0d1eaecefe61c7b0c9acbdc6d2a5879146446920fec7d4895298f34305bd3341768ec6ef2ab52591a91cc9374f6544fa0cd23d25507b75a2ab6025a61d09a3d646254561d46357cdfb050bc08ad2d47d186eb440d7808dd67fc46fa96d2fed7bacabab04a3403fd441eb701c01803caf3477ccc5dc6b046a50a8d43fe41fcbbb14b886130cdac217eb820739de32fa6f048cbbc5c7d5ecccad661b605ee14ee2e51805d4497974e1a7410e400e6814ebcbfcc1d41e3d23ae55cc86ce3d89a5d722cf1be0f9859ef73d19b1f140d1090128499a4", "a48d7f71f4c4f86046892e0998acc5fba837ee4db1819a2448a3e6e22fd63c16ead169acb73a0d9330015307a7a5f6e589b0922c234452c8492eb71650aef128b2fa264083323f8d575c2611b8b065ae18742ce636db40a9b13490a36fed3f01814e1b08ce376c9d211c460ff6555e6f0828518547f7be36173c90f7da3bd0241383ef73128e1c703d7a95d586fafff93f3099dcc25f13ab16b5257447a34f9ae6fa94454357b9b1df4be3575436e8f94173d7f33da6e28a7ea835e0eefcf612b351e9386869e0772bf9b0d1eb3339571abff56d1c926a216fba71f39e66db84c0fd05c219bf31b98b02d0a91fc523ca2d6ba3f4a52fea31d79357f3c83c9b4ef43ffe215fa20e7af7aae570f4ad20523da15c1635ea33acf20ef6fb5251c8f5f07dc347ff55ef22e4bac1359864771467ef4448302abe4461d76d4c06f2b7bb51e953b72f9bad9a977f6dd11312dcc73d21e267188ead932b3b02409cfe38c9d9b0330068e5efcb9e79e9edaca58dc1", "a69966cfd1bbd9ff42d3bf0bbcebeb5c23063d0d59b75ba9bce1a1a6eae7403607abedb9549a824dcdf7412d81a520619035ec82ef5f05b912ec70e7f041ef4c4ac13cd9d9af8603b98d1315cac6c994d4d5f5eb00eb42ea766d78df8875ffbd8eee25774e9001c3157c8be8f70ce9e94a36128c5e60f873e5c1052c1dca37a76341055b34ad8700681dd48c06b904a52b30f229a4809629d0024c25eb63f4686084279e4e4f836fa260fdfd0216e4eb660634c464f13b70918427008a37e266e57472fb7e164aa77f346d7e648ef4943b1088d4cca7f7be1138fb1942fc064116158e708d27f0631c199fa6ca704bd86953c7c0d8322c2366f150d221d6f50412730926a301cad611a6fbcec5cad9202e5396e6c67a30d51f9b1d0796fbd70d0a195133eb95871a41895c9a3180d4c14f7e8a546c8dcbc8bc947822685fbcf577ce38b5350b58bf878af684116eeb4c"],
        ["86978b0486907df3ceb6b16f3bb27a189f18aa66940caede5b088ad2e659cf23dbe0efc13d0c2f3a356226775408c34391e0a08d77dddd81077506da24fdeee3bccbe02ab25c4edbc8d3fc033ea6d2d7b29a46f00fa5415c01b0fb19217bffb8831ff1039765405244fe0a714a5494f6ed5916ff57965998cd5b30956dac3d61dd724b438b425d14a53ccd79eeb646a76c8b120ef8a2540731e17239812b3a4055beb4fd3019d1ba8532a37a12d0b73919f51d8cc5dff5095ee506f2020c2d417d4974d60f4ac2415c93698919c5fe646988ea87ac32aeef730379051394817b06fb6f2c225aedf51da68b4c7ae323e45166cd7821df0e6a07b0ad3f74a59a49b6fe1cfb77b7a0353f0160a9782740a316d7c2024a62c541480e8e60658c4d15601339686e30788eb0819bbb1700566e323cf060db090b4e352ca4d4a5954870a361eb653aa8f6284a5b4eb7e5bbbef85666751c6e92eb126e112ce1b638c1c906676bed9c17f5133d00dd2d80aa7b6044633da6bf00310367ef9fd17a4c216ab410d5d32c1d2dcefe8ba536f03bd7730581f40aedf5642adeba3264c972c5c158a83d1758b118280c9f00cf1c4b19f9454ff8333d8d9b984fb3c6943f395647160adf41b30690b351a7dd37e164523f5f634e604a13fd8c95c1a5e464d448ecf6a836724003e439ce1148d19304a735", "96cd4c878fa1cb0561e5a58abd52e503351ad37cd0171d367587768d06539b9f58e0d008c65a2f78280d6a8fb2d98dfcb1a6081f07da70868fe9d38e17a304182be53577e1a1cf461e6d909f38b41178c096754b52a52c2c829383e8982c227296d23aeaded061c5ec26b75ddfa6e7741d15df22056f2e8530e0e87632b93f1fbb98087a68f5666ce7df8e3016a328b057936387767c49d1f078c96c0cd81f17ce82907d6516b13377c11933f8d3d21f2245b4f5130bc7dffa916d8cdf6d896a4448221d9e114d796c076eb65967b70c375c85e546ba19fbdbf6202882f979f94b8dc7f61aa60bf9e766d7456a9168aa6a564cb6d448b815fed21604129e506d5751493f2c90b355f905ea8e2cdbdd433cf79ac38bf9fbdf08d355385e0c926a31e325edd2cee197ccc6dbd70f940b1c254c7e2f0d228a80a14ecb09efc79b10e0d3f8133507537e1c5da3bbe4eb7f475cd4fba0285e23add4534e0709ba7b706974a8187261977e073adb350a792d131fa123acb191196e79ae61b051fbd077ae7575f59b98ce639ba5ccff2dcd98ee5f15c6cccb7cb571dce0c0b0b97f86600ca6d6777910ac0a8780d38678d7acc1672af7384f64786e18c67024481dda1ea74aa8558ea96b0cc97ea85c07a9db00", "93481f2c6934f76ba8282cb6a4ddbfeefb59ddf58088f253629bd62cd97ed167797c6d03a99b4fad4ad1bac51bbe0f4e8ddf1a0315c093711f71a02d84fe494420b1a0afe94b3b40db2f6a438d46c1496d6dc2ba9eca1bd6f05cfe412c42470eb69678289ec83b32f94e054c7436559fac8a8b7d86b2566bad998cca86eccd414e87bc99d4844efbec47d3ed8c414ed72dceae0684d193a1b6de7456927e707f0ef57f65cbb8604ecbc12edc0e600b9f344dac400b9433251d93527ff0b30a964bb96254e72ed23dc39f2b2036b30da8470f92767a51056deb9698fc1f6a588d60f1aac7623e1c68813b37e69c3a40b95bd2f1cf13f17b96cd3e1c39aed3ebf2c70562e65d0e57c05f8b7ac3da4da8983c158cce3250fe428630328d6e31d54d995df8bcab1597f79eb92f141be227f441591c3c1b732e46b046a5ffd3c46912470ed5444edb3c26d1205fdfbe849b1156923cbf03ba5b8aced13e0ec545f9fbf0529060b2c2c7e45222c9f56f2d2fb8190a54ce4664471e22a5646df0afdee21fb3d8353852002dff30db7cc63365d54977f47c74efad2362cdce2f9a29e9a2a06d57470dcd81445873b17523c91f29", "801a616a262bf01afebe3eec4d8ca3c27ae8e4f140145d43e936147f0ea5437ca2f6db278e336eb47271e40c4dc3f7be85cb2618288de4a99d31f7db7535c6280e5cc93a0bb287e8b53dc428e0cca420de4c2eb73a1f4314a97427141c56ec108b62522a285f80625bff7a18eb63aa08033c0b4f3ab22853b9da6fc415cae4bd5a2e3aa407010e4d6a958d18e572df6a5a1d9e5b6a45b0a917281f0708fb16583bdd46b3ae9fa60d2c17b34d318d3cdf6da7433c99ca23ec7ff2f1e2caf470e271cf2858f3d8aa15ca6861a40aeebd1b20c2abe6d167097661d9a61245c91adf99e2366d345e152f9c41a48e5606cf9c1a2fbfcb3dfebc26142d8be5947de3d634b159bd4a340979fcb32b9524068c89051ed3b4578e45625a6aacef43d9f26a5cc1d406b7f5157f3a7b488f00fc3a942e325a8c9a6476909730683666b9d247116c75599c4e69256c147c3ec970161628cd022c3900d059af8df728fb5dc08ab786d71c77d63c271b3f8dc1f22d41bb50c6737dea3d95b6cb2f81772a08332e45c20a77d8667bab3fcf91f26075391f", "b7920b115a4b31e5ebb41fead014393d1feeed78b48b93480240042b17adab0862c70f5cca4922917a186b96c3ef872289c610bbc2fe8df2e3ea9462b333a4337a9208827e9246238c84cac2b17afc2e4352d9efab3eafb871e581b4dca3f4c19533612d3d03cd717ff8cfc78cf38cd3f3e61249da28e9237207842f146eb51ef31bd26277ebd7af183a633d1ac021535278f8b37666917ca5822541fd8d3f285ca4b4f431973e3bc5485f526650851711c074dc0aef8500643a9fc8f1cb8082c6d25d7aecd02664c2dd058348a65ea072aa9ce0267630d84efd4e54f2ba3ff83347363a8daea3d1472adf44ef10ff7818d2c95844ffb68953958cf2dfdfc98da7d9cf7ec8716a04802af0c3cf78835e3d3758322e2cbf311dd4e9f91856a081b924b70c4de532e13c42699fa85125da42c8389e093cd8bb1a96b5f92b771d825aa034be7b57a4286c9e76b7824ff978545649955f1e354483d5d65ed119f347d1202654fd15cfa643502f4e48ab9928", "95dbab10bce9326038b9a8fb9586bbac067671f6935fa6fa10e66dbe446ce2433b1694e4621d6c6464ff4020d098491a8eeb6fbd5d7f0eb76e88c93b1339dc9e4a83720ded0f4e848c29411b7af293de1ceb7cf09728974013dd2c1bf4abdfd3af0a15fb78c9003412d8128783c94c01b7542d1cb6c499fb3341c59aa1460fa8f504c1698518505f5743e0921ba5be09424012490a132ce3c5d49f0f546bf2fdb1c2d63c2c7719ac1d356005ab4feb433459af44415a8b38b4f01c8a53c72ca5b15b0e0064a0fd4597a6cab5c7862d0d65e401d5e2849588e24b05cddd037fbe5865a237df3ab8958a26b95f3a7e1dcc700183f943e59e635995674ae54a147e9f164116b48e663dae7ae7ae1abc28553a784e623de7cc79e18a8f012003c86b0af2c1c8aedf1546d3cd633716e6551b1bb1e9d731b4cf89557e124c17fe5fe785ea8da35706839f0d4b6ad2d0340208"],
        ["a54a301cc24e7fc6a8a96f72712df9f7b1b862db8602aa133004c4d88bc0f6a8bc769602570c9738f9195737095a6a88a259c27e7b631cf99ce498a3263a66d1290c3ab0878733cfa31b34c52666e586606f4c6ead79387842e32e3fab36fe4b96b5f3101fe93871792c857db7429f714c02942b4a7c694604cec1db16ed171f7f0bf1c37436bb97f42fd20b48df71ce16a7f9e4914675f056d414d1043596aa3de67d3180da30927ef85b2d7ed96d7016678860ff5f22226da33594141aaed7db6f8672249d42b63ac9cc6ed70f96350f3529c9408066a803967b5eb5af27238d786f5c5fb53592d0a2b96046b10ecd01ee28d75185d1cb7147b1bbd3dae601ae6abe02bdf5cb865096fa58129f75c27119d36d1933176a6a4cc7731bbcec71785339423ca6bebddd2c5f2c58801cd352ef09dd59874bb3f16d2ac626d24bfab00b5df809bba2f6035231240ed75f636f88854ee0190102eb846bc11c2c8c11e5a12823c260e52a35f9958ba1d66a1e1e7359c0c376e09da461bbd45e1e2cddb8835eee34819155e801b9941badfa921078e00cc0ed7a8d3e9f12e2420f17a2b588483e96482814ca474eb3515ebf955f433fddc5544852f7f65693a548c91989d1001cb5fa323c4c26d046ded676455b003322deb4b383d29b77820ce4845d7f9f5ea34d5b8fc02b943f6f32f67104", "a89fa0683fd1091f7d5a0f2ad9f9f2790817b408f911843350135cd3c335877cacc400bfc9e780adda6a13b3ca38b2c08d91eab672902fad4c65a87b73e5b8ed1b5d9c60ca41e0259bfc7ce1d57245921bc7f5a89f916ac1fd46b96d41324f71909e58da6ce27fa6d9c99caf99a4cfe311e1c81cab41527e206f0e31d5d66cab85ed4afe6bd1227d82ec0fb3eaa1db651efa5a812d091377688b3a8950846d02375d9c377b234bf807ad02b8639a02e145ccfdac1068b572e020c73a12fd7c858fb614073065760549be52b363c9f0e7281a091f25c39c44fa3c52cb9180775f1b2e789d018ea14676259456ac959e8e3c19d146999e7eecc3ef39c45c34d42fdc83a3ac7bab78781c3f08641564be017137be4f1c50cca71ee25e61edeb981f6279a36c114be9aa9504d80905d356623174a5272dd7c3e6232c52f8e4f457630230cf08dcac7d635a016513139d1b4469de362f7e3cb95628339610d740fe783e3c9f1a829310c7b714e43583c6473c523515ea0bab277ee226df3cd4faaa237494762ba6d9fe7bb9d18347bd8ba8ed4480347e12cbcf6f06f0905bd7c6decb0a8399de2ef96574965e6bf4f44774be29d5f67071184676824f9694a782d6bffdcabc2d83c92ce985c87c36346a18f2", "b83a05a357c7db4de2adc79912a1ab135f1f6b5e1f292caede59488712c8011243611d2b6a7dc3c0f4c057af2339b1c89327bc17f86799659e78d67e52dc6043682d8c83c13860f68455f3b68866d9f4425b144da09a1532f80fe28c4c17ef288266036cc2bfc3bd76c5aa86d735a045608c517f2329d546cb6deb477f252882fdf0c6dffecb5aa3ecd67272f02eaaec334c4523f6e87e0c4990ce87f3f37783f8ba653bf051ede9e0498f52cfe7545b1b3213f658d6f64e9827d89b03af21b0658c8ccc7df5b091e07b73b32b6768de11b96d5f23b2a3b177b2128e072f9a4259bf86cea04deebed9bc49a5456faf1e5941d67bc40ebea2e8bb6ebc15db427f1f070fd8b70fcb367a76a00eefbe923b637157d68bba0e39c28d4d7d15cc99b7f2bf6369c172ecbaae6937a1ddbbfc5a2c6700b7b9707bb2a2aaaa1e0c783a44e0b3b276d3622bcae884d230645f060824cad315b808d948548e75bba9f8bac24eb81777a6265450910a3f5bcaa53e1208a7e964ad67bfa47e0cf440998439b043e869f36008cea71ce129bef9c69d870f1d33a48b36dc40d62087193dd5447399a9c2df26fc85ab822dcae78be1bff8", "ac1efac10fd128bbcbf6b30e6af3163ea5331e1450bffaac782e6a83e17356fa3226ba12744b14dba37d9f5fdca3a575a9916479e9ba1a787c659e260e549cbbf2586e4de6f9ff8bd828310c7fe86fbc75e82c540ba25df1108acbc64bf44110b1eb215c4801523e56a136546a1b9584c70435f3dcc9e459dfce417813a48a4f7edb0ed6ec0d517587303f101ada357329917d8bdbcdcb6d98462d7bf6195ca3ad708c381d1fd0ba3d3e468a64be1b7558f807d4dea44351fcb928669608dbe55d33edb82ff75de0c9cfb9cc28fe8b514a25136cdcd0f205e0255b44c9786e6c4f2c2eebee8b4664b9fbfde4ed489c9a2301c3687c86a9f543118c39d49c96379e21bb4e14c39a98e844d78dc8551e8c362ab849397d358bc19df0829d50ffd01fe35e6c2a7e9c4415d19047c92342fb6877409e3dcf9ef18895e1d0dc0d67e0aaddc75710fd936b90001d8aa7563f0b635539cec881da396c8ad6b968073ec898f661afa211b9991bb85fbe12b2ec5a382ca0dea93420bbca1b99b44e328497afbc11ce255aaaac701e4e82fa0b02b5", "98be82a470009e9665313e275398584ee0d60f2dfe78d0c289a8d24d36c72e1a53b037174dd5dff4c44e1e1eaae794baa41795afb452bf887d5c824c7cb4bac26fd9c3e4ee48891be8621c3b60a212e9368e80bbe4a5a38f4eff80224deda28b9668b74653e171d9d3eeb05ed985a28c68ac1c4bf8fc9dc0f946b42b30d66037e5ad108953471a6708f01c163a749fa428b759b6172e892063acd091efc13301196357b0411fcc8846a18feb6b47e3a31b45f6cbaa8022e4fdaeca08182062f2a2b7809cc7ccebbf4ef663a78ac558437231202a3a2b43eb5108bd3902c3e087a16afb7ea58516aa90a4c9a018aad1032dc78c82deaa60490efe9220f616c5abc0fee4732f2b80dbe2b19f5f819b51c46a6098ba61488e7fce06dbab7f35ee8a9ed3b350b931bd92448820f657fd1c40180269593d3e04e4d02f940aaefa90e9ff00bfcb4edf76b76c758c967e334c1047aa75a0e9ea34cc742302bcf14122e9387fa0286b90a2b4f763a638e256b30d", "8d1cc48dcb76ef41eaedd62c9455561d900f5433f86ff276b0c229a96392377227e94abc3913b19a353364dd63e6fdd789364d008de541af874511db6d6437405828d245a56fbd9c8232c04751410ea483aee90676b0caf3272f8e8a26313e42b8769625b21745cba4bd612a46c35773059d7fc025d40bb0c6a180ceff8abb4c94bf800ce07197db4fa6cc867bf4c4f71eeb3e897196022e1fb48294b7df5b4b684922500ecc87cd5e4dd142ab18795d003f8aed2e99bf04226cb742dc350274514873a764dee5d6ee831fb682120de75f5f9ed023fb6ecf3927be0c47cff17d8cb4e5cdff9f1792380e403b00c3a57c42070d823e6de49c9a1cf530cdeaceb5f492efc5f529014db56f321751d48a290053bee39893a29f17abb913c27638aee85d4f9846ad6695a5cf1dcaf076fd7d2a1eebf94d0056de1ce2105ccc347fc0d800959414710c2f0950789318202a34"],
];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, ExpandMsgXof<Shake256>>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<_, _, ExpandMsgXof<Shake256>>(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, ExpandMsgXof<Shake256>>(
                        &pk,
                        header,
                        ph,
                        &generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature = Signature::new::<_, _, ExpandMsgXof<Shake256>>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, ExpandMsgXof<Shake256>>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, ExpandMsgXof<Shake256>>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature = Signature::new::<_, _, ExpandMsgXof<Shake256>>(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, ExpandMsgXof<Shake256>>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature = Signature::new::<_, _, ExpandMsgXof<Shake256>>(
        &key_pair.secret_key,
        &key_pair.public_key,
        header,
        &generators,
        messages.clone(),
    )
    .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, ExpandMsgXof<Shake256>>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, ExpandMsgXof<Shake256>>(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, ExpandMsgXof<Shake256>>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, ExpandMsgXof<Shake256>>(
                &pk,
                header,
                ph,
                &generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, ExpandMsgXof<Shake256>>(
                    &pk,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
